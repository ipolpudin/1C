/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
									Условное оформление (УО)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//ОБЯЗАТЕЛЬНО АвтоматическоеСохранениеПользовательскихНастроек = Ложь
//Иначе будут сохраняться кешэ пользовательских настроек УО
// Справочник ~сэ_ПланМероприятий Форма ~сэ_.....
//Сделать проверку на количество отборов к ДинСписку 
&НаСервере
Процедура сэ_УсловноеОформлениеСтатусЦветФона()
	//Цвета
	СтатусВыполненоЦвет = Новый Цвет(215, 240, 199);
	СтатусИзмененоЦвет = Новый Цвет(250, 250, 217);
	СтатусВРаботеЦвет = Новый Цвет(210, 232, 245);
	СтатусОтмененоИлиПриостановленоЦвет = Новый Цвет(255, 238, 238);
	СтатусУтвержденоГендиректоромСобственниковТехСоветомЦвет = Новый Цвет(220, 220, 220); 
	
	
	
	ДС_Мероприятия.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	
	УО = ДС_Мероприятия.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы;
	УО.Очистить();
	
	
	//Статус Выполнено
	ЭлементУО = УО.Добавить();
	ЭлементУО.Использование = Истина;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", СтатусВыполненоЦвет);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");//Это название переменной в динамическом списке. На форме название ДС_МероприятияСтатус
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Перечисления.сэ_СтатусыПлановыхМероприятий.Выполнено;

	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Статус");//Это название переменной в динамическом списке. На форме название ДС_МероприятияСтатус

	
	//Статус Изменено
	ЭлементУО = УО.Добавить();
	ЭлементУО.Использование = Истина;

	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", СтатусИзмененоЦвет);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Перечисления.сэ_СтатусыПлановыхМероприятий.Изменено;

	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	
	//Статус В Работе
	ЭлементУО = УО.Добавить();
	ЭлементУО.Использование = Истина;

	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", СтатусВРаботеЦвет);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Перечисления.сэ_СтатусыПлановыхМероприятий.ВРаботе;

	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;

	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Статус");
	

	
	
	//Статус Отменено или Приостановлено
	ЭлементУО = УО.Добавить();
	ЭлементУО.Использование = Истина;

	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", СтатусОтмененоИлиПриостановленоЦвет);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЭлементУсловия.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	
	СтатусОтменено = ЭлементУсловия.Элементы.Вставить(0,Тип("ЭлементОтбораКомпоновкиДанных"));
	СтатусПриостановлено = ЭлементУсловия.Элементы.Вставить(1,Тип("ЭлементОтбораКомпоновкиДанных"));
	
	
	
	
	СтатусОтменено.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	СтатусОтменено.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтатусОтменено.ПравоеЗначение = Перечисления.сэ_СтатусыПлановыхМероприятий.Отменено;  
	
	СтатусПриостановлено.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	СтатусПриостановлено.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтатусПриостановлено.ПравоеЗначение = Перечисления.сэ_СтатусыПлановыхМероприятий.Приостановлено;
	
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;

	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	
	
	
	//Статус В Утверждено ген директором или собственником или тех советом
	ЭлементУО = УО.Добавить();
	ЭлементУО.Использование = Истина;

	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", СтатусУтвержденоГендиректоромСобственниковТехСоветомЦвет);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЭлементУсловия.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	СтатусУтвержденоГенДиректором = ЭлементУсловия.Элементы.Вставить(0,Тип("ЭлементОтбораКомпоновкиДанных"));
	СтатусУтвержденоСобственником = ЭлементУсловия.Элементы.Вставить(1,Тип("ЭлементОтбораКомпоновкиДанных"));
	СтатусУтвержденоТехническимСоветом = ЭлементУсловия.Элементы.Вставить(2,Тип("ЭлементОтбораКомпоновкиДанных"));
	
	
	
	СтатусУтвержденоГенДиректором.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	СтатусУтвержденоГенДиректором.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтатусУтвержденоГенДиректором.ПравоеЗначение = Перечисления.сэ_СтатусыПлановыхМероприятий.УтвержденоГенДиректором;
	
	СтатусУтвержденоСобственником.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	СтатусУтвержденоСобственником.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтатусУтвержденоСобственником.ПравоеЗначение = Перечисления.сэ_СтатусыПлановыхМероприятий.УтвержденоСобственником;
	
	СтатусУтвержденоТехническимСоветом.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	СтатусУтвержденоТехническимСоветом.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтатусУтвержденоТехническимСоветом.ПравоеЗначение = Перечисления.сэ_СтатусыПлановыхМероприятий.УтвержденоТехническимСоветом;

	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Статус");

	
	
		
	
	ДС_Мероприятия.КомпоновщикНастроек.ЗагрузитьНастройки(ДС_Мероприятия.КомпоновщикНастроек.Настройки);
	

КонецПроцедуры
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
									УФ
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
		Чтение дин. списка из УФ формы
////////////////////////////////////////////////////////////////

&НаСервере
Функция ЧтениеДинамическогоСписка();

   // Получаем СКД с текстом запроса
   СКД_запрос  = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
   
   // Получаем настройки пользователя (отборы, сортировки и т.п.)
   Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
   
   // Получаем макет с учетом настроек
   КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
   МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД_запрос ,Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
   
   // Выполняем инициализацию динамического списка
   ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
   ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
   ПроцессорВыводаРезультата  = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
   
   // Выводим реультат
   Результат = ПроцессорВыводаРезультата.Вывести(ПроцессорКомпоновки);
   
   Если Результат.Количество()>0 Тогда
	   Возврат Результат[0].Идентификатор;              
   Иначе
	   Возврат Неопределено; 
   КонецЕсли;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
									Динамический список на Форме Списка 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
		Добавление новой колонки (Способ 1)
////////////////////////////////////////////////////////////////
// "ПриСозданииНаСервере" добавить в запрос дин. списка пустое поле. Например "ВТР_БитАдаптерВыгрузитьДанныеВERP"
// Добавление события дин. списка "СписокПриПолученииДанныхНаСервере", с логикой заполнения пустого поля (Например "ВТР_БитАдаптерВыгрузитьДанныеВERP")
// Плюсы: легко поддается обновлениям на релизы поставщика. Запрос лишь дополняется
// Минусы: Событие дин. списка "СписокПриПолученииДанныхНаСервере", вызывается при пролистовании списка формы в режиме Предприятия.
// Получается запрос в цикле. СписокПриПолученииДанныхНаСервере(...,Строки) Строки ~20. Каждые 20 раз будет вызываться "СписокПриПолученииДанныхНаСервере" 

Процедура ДополнитьЗапросДинСписокаФормы()
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 03.05.2024 VTRD-1001
	ЭтаФорма.Список.ТекстЗапроса = СтрЗаменить(ЭтаФорма.Список.ТекстЗапроса, "ВедомостиПрочихДоходов.Комментарий КАК Комментарий,", "ВедомостиПрочихДоходов.Комментарий КАК Комментарий,
	|     ЛОЖЬ КАК ВТР_БитАдаптерВыгрузитьДанныеВERP,");
	
	// Добавление колонки "Выгружено в ERP.УХ(БитАдаптер)"
	ПараметрыЭлемента = ВТР_РаботаСИнтерфейсом.СтруктураПараметровЭлементаФормы(Тип("ПолеФормы"));  		
	ПараметрыЭлемента.ИмяЭлемента = "ВТР_БитАдаптерВыгрузитьДанныеВERPКолонка";
	ПараметрыЭлемента.ЭлементРодитель = ЭтаФорма.Элементы.Список;   	
	ПараметрыЭлемента.ПутьКДанным = "Список.ВТР_БитАдаптерВыгрузитьДанныеВERP";
	ПараметрыЭлемента.ЗаголовокЭлемента = "Выгружено в ERP.УХ(БитАдаптер)";   
	
	НовыйЭлемент = ВТР_РаботаСИнтерфейсом.ДобавитьНаФормуФлажок(ЭтаФорма, ПараметрыЭлемента);
	// Нетиповое} ПервыйБИТ Полпудин И.С. 03.05.2024 VTRD-1001
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВТР_СписокПриПолученииДанныхНаСервереПосле(ИмяЭлемента, Настройки, Строки)
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 24.04.2024 VTRD-903	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Строки.ПолучитьКлючи());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТР_РеестрВыгрузкиПлатежныхДокументовERP.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтВыгруженныеОбъекты
	|ИЗ
	|	РегистрСведений.ВТР_РеестрВыгрузкиПлатежныхДокументовERP КАК ВТР_РеестрВыгрузкиПлатежныхДокументовERP
	|ГДЕ
	|	ВТР_РеестрВыгрузкиПлатежныхДокументовERP.Ссылка В(&Ссылка)
	|	И ВТР_РеестрВыгрузкиПлатежныхДокументовERP.Выгружен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеВедомости.Ведомость КАК Ссылка
	|ИЗ
	|	ВтВыгруженныеОбъекты КАК ВтВыгруженныеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение.Ведомости КАК ПлатежноеПоручениеВедомости
	|		ПО (ВтВыгруженныеОбъекты.Ссылка = ПлатежноеПоручениеВедомости.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтВыгруженныеОбъекты.Ссылка
	|ИЗ
	|	ВтВыгруженныеОбъекты КАК ВтВыгруженныеОбъекты";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаСписка = Строки.Получить(Выборка.Ссылка);
		Если НЕ СтрокаСписка = Неопределено Тогда
			СтрокаСписка.Данные["ВТР_БитАдаптерВыгрузитьДанныеВERP"] = Истина;		
		КонецЕсли;
		
	КонецЦикла;
    // Нетиповое} ПервыйБИТ Полпудин И.С. 24.04.2024 VTRD-903
	
КонецПроцедуры

////////////////////////////////////////////////////////////////
		Добавление новой колонки (Способ 2)
////////////////////////////////////////////////////////////////
// "ПриСозданииНаСервере" добавить в запрос дин. списка новые поля. Например "ВТР_НомерПлатежногоПоручения"
// Плюсы: Нет запроса в цикле как у "Добавление новой колонки (Способ 1)"
// Минусы: Тяжело поддается обновлениям на релизы поставщика. Запрос полностью заменяется Событие дин. списка 

Процедура ВТР_ДобавлениеКолонокВСписок()
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 01.03.2024 VTRD-749  
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Документы.ПлатежноеПоручение) Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтаФорма.Список.ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка КАК Ссылка,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Дата, ДЕНЬ) КАК ДатаДокумента,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.ПометкаУдаления КАК ПометкаУдаления,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Номер КАК Номер,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Проведен КАК Проведен,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Организация КАК Организация,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА РеквизитыПлатежныхДокументовПеречисленияЗарплаты.ПлатежныйДокумент ЕСТЬ НЕ NULL 
	|			ТОГДА РеквизитыПлатежныхДокументовПеречисленияЗарплаты.ЗарплатныйПроект
	|		ИНАЧЕ ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.ЗарплатныйПроект
	|	КОНЕЦ КАК ЗарплатныйПроект,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.НомерРеестра КАК НомерРеестра,
	|	ЕСТЬNULL(СостоянияДокументовЗачисленияЗарплаты.Состояние, СостоянияДокументовОткрытияЛицевыхСчетов.Состояние) КАК Состояние,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Сотрудники КАК Сотрудники,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ответственный КАК Ответственный,
	|	ВЫРАЗИТЬ(ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Комментарий КАК СТРОКА(500)) КАК Комментарий,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Тип КАК Тип,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьФайлы,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ПодтверждениеЗачисленияЗарплаты.Ссылка, ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Ссылка) ЕСТЬ НЕ NULL 
	|				ТОГДА &ПодтвержденияПолучены
	|		КОНЕЦ) КАК ДокументыПодтверждения,
	|	ВЫБОР
	|		КОГДА ВтСуммаВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ВтСуммаВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу КАК ЧИСЛО(15, 2))
	|		КОГДА ВтВедомостьИПлатежноеПоручениеСумма.СуммаПлатежногоПоручения ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ВтВедомостьИПлатежноеПоручениеСумма.СуммаПлатежногоПоручения КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ЕСТЬNULL(ВтВедомостьИПлатежноеПоручениеСумма.ВТР_ВыгруженоВERPУх, ЛОЖЬ) КАК ВТР_ВыгруженоВERPУх,
	|	ЕСТЬNULL(ВтВедомостьИПлатежноеПоручениеСумма.ВТР_ДатаРасхода, ДАТАВРЕМЯ(1, 1, 1)) КАК ВТР_ДатаРасхода,
	|	ЕСТЬNULL(ВтВедомостьВБанк.НомерПлатежногоПоручения, """") КАК ВТР_НомерПлатежногоПоручения,
	|	ЕСТЬNULL(ВтВедомостьВБанк.ДобавленоВПлатежноеПоручение, ЛОЖЬ) КАК ВТР_ДобавленоВПлатежноеПоручение,
	|	ЛОЖЬ КАК ВТР_БитАдаптерВыгрузитьДанныеВERP
	|ИЗ
	|	ЖурналДокументов.ДокументыОбменаСБанкамиПоЗарплатнымПроектам КАК ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодтверждениеЗачисленияЗарплаты КАК ПодтверждениеЗачисленияЗарплаты
	|		ПО (ПодтверждениеЗачисленияЗарплаты.Проведен)
	|			И (ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка = ПодтверждениеЗачисленияЗарплаты.ПервичныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодтверждениеОткрытияЛицевыхСчетовСотрудников КАК ПодтверждениеОткрытияЛицевыхСчетовСотрудников
	|		ПО (ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Проведен)
	|			И (ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка = ПодтверждениеОткрытияЛицевыхСчетовСотрудников.ПервичныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыПлатежныхДокументовПеречисленияЗарплаты КАК РеквизитыПлатежныхДокументовПеречисленияЗарплаты
	|		ПО (ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка = РеквизитыПлатежныхДокументовПеречисленияЗарплаты.ПлатежныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЗачисленияЗарплаты КАК СостоянияДокументовЗачисленияЗарплаты
	|		ПО (ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка = СостоянияДокументовЗачисленияЗарплаты.ДокументЗачисленияЗарплаты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовОткрытияЛицевыхСчетов КАК СостоянияДокументовОткрытияЛицевыхСчетов
	|		ПО (ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка = СостоянияДокументовОткрытияЛицевыхСчетов.ДокументОткрытияЛицевыхСчетов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	|		ПО (ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка = НаличиеФайлов.ОбъектСФайлами)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСуммаВедомостьНаВыплатуЗарплатыВБанк КАК ВтСуммаВедомостьНаВыплатуЗарплатыВБанк
	|		ПО (ВтСуммаВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтВедомостьИПлатежноеПоручениеСумма КАК ВтВедомостьИПлатежноеПоручениеСумма
	|		ПО (ВтВедомостьИПлатежноеПоручениеСумма.ПлатежноеПоручение = ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка
	|				ИЛИ ВтВедомостьИПлатежноеПоручениеСумма.Ведомость = ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтВедомостьВБанк КАК ВтВедомостьВБанк
	|		ПО (ВтВедомостьВБанк.Ведомость = ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка)
	|{ГДЕ
	|	(ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СоставДокументовЗарплатаКадры КАК СоставДокументовЗарплатаКадры
	|			ГДЕ
	|				СоставДокументовЗарплатаКадры.ФизическоеЛицо = &ФизическоеЛицо
	|				И ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка = СоставДокументовЗарплатаКадры.ДокументФизическогоЛица)) КАК Поле2}
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ссылка,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Дата,
	|	НАЧАЛОПЕРИОДА(ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Дата, ДЕНЬ),
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.ПометкаУдаления,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Номер,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Проведен,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Организация,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Подразделение,
	|	ВЫБОР
	|		КОГДА РеквизитыПлатежныхДокументовПеречисленияЗарплаты.ПлатежныйДокумент ЕСТЬ НЕ NULL 
	|			ТОГДА РеквизитыПлатежныхДокументовПеречисленияЗарплаты.ЗарплатныйПроект
	|		ИНАЧЕ ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.ЗарплатныйПроект
	|	КОНЕЦ,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.НомерРеестра,
	|	ЕСТЬNULL(СостоянияДокументовЗачисленияЗарплаты.Состояние, СостоянияДокументовОткрытияЛицевыхСчетов.Состояние),
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Сотрудники,
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Ответственный,
	|	ВЫРАЗИТЬ(ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Комментарий КАК СТРОКА(500)),
	|	ЖурналДокументовДокументыОбменаСБанкамиПоЗарплатнымПроектам.Тип,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВтВедомостьИПлатежноеПоручениеСумма.ВТР_ВыгруженоВERPУх, ЛОЖЬ),
	|	ВЫБОР
	|		КОГДА ВтСуммаВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ВтСуммаВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу КАК ЧИСЛО(15, 2))
	|		КОГДА ВтВедомостьИПлатежноеПоручениеСумма.СуммаПлатежногоПоручения ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ВтВедомостьИПлатежноеПоручениеСумма.СуммаПлатежногоПоручения КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВтВедомостьИПлатежноеПоручениеСумма.ВТР_ДатаРасхода, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ВтВедомостьВБанк.ДобавленоВПлатежноеПоручение, ЛОЖЬ),
	|	ЕСТЬNULL(ВтВедомостьВБанк.НомерПлатежногоПоручения, """"),
	|	ВтСуммаВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу,
	|	ВтВедомостьИПлатежноеПоручениеСумма.СуммаПлатежногоПоручения";
	
	// Добавление колонки "Сумма"
	ПараметрыЭлемента = ВТР_РаботаСИнтерфейсом.СтруктураПараметровЭлементаФормы(Тип("ПолеФормы"));  		
	ПараметрыЭлемента.ИмяЭлемента = "Сумма";
	ПараметрыЭлемента.ЭлементРодитель = Элементы.Список;   	
	ПараметрыЭлемента.ПутьКДанным = "Список.Сумма";
	ПараметрыЭлемента.ЗаголовокЭлемента = "Сумма";   
	ПараметрыЭлемента.ДополнительныеПараметры.Вставить("Формат", "ЧДЦ=2");
	
	НовыйЭлемент = ВТР_РаботаСИнтерфейсом.ДобавитьНаФормуПолеНадписи(ЭтотОбъект, ПараметрыЭлемента);
	
	// Добавление колонки "ВТР_ДатаРасхода"
	ПараметрыЭлемента = ВТР_РаботаСИнтерфейсом.СтруктураПараметровЭлементаФормы(Тип("ПолеФормы"));  		
	ПараметрыЭлемента.ИмяЭлемента = "ВТР_ДатаРасхода";
	ПараметрыЭлемента.ЭлементРодитель = Элементы.Список;   	
	ПараметрыЭлемента.ПутьКДанным = "Список.ВТР_ДатаРасхода";
	ПараметрыЭлемента.ЗаголовокЭлемента = "Дата расхода";   
	
	НовыйЭлемент = ВТР_РаботаСИнтерфейсом.ДобавитьНаФормуПолеНадписи(ЭтотОбъект, ПараметрыЭлемента);
	
	// Добавление колонки "ВТР_ДобавленоВПлатежноеПоручение"
	ПараметрыЭлемента = ВТР_РаботаСИнтерфейсом.СтруктураПараметровЭлементаФормы(Тип("ПолеФормы"));  		
	ПараметрыЭлемента.ИмяЭлемента = "ВТР_ДобавленоВПлатежноеПоручение";
	ПараметрыЭлемента.ЭлементРодитель = Элементы.Список;   	
	ПараметрыЭлемента.ПутьКДанным = "Список.ВТР_ДобавленоВПлатежноеПоручение";
	ПараметрыЭлемента.ЗаголовокЭлемента = "Добавлено в п/п";   
	
	НовыйЭлемент = ВТР_РаботаСИнтерфейсом.ДобавитьНаФормуФлажок(ЭтаФорма, ПараметрыЭлемента);
	
	// Добавление колонки "ВТР_НомерПлатежногоПоручения"
	ПараметрыЭлемента = ВТР_РаботаСИнтерфейсом.СтруктураПараметровЭлементаФормы(Тип("ПолеФормы"));  		
	ПараметрыЭлемента.ИмяЭлемента = "ВТР_НомерПлатежногоПоручения";
	ПараметрыЭлемента.ЭлементРодитель = Элементы.Список;   	
	ПараметрыЭлемента.ПутьКДанным = "Список.ВТР_НомерПлатежногоПоручения";
	ПараметрыЭлемента.ЗаголовокЭлемента = "Номер п/п";   
	
	НовыйЭлемент = ВТР_РаботаСИнтерфейсом.ДобавитьНаФормуПолеВвода(ЭтаФорма, ПараметрыЭлемента);
	// Нетиповое} ПервыйБИТ Полпудин И.С. 01.03.2024 VTRD-749

КонецПроцедуры
