////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                 //СправочнаяИнформация
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Вкладная Наборы Данных:
1) Тип Значения. Например: Если в запросе указан отбор регистратора по определенному документу и в поле Тип Значения указан тип этого документа. 
-> ТО при установлении отбора в пользователь режиме будет отображаться отбор по конкретным записям из этого Докумета
2) Доступные Значения. Для поля определяется список доступных значений из предопределяемых объектов или программным способом любые объекты 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                 //Заполнение
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Отчет с переопредилением Макета
//Заолняет и выводит Макет в Отчет

//https://disk.yandex.ru/d/uCZAKOzIhaDSDA Отчет как Печатка, 2 МАКЕТА на выбор(sfxРешениеКомиссиПоУстановлениюНепрерывногоСтажаПоЧАЭС)
//ПриКомпановнеРезультата(ДокументРезультат) -> процедура Сформировать(ДокументРезультат) -> процедура печати(ДокументРезультат). ТабДок = ДокументРезультат -> ...Заполнение... -> ТабДок.Вывести()

// Выводит в табличный документ области макета с заполненными параметрами коллекций данных.
//
//{СофтЭксперт Полпудин И.С Дата: 07/06/2023
//ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета() взята за основу.
//Добавлена проверка на вывод области и вывод ГоризонтальныйРазделительСтраниц
//
// Параметры:
//		ДокументРезультат	- ТабличныйДокумент
//		Макет				- ТабличныйДокумент
//		ИменаОбластейМакета	- Строка, имена областей макета, перечисленные через запятую
//		Данные, ... Данные9	-Структура, Неопределено содержат значения параметров областей, выводимого макета.
//
Процедура ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, Макет, ИменаОбластейМакета, Данные, 
	Данные1 = Неопределено, Данные2 = Неопределено, Данные3 = Неопределено, Данные4 = Неопределено, 
	Данные5 = Неопределено, Данные6 = Неопределено, Данные7 = Неопределено, Данные8 = Неопределено, 
	Данные9 = Неопределено) Экспорт
	
	
	//{СофтЭксперт Полпудин И.С Дата: 07/06/2023
	//Массив для проверки вместимости ТД
	МассивОбластейДляПроверкиВывода = Новый Массив;
	//}СофтЭксперт Полпудин И.С Дата: 07/06/2023
	
	ИменаОбластей = СтрРазделить(ИменаОбластейМакета, ",");
	Для Каждого ИмяОбласти Из ИменаОбластей Цикл
		
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
		ЗаполнитьПараметрыОбластиМакета(Область, Данные, 
		Данные1, Данные2, Данные3, Данные4, 
		Данные5, Данные6, Данные7, Данные8, 
		Данные9);
		
		//{СофтЭксперт Полпудин И.С Дата: 07/06/2023
		МассивОбластейДляПроверкиВывода.Очистить();
		МассивОбластейДляПроверкиВывода.Добавить(Область);
		
		Если НЕ ДокументРезультат.ПроверитьВывод(МассивОбластейДляПроверкиВывода) Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ДокументРезультат.Вывести(Область);
		Иначе
			ДокументРезультат.Вывести(Область);
		КонецЕсли; 
		//}СофтЭксперт Полпудин И.С Дата: 07/06/2023
		
		
	КонецЦикла;
	
КонецПроцедуры



/////////////////////////////////////////////////////////////////////////////////////////
//Заполняет область макета

// Заполняет параметры области табличного документа.
//
// Параметры:
//		Область				- ОбластьЯчеекТабличногоДокумента
//		Данные, ... Данные9	-Структура, Неопределено содержат значения параметров областей, выводимого макета.
//
Процедура ЗаполнитьПараметрыОбластиМакета(Область, Данные, 
	Данные1 = Неопределено, Данные2 = Неопределено, Данные3 = Неопределено, Данные4 = Неопределено, 
	Данные5 = Неопределено, Данные6 = Неопределено, Данные7 = Неопределено, Данные8 = Неопределено, 
	Данные9 = Неопределено) Экспорт
	
	Область.Параметры.Заполнить(Данные);
	
	Если Данные1 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные1);
	КонецЕсли;
	
	Если Данные2 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные2);
	КонецЕсли;
	
	Если Данные3 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные3);
	КонецЕсли;
	
	Если Данные4 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные4);
	КонецЕсли;
	
	Если Данные5 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные5);
	КонецЕсли;
	
	Если Данные6 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные6);
	КонецЕсли;
	
	Если Данные7 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные7);
	КонецЕсли;
	
	Если Данные8 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные8);
	КонецЕсли;
	
	Если Данные9 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные9);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Компоновка Макета ПечатнойФормы

//Выполняет запрос из СКД
//Инициализирует Макет в Отчет


ЗарплатаКадрыОтчеты.РезультатКомпоновкиМакетаПечатнойФормы(ОбъектОтчета, ДанныеРасшифровки = Неопределено, 
	НастройкиОтчета = Неопределено, ВнешниеНаборыДанных = Неопределено, ДополнительныеПараметры = Неопределено)
 
 /////////////////////////////////////////////////////////////////////////////////////////
 //Доработана для работы с ВнешнимОтчетом
  
 // Функция - Результат компоновки макета печатной формы
//
//{СофтЭксперт Полпудин И.С Дата: 07/06/2023
//ЗарплатаКадрыОтчеты.РезультатКомпоновкиМакетаПечатнойФормы взята за основу и доработана для работы с ВнешнимОтчетом
//
// Параметры:
//  ОбъектОтчета			 - 	 - 
//  ДанныеРасшифровки		 - 	 - 
//  НастройкиОтчета			 - 	 - 
//  ВнешниеНаборыДанных		 - 	 - 
//  ДополнительныеПараметры	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция РезультатКомпоновкиМакетаПечатнойФормы(ОбъектОтчета, ДанныеРасшифровки = Неопределено, 
	НастройкиОтчета = Неопределено, ВнешниеНаборыДанных = Неопределено, ДополнительныеПараметры = Неопределено) 
	
	РезультатКомпоновкиМакета = Новый Структура;
	
	// Заполняется коллекция идентификаторов пользовательских полей
	Если НастройкиОтчета = Неопределено Тогда
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("Отбор") Тогда
			
			Для Каждого ОписаниеОтбора Из ДополнительныеПараметры.Отбор Цикл
				
				ЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеОтбора.ЛевоеЗначение);
				ЭлементОтбора.ПравоеЗначение = ОписаниеОтбора.ПравоеЗначение;
				ЭлементОтбора.ВидСравнения = ОписаниеОтбора.ВидСравнения;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("КлючВарианта") Тогда
			РезультатКомпоновкиМакета.Вставить("КлючВарианта", ДополнительныеПараметры.КлючВарианта);
		КонецЕсли;
		
	КонецЕсли;
	
	
	ИдентификаторыМакета = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
	РезультатКомпоновкиМакета.Вставить("ИдентификаторыМакета", ИдентификаторыМакета);
	
	// Определяется макет печатной формы
	МакетПечатнойФормы = Неопределено;
	ДопСвойства.Свойство("МакетПечатнойФормы", МакетПечатнойФормы);
	
	Если МакетПечатнойФормы = Неопределено Тогда
		
		МакетПечатнойФормы = ЭтотОбъект.ПолучитьМакет("Решение");
	КонецЕсли;
	
	РезультатКомпоновкиМакета.Вставить("МакетПечатнойФормы", МакетПечатнойФормы);
	
	Если ДопСвойства.Свойство("МакетКомпоновкиДанных")
		И ДопСвойства.МакетКомпоновкиДанных <> Неопределено Тогда
		
		МакетКомпоновки = ДопСвойства.МакетКомпоновкиДанных;
		ДопСвойства.Удалить("МакетКомпоновкиДанных");
		
	Иначе
		
		МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(ОбъектОтчета.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
	КонецЕсли;
	
	Если ДопСвойства.Свойство("ФормированиеМакетаКомпоновкиДанных") Тогда
		
		ДопСвойства.Вставить("СкомпонованныйМакетКомпоновкиДанных", МакетКомпоновки);
		РезультатКомпоновкиМакета.Вставить("ДанныеОтчета", Новый Массив);
		
		ДопСвойства.Вставить("ОтчетПустой", Истина);
		ДопСвойства.Удалить("ФормированиеМакетаКомпоновкиДанных");
		
	Иначе
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ДопСвойства.Вставить("ОтчетПустой", ДанныеОтчета.Строки.Количество() = 0);
		
		РезультатКомпоновкиМакета.Вставить("ДанныеОтчета", ДанныеОтчета);
		
	КонецЕсли;
	
	РезультатКомпоновкиМакета.Вставить("ОтчетПустой", ДопСвойства.ОтчетПустой);
	
	Возврат РезультатКомпоновкиМакета;
	
КонецФункции
  
  
  
  

  
  
  
