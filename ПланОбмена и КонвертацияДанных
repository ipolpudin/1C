///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 
																ПланОбмена Общее

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Книга Технологии Интеграции

Параметр Авторегистрация находящийся в ПланОбмена -> Состав можнт меняться программно в любой момент. Обычно в коде указывается в дерективе ПередЗаписью
или ПередУдалением. Там могут производиться проверки на изменение объекта и если объект Модифицировон, то отправляется на обмен.

Узел = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(″Оптовый″);
Объект.ОбменДанными.Получатели.Автозаполнение = Истина;
Объект.ОбменДанными.Получатели.Добавить(Узел);
Объект.Записать();

//////////// ОТСЫЛКА  //////////// Элемент пришел из ПланаОбмена и записывается в Справочник. Это отключение проверок 
//Данные.ОбменДанными.Загрузка = Истина;// Отключение проверок при записи элемента в Справочник. Например(отключение "ОбработкаЗаполнения"). Отсылка Ниже
Процедура ПередЗаписью(Отказ)
   Если ОбменДанными.Загрузка = Истина Тогда
       Возврат;
   КонецЕсли
   //Какая-то проверка
КонецПроцедуры
//////////// ОТСЫЛКА //////////// 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 		Регистрация
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// [ISPolpudin@1bit.com ZOOM-19 27.08.24
Процедура ЗарегистрироватьИзмененияВПланОбменаОбменСLTC(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РазрешенаРегистрацияВПланОбменаОбменСLTC(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьИзмененияДляУзловОбмена(Источник);
	
КонецПроцедуры // ISPolpudin@1bit.com ZOOM-19 27.08.24]

// [ISPolpudin@1bit.com ZOOM-19 27.08.24
Функция РазрешенаРегистрацияВПланОбменаОбменСLTC(Объект)
	
	ТипЗнчОбъекта = ТипЗнч(Объект);
	
	Если ТипЗнчОбъекта = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда 
		
		Если НЕ Объект.Проведен
			ИЛИ НЕ Объект.бит_ГотовКОтправке Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
		
			Если НЕ ТипЗнч(Строка.ОснованиеПлатежа) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				Возврат Ложь;
			КонецЕсли;	
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции // ISPolpudin@1bit.com ZOOM-19 27.08.24] 

// [ISPolpudin@1bit.com ZOOM-19 27.08.24
Функция УзелОбменаLTC()
	
	Возврат бит_Константы.Получить("ОбменСLTCУзел");
	
КонецФункции // ISPolpudin@1bit.com ZOOM-19 27.08.24]

// [ISPolpudin@1bit.com ZOOM-19 27.08.24
Процедура ЗарегистрироватьИзмененияДляУзловОбмена(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипЗнчОбъекта = ТипЗнч(Объект);
	Если ТипЗнчОбъекта = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаLTC(), Объект.Ссылка);
	ИначеЕсли ТипЗнчОбъекта = Тип("ДокументОбъект.СчетФактураВыданныйАванс") Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(бит_ОбменСSAP.УзелОбменаSAP(), Объект.Ссылка);	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры // ISPolpudin@1bit.com ZOOM-19 27.08.24]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 	Выборка изменений и Удаление с регистрации
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

https://wiki.programstore.ru/rabota-s-planami-obmena-v-1s/
Недостоверные источники рекомендуют использовать запрос вместо ПланыОбмена.ВыбратьИзменения()

// [ISPolpudin@1bit.com ZOOM-19 27.08.24
Процедура ВыгрузитьЭлементы() Экспорт
	
	МассивВыгруженныхЭлементов 		= Новый Массив;
	МассивПоступлениеБезналичныхДС 	= Новый Массив;
	УзелОбмена = УзелОбменаLTC();
	
	Если УзелОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеБезналичныхДенежныхСредствИзменения.Узел КАК Узел,
	|	ПоступлениеБезналичныхДенежныхСредствИзменения.НомерСообщения КАК НомерСообщения,
	|	ПоступлениеБезналичныхДенежныхСредствИзменения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.Изменения КАК ПоступлениеБезналичныхДенежныхСредствИзменения
	|ГДЕ
	|	ПоступлениеБезналичныхДенежныхСредствИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", УзелОбмена);
	РезультатЗапроса 	= Запрос.Выполнить();
	Выборка 			= РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Пока Выборка.Следующий() Цикл
			МассивПоступлениеБезналичныхДС.Добавить(Выборка.Ссылка);
		КонецЦикла; 
		
	КонецЕсли;
	
	Если МассивПоступлениеБезналичныхДС.Количество() > 0 Тогда
		ОтправитьПоступлениеБезналичныхДС(МассивПоступлениеБезналичныхДС, МассивВыгруженныхЭлементов); 
	КонецЕсли;
	
	Если МассивВыгруженныхЭлементов.Количество() > 0 Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, МассивВыгруженныхЭлементов);		
	КонецЕсли;
	
КонецПроцедуры // ISPolpudin@1bit.com ZOOM-19 27.08.24]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 ПланОбмена (не универсальные)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Дочерняя
1) В базе дочерней подсключается Синхронизация и указывается префикс
2) Настроить синхронизацию данных "Имя типового решения"
3) Читаем инструкци Планаобмена(проверяем префиксы)

//Основная
1) Настраивается правила обмена(сетевой католог, потому что в нем можно сохранять переносы)
2) Настраивается Дата

//Итог 2 файла XML с правилами обмена X -> Y; Y-> X. Даже если связь односторонняя, Дочерней нужно знать как вернуть ответ Основной.

//Дочерняя
1) Настроить синхронизаци "Имя типового решения"
2) Загрузить файла XML с правилами обмена(из тех самых файлов создыных ранее)
3) Настройка Двухсторонняя или односторонняя
4) Сопоставление данных


/////////////////////////////////////////////////////////////////////////////////
Если есть доработки

1) Открыть обработку "Регистрация плана обмена" выбрать нужный план обмена
2) Добавить не типовой элемент в обмен
3) Выгрузить правила обмена для нужного ПланаОбмена они хранятся в макете
4) Добавить файл в "Конвертацию данных", а так же сделать выгрузку обеих баз для "Конвертации данных" 
5) Создать правила выгрузки
4) Сопоставить свойства
5) Загрузить правила обмена в "основную(в данном случае 8.3)"
6) Загрузить правила обмена в "дочернюю(в данном случае 8.2)" в регистр сведений Правила Обмена
7) Включить в состав "дечерней" правила обмена не типовой элемент


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 ПланОбмена (универсальные)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Дочерняя
1) В базе дочерней подсключается Синхронизация и указывается префикс

//Основная
1) Настраивается синхронизация, устанавливается префикс
2) Настраивается правила обмена выбираются универсальные колекции (сетевой католог, потому что в нем можно сохранять переносы)




//Итог 2 файла XML с правилами обмена X -> Y; Y-> X. Даже если связь односторонняя, Дочерней нужно знать как вернуть ответ Основной.




/////////////////////////////////////////////////////////////////////////////////
           //План обмена не типовой обмен, Универсальный через файл
/////////////////////////////////////////////////////////////////////////////////
//https://www.youtube.com/watch?v=eIy96-xEjyU


1) Создаем план обмена, добавляем в состав необходимые элементы
2) В 1С Предприятии поздаем наименование Узлов
3) Создаем(например кнопку) в ее команде прописываем обработку. Подбор Узла, ЗаписьДанных
4) В базе Приемнике  создается план обмена, настраивается состав
5) Создается обработка чтения 

//Пункт 3)
#Область ПолучитьУзлы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланОбмена1.Ссылка КАК Ссылка,
		|	ПланОбмена1.Код КАК Код
		|ИЗ
		|	ПланОбмена.ПланОбмена1 КАК ПланОбмена1
		|ГДЕ
		|	НЕ ПланОбмена1.ЭтотУзел";//Берем все Узлы кроме самого себя. (Самому себе отправлять не нужно)
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
#КонецОбласти
	
	ЭтотУзел = ПланыОбмена.ПланОбмена1.ЭтотУзел();//Это собственный узел

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл //Переборка всех улов обмена
	    
	    текУзел = ВыборкаДетальныеЗаписи.Ссылка;

    //{Формирование файла обмена
    //Объект.КаталогОбмена - католог в котором храниться файл XML для обмена
    //ЭтотУзел.Код         - "код" узла отправителя
    //текУзел.Код          - "код" узла получателя

		ЗаписьXML = Новый ЗаписьXML();
		ИмяФайла = СтрШаблон("%1\%2_%3.xml",Объект.КаталогОбмена,ЭтотУзел.Код,текУзел.Код);
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
    //Формирование файла обмена}
 
    //{Формирование сообщения Обмена
    //ЗаписьСообщения.НомерСообщения - Номер сообщение отправленный в сообщении обмена другому Узлу,
    //необходим для отслеживания: Отправил пакет №7 -> Принял пакет №7 

		ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML, текУзел);
		Выборка = ПланыОбмена.ВыбратьИзменения(текУзел, ЗаписьСообщения.НомерСообщения);//Выбрать все изменения для текущего узла
		
		Пока Выборка.Следующий() Цикл //Перебираем все изменения для текущего узла
			Данные = Выборка.Получить();
			ЗаписатьXML(ЗаписьXML, Данные);
		КонецЦикла;
		
		ЗаписьСообщения.ЗакончитьЗапись();
	  //Формирование сообщения Обмена}

	КонецЦикла;

Пункт 5)
#Область ПолучитьУзлы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланОбмена1.Ссылка КАК Ссылка,
	|	ПланОбмена1.Код КАК Код
	|ИЗ
	|	ПланОбмена.ПланОбмена1 КАК ПланОбмена1
	|ГДЕ
	|	НЕ ПланОбмена1.ЭтотУзел";//Все кроме собственного узла
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
#КонецОбласти 
	
	ЭтотУзел = ПланыОбмена.ПланОбмена1.ЭтотУзел();// Собственный узел
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл// Переборка узлов
		
		текУзел = ВыборкаДетальныеЗаписи.Ссылка;


		//{Открытие и чтение файла обмена
    //Объект.КаталогОбмена - католог в котором храниться файл XML для обмена
    //ЭтотУзел.Код         - "код" узла отправителя
    //текУзел.Код          - "код" узла получателя
    //ЧтениеСообщения.Отправитель    - Узел отправитеь
    //ЧтениеСообщения.НомерПринятого - Номер сообщение отправленный в сообщении обмена другому Узлу,
    //необходим для отслеживания: Отправил пакет №7 -> Принял пакет №7

		ИмяФайла = СтрШаблон("%1\%2_%3.xml",Объект.КаталогОбмена,текУзел.Код, ЭтотУзел.Код);
		
		Файл = Новый Файл(ИмяФайла);//Проверка наличия файла
		Если НЕ Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML);//Чтение шапки сообщения обмена
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);//Уведомляет базу отправителя о получении данных
		
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			Данные = ПрочитатьXML(ЧтениеXML);
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;// Отключение проверок при записи элемента в Справочник. Например(отключение "ОбработкаЗаполнения"). Отсылка Ниже
			Данные.Записать();
		КонецЦикла;
		
		ЧтениеСообщения.ЗакончитьЧтение();

		//Открытие и чтение файла обмена}
	КонецЦикла;

//////////// ОТСЫЛКА //////////// 
//Данные.ОбменДанными.Загрузка = Истина;// Отключение проверок при записи элемента в Справочник. Например(отключение "ОбработкаЗаполнения"). Отсылка Ниже
Процедура ПередЗаписью(Отказ)
   Если ОбменДанными.Загрузка = Истина Тогда
       Возврат;
   КонецЕсли
   //Какая-то проверка
КонецПроцедуры
//////////// ОТСЫЛКА //////////// 

/////////////////////////////////////////////////////////////////////////////////
           //План обмена не типовой обмен, Универсальный при расхождении количества или типов Реквизитов
/////////////////////////////////////////////////////////////////////////////////
//https://www.youtube.com/watch?v=eIy96-xEjyU

/////////////////////////////////////////////////////////////////////////////////
//Модуль отправки

#Область ПолучитьУзлы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланОбмена1.Ссылка КАК Ссылка,
		|	ПланОбмена1.Код КАК Код
		|ИЗ
		|	ПланОбмена.ПланОбмена1 КАК ПланОбмена1
		|ГДЕ
		|	НЕ ПланОбмена1.ЭтотУзел";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
#КонецОбласти
	
	ЭтотУзел = ПланыОбмена.ПланОбмена1.ЭтотУзел();
	
	СтруктураНоменклатурыПолучателя = Новый Структура("Артикул,Наименование,Вид,УИД,Тип");//Производится через структуру

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

    //Объект.КаталогОбмена - католог в котором храниться файл XML для обмена
    //ЭтотУзел.Код         - "код" узла отправителя
    //текУзел.Код          - "код" узла получателя
    //ЧтениеСообщения.Отправитель    - Узел отправитеь
    //ЧтениеСообщения.НомерПринятого - Номер сообщение отправленный в сообщении обмена другому Узлу,
    //необходим для отслеживания: Отправил пакет №7 -> Принял пакет №7


	        текУзел = ВыборкаДетальныеЗаписи.Ссылка;
	    
		ЗаписьXML = Новый ЗаписьXML();
		ИмяФайла = СтрШаблон("%1\%2_%3.xml",Объект.КаталогОбмена,ЭтотУзел.Код,текУзел.Код);
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML, текУзел);
		Выборка = ПланыОбмена.ВыбратьИзменения(текУзел, ЗаписьСообщения.НомерСообщения);
		
		Пока Выборка.Следующий() Цикл
			Данные = Выборка.Получить();
			Если ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура") Тогда
				ЗаполнитьЗначенияСвойств(СтруктураНоменклатурыПолучателя, Данные);
				СтруктураНоменклатурыПолучателя.Артикул	= Данные.Артикул2;
				СтруктураНоменклатурыПолучателя.УИД = Строка(Данные.Ссылка.УникальныйИдентификатор());
				СтруктураНоменклатурыПолучателя.Тип = "Справочник.Номенклатура";
				СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СтруктураНоменклатурыПолучателя);// используется ЗаписьXML что бы сериализоввывать структуры
			Иначе
				СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписьСообщения.ЗакончитьЗапись();
	
	КонецЦикла;

/////////////////////////////////////////////////////////////////////////////////
//Модуль получения

#Область ПолучитьУзлы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланОбмена1.Ссылка КАК Ссылка,
	|	ПланОбмена1.Код КАК Код
	|ИЗ
	|	ПланОбмена.ПланОбмена1 КАК ПланОбмена1
	|ГДЕ
	|	НЕ ПланОбмена1.ЭтотУзел";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
#КонецОбласти 
	
	ЭтотУзел = ПланыОбмена.ПланОбмена1.ЭтотУзел();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		текУзел = ВыборкаДетальныеЗаписи.Ссылка;
		
		ИмяФайла = СтрШаблон("%1\%2_%3.xml",Объект.КаталогОбмена,текУзел.Код, ЭтотУзел.Код);
		
		Файл = Новый Файл(ИмяФайла);
		Если НЕ Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
		
		Пока СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Цикл
			Данные = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			Если ТипЗнч(Данные) = Тип("Структура") И Данные.Тип = "Справочник.Номенклатура" Тогда
				Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.УИД));// По уникальному Идентификатору пыстаемся найти ссылку	
				ОбъектНоменклатуры = Ссылка.ПолучитьОбъект();//Пытаемся получить объект
				Если ОбъектНоменклатуры = Неопределено Тогда//Если объекта с тамим УИД не существует то создаем его
					ОбъектНоменклатуры = Справочники.Номенклатура.СоздатьЭлемент();				
					ОбъектНоменклатуры.УстановитьСсылкуНового(Ссылка);
				КонецЕсли; 
				ЗаполнитьЗначенияСвойств(ОбъектНоменклатуры, Данные); 
				ОбъектНоменклатуры.ОбменДанными.Загрузка = Истина;
				ОбъектНоменклатуры.Записать();
			Иначе		
				Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
				Данные.ОбменДанными.Загрузка = Истина;
				Данные.Записать();
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеСообщения.ЗакончитьЧтение();
		
	КонецЦикла;


/////////////////////////////////////////////////////////////////////////////////
           //План обмена не типовой обмен, Универсальный через HTTP сервис
/////////////////////////////////////////////////////////////////////////////////
//https://www.youtube.com/watch?v=eIy96-xEjyU



/////////////////////////////////////////////////////////////////////////////////
//HTTP Сервис
Функция ver1DownloadData(Запрос)

			Ответ = Новый HTTPСервисОтвет(200);

	текУзел = ПланыОбмена.ПланОбмена1.НайтиПоКоду(Запрос.ПараметрыURL["node"]);

	СтруктураНоменклатурыПолучателя = Новый Структура("Артикул,Наименование,Вид,УИД,Тип,Цена,ЭтоГруппа");

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();//Указывает что работаем со строкой, а не с файлом
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, текУзел);
	Выборка = ПланыОбмена.ВыбратьИзменения(текУзел, ЗаписьСообщения.НомерСообщения);

	Пока Выборка.Следующий() Цикл
		Данные = Выборка.Получить();
		Если ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураНоменклатурыПолучателя, Данные);
			СтруктураНоменклатурыПолучателя.Артикул	= Данные.Артикул2;
			СтруктураНоменклатурыПолучателя.УИД = Строка(Данные.Ссылка.УникальныйИдентификатор());
			СтруктураНоменклатурыПолучателя.Тип = "Справочник.Номенклатура";
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СтруктураНоменклатурыПолучателя);
		Иначе
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьСообщения.ЗакончитьЗапись();

	Ответ.УстановитьТелоИзСтроки(ЗаписьXML.Закрыть());
	Ответ.Заголовки.Вставить("Content-type", "application/xml");

	Возврат Ответ;




КонецФункции

Функция ver1UploadData(Запрос)

	Ответ = Новый HTTPСервисОтвет(200);
	
	ЭтотУзел = ПланыОбмена.ПланОбмена1.ЭтотУзел();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(Запрос.ПолучитьТелоКакСтроку());
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	Пока СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Цикл
		Данные = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		Если ТипЗнч(Данные) = Тип("Структура") И Данные.Тип = "Справочник.Номенклатура" Тогда
			Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.УИД));	
			ОбъектНоменклатуры = Ссылка.ПолучитьОбъект();
			Если ОбъектНоменклатуры = Неопределено Тогда
				ОбъектНоменклатуры = Справочники.Номенклатура.СоздатьЭлемент();				
				ОбъектНоменклатуры.УстановитьСсылкуНового(Ссылка);
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(ОбъектНоменклатуры, Данные); 
			ОбъектНоменклатуры.ОбменДанными.Загрузка = Истина;
			ОбъектНоменклатуры.Записать();
		Иначе		
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			Данные.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	
	
	Возврат Ответ;
	

КонецФункции

/////////////////////////////////////////////////////////////////////////////////
//Модуль Отправления


#Область ПолучитьУзлы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланОбмена1.Ссылка КАК Ссылка,
		|	ПланОбмена1.Код КАК Код
		|ИЗ
		|	ПланОбмена.ПланОбмена1 КАК ПланОбмена1
		|ГДЕ
		|	НЕ ПланОбмена1.ЭтотУзел";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
#КонецОбласти
	
	ЭтотУзел = ПланыОбмена.ПланОбмена1.ЭтотУзел();
	
	СтруктураНоменклатурыПолучателя = Новый Структура("Артикул,Наименование,Вид,УИД,Тип");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	    
	    текУзел = ВыборкаДетальныеЗаписи.Ссылка;
	    
		ЗаписьXML = Новый ЗаписьXML();
		ИмяФайла = СтрШаблон("%1\%2_%3.xml",Объект.КаталогОбмена,ЭтотУзел.Код,текУзел.Код);
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML, текУзел);
		Выборка = ПланыОбмена.ВыбратьИзменения(текУзел, ЗаписьСообщения.НомерСообщения);
		
		Пока Выборка.Следующий() Цикл
			Данные = Выборка.Получить();
			Если ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура") Тогда
				ЗаполнитьЗначенияСвойств(СтруктураНоменклатурыПолучателя, Данные);
				СтруктураНоменклатурыПолучателя.Артикул	= Данные.Артикул2;
				СтруктураНоменклатурыПолучателя.УИД = Строка(Данные.Ссылка.УникальныйИдентификатор());
				СтруктураНоменклатурыПолучателя.Тип = "Справочник.Номенклатура";
				СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СтруктураНоменклатурыПолучателя);
			Иначе
				СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписьСообщения.ЗакончитьЗапись();
	
	КонецЦикла;


/////////////////////////////////////////////////////////////////////////////////
//Модуль получения


#Область ПолучитьУзлы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланОбмена1.Ссылка КАК Ссылка,
	|	ПланОбмена1.Код КАК Код
	|ИЗ
	|	ПланОбмена.ПланОбмена1 КАК ПланОбмена1
	|ГДЕ
	|	НЕ ПланОбмена1.ЭтотУзел";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
#КонецОбласти 
	
	ЭтотУзел = ПланыОбмена.ПланОбмена1.ЭтотУзел();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		текУзел = ВыборкаДетальныеЗаписи.Ссылка;
		
		ИмяФайла = СтрШаблон("%1\%2_%3.xml",Объект.КаталогОбмена,текУзел.Код, ЭтотУзел.Код);
		
		Файл = Новый Файл(ИмяФайла);
		Если НЕ Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
		
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			Данные = ПрочитатьXML(ЧтениеXML);
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			Данные.Записать();
		КонецЦикла;
		
		ЧтениеСообщения.ЗакончитьЧтение();
		
	КонецЦикла;




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 EnterpriseData
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// СтекВыгрузки - массив вложенности выгрузки. Например: выгружаем документ "Платежное поручение", в нем есть Физ лицо, у Физ лица есть Пользователь, в ПКО Пользователь.
// В ПКО Пользователь у параметра СтекВыгрузки будет: Платежное поручение, Физическое лицо и т.д

//https://www.youtube.com/watch?v=FJ_DcVLN1vg

//В ОбщийМодуль.МенеджерОбменаЧерезУниверсальныйФормат содержится сконвертированный код из КД3
//Программы автоматически подбирают версию ED

//Внутри ОбщийМодуль.МенеджерОбменаЧерезУниверсальныйФормат есть 
1) ПКО
2) У ПКО есть типы фукций (Отправка, Получение)


Обработчики загрузки:
1) ПриКонвертацииДанныхXDTO - дополнение данными AdditionalInfo проходит здесь 
2) ПередЗаписьюПолученныхДанных - Ссылка есть(УСЛОВНО), типовые механизмы уже пытаются записывать регистры с этой ссылкой
3) ПослеЗагрузкиВсехДанных - создан объект, есть полноценная ссылка. Добавочные данные через AdditionalInfo находятся в Объект.ДополнительныеСвойства 

Обработчики выгрузки:
1) ПриОтправкеДанных - отправка данных

Доработка:
1) Через расширение пакета ED
2) AdditionalInfo - допольнытельные данные прилепляемые к объекту методанных

Вопросы ДобавитьПКС() зачем нужен при отправке данных. При AdditionalInfo ДобавитьПКС() нужен только в ПриКонфертацииXDTO



///////////////////////////////////////////////////////////
                  Кнопка Синхрованизация
///////////////////////////////////////////////////////////

Выполнение в коде деляться на несколько видов синхронизации:
1) ОбменДаннымиСервер.ВыполнитьОбменДаннымиЧерезФайловыйРесурс - Через файл
2) через COM 
3) через регламентное задание


ОбменДаннымиXDTOСервер.ЗаполнитьТаблицуИзменений - функция возвращает ТЗ элементов зарегестрированных для обмена

///////////////////////////////////////////////////////////
                  Справка Пользования
///////////////////////////////////////////////////////////

ИмяТЧКонфигурации - если ТЧ есть к конфигураторе. Например документ имеет ТЧ "Платежи"
ИмяТЧФормата - Имя формата в XDTO пакете
ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата, ПространствоИмен = "")

Узнать используемую версию EDT можно в Приемнике ОбменДаннымиXDTOСервер.ПрочитатьСообщениеОбмена. Там будет файл XML и тип пакета XDTO для него

ОбменДаннымиXDTOСервер.КонвертироватьТаблицуОбъекта (или Конвертировать...) при получении конвертирует в ОбъектXDTO. 
По типовому пакету XDTO или расширенному

ОбменДаннымиXDTOСервер.ВыполнитьВыгрузкуЗарегистрированныхДанных В КомпонентыОбмена.XMLСхема есть инф о используемом EDT пакете

///////////////////////////////////////////////////////////
                            ПРО
///////////////////////////////////////////////////////////
Правило регистрации объектов
Например: Если реквизит объекта(ФизЛицо) обязательно необходимо передавать при отправке основного объекта(ВедомостьНаСчета)

///////////////////////////////////////////////////////////
ПРО определяется в ПКО "ОбъектДанных" + Ссылка на элмент. Если не указывать "ОбъектДанных", то ПРО не подтянется 
и механизм дополнения обмена отработает по штатному сценарию. 

Ссылка на элемент:
ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);
+
ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ);

Решение: Объект не отображается как выгружено и не отправляется его полный пакет(Ссылка .cfe https://disk.yandex.ru/d/8bm9Ivculr2kpg)
ВТР_КонтрагентУИДСтрока = РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.ПубличныйИдентификаторПоСсылкеОбъекта(
											КомпонентыОбмена.УзелКорреспондента, ДанныеИБ);
	ВТР_КонтрагентУИД = Новый УникальныйИдентификатор(ВТР_КонтрагентУИДСтрока);										
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ВТР_КонтрагентУИД);//Не Ссылка а УИД
///////////////////////////////////////////////////////////

Режимы прописываются в реквизитах плана обмена СинхронизацияДанныхЧерезУниверсальныйФормат
Например: РежимВыгрузкиСправочников = ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена

Есть макет плана обмена ПравилаРегистрации


///////////////////////////////////////////////////////////
                            ПКО
///////////////////////////////////////////////////////////

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатежноеПоручение";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";//Имя формата в пакете XDTO
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных";//ПриОтправкеДанных
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");//Конвертация выполниться после обработчиков
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");//Конвертация происходит до обработчиков(например до "ПриОтправкеДанных"), Дата - реквизит документа, КрайнийСрокПлатежа - элемент XDTO

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");//Для ТЧ действуют такие же выше описанные правила
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);

/////////////////////////
ПередЗаписьюПолученныхДанных
/////////////////////////
ПолученныеДанные - данные сконвертированные из полученных данных
ЭлементОбмена - Это или ПолученныеДанные - если в БД не нашолдя объект по определенному набору признаок, или ДанныеИБ если объект нашелся
ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
ЭлементОбмена 		= ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);

///////////////////////////////////////////////////////////
                            ПОД
///////////////////////////////////////////////////////////

Объявляются ПКО
Есть возможность добавить событие При Обработке Данных и указать какие ПКО отключить или подключить.
В "При Обработке Данных" заходит только когда запцщена сама отправка объекта для которого написан ПОД, ПКО и т.д
Например: На регистрации стоит ФИЗ Лицо и оно отправляется -> Зайдет в "При Обработке Данных"
 	  На регистрации стоит Документ и так же отправляется реквизит документа "ФИЗ Лицо"  -> Не зайдет в "При Обработке Данных"
///////////////////////////////////////////////////////////
                       ШагиВыполения
///////////////////////////////////////////////////////////

1) Проверяется и инициализируется ПОД, ПКО без данных
2) Выполняется ПОД объявляются ПКО
3) Конвертируется объект по правилам ПКО(те у кого не стоит отложенной конвертации(ДобавитьПКС(, , , ОТЛОЖЕННАЯ КОНВЕРТАЦИЯ,))
4) Выполняется событие ПОД При Обработке Данных
5) Выполняется событие ПКО при Конвертации XDTO
.....

///////////////////////////////////////////////////////////
                       Элементы передачи
///////////////////////////////////////////////////////////

Ключевые свойства передаются если элемент дочерний(передается Элемент Сотрудник. Есть реквизит должность, он дочерний, поэтому передадутся только ключевые свойста. А не весь реквизитный состав должности)



                                                                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                         AdditionalInfo (EnterpriseData)
                                                                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////
                       Справочная
///////////////////////////////////////////////////////////

В AdditionalInfo можно передавать Массив, Структуру и простые типы. Конвертировать или запускать конвертацию нельзя
AdditionalInfo отсутствует в КлючевыеЗначения(Может где-то и есть)

///////////////////////////////////////////////////////////
                       Примеры
///////////////////////////////////////////////////////////



{Пример 1
//В ЗУП(Отправитель) ПлатежноеПоручение есть реквизит ВТР_ДатаРасхода
//ВТР_ДатаРасхода нужно заполнить реквизиты документа ЗаявкаНаРасходДСВыплатаЗарплаты "КрайняяДата", "ЖелательнаяДатаПлатежа", "ДатаВедомостиНаВыплатуЗарплаты"



//{Отправка

//Если бы не было ПриОтправкеДанных нужно было описывать ее.
&После("ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных")
Процедура Расш1_ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		
		ДопДанные = ДанныеXDTO.AdditionalInfo;	
		
	Иначе
		
		ДопДанные = Новый Структура;	
		
	КонецЕсли;
	
	
	//{Достает РасчетныйСчет отправителя
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеВедомости.Ведомость ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВБанк
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеПоручениеВедомости.Ведомость КАК Документ.ВедомостьНаВыплатуЗарплатыВБанк).ЗарплатныйПроект
	|		КОГДА ПлатежноеПоручениеВедомости.Ведомость ССЫЛКА Документ.ВедомостьПрочихДоходовВБанк
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеПоручениеВедомости.Ведомость КАК Документ.ВедомостьПрочихДоходовВБанк).ЗарплатныйПроект
	|	КОНЕЦ КАК ЗарплатныйПроект
	|ПОМЕСТИТЬ ВтЗарплатныйПроект
	|ИЗ
	|	Документ.ПлатежноеПоручение.Ведомости КАК ПлатежноеПоручениеВедомости
	|ГДЕ
	|	ПлатежноеПоручениеВедомости.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатныеПроекты.ВТР_РасчетныйСчет КАК ВТР_РасчетныйСчет
	|ИЗ
	|	ВтЗарплатныйПроект КАК ВтЗарплатныйПроект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО (ВтЗарплатныйПроект.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий()  Тогда

		ДопДанные.Вставить("ВТР_РасчетныйСчетОтправителя", Выборка.ВТР_РасчетныйСчет);
	
	КонецЕсли;
	//}Достает РасчетныйСчет отправителя
	
	ДопДанные.Вставить("ВТР_ДатаРасхода", ДанныеИБ.ВТР_ДатаРасхода);
	ДопДанные.Вставить("ВТР_НазначениеПлатежа", ДанныеИБ.ВТР_НазначениеПлатежа);
	ДопДанные.Вставить("КодВидДоходаИсполнительногоПроизводства", ВидыДоходовИсполнительногоПроизводстваКлиентСервер.КодВидаДохода(ДанныеИБ.ВидДоходаИсполнительногоПроизводства));
	

	
	ДанныеXDTO.Вставить("AdditionalInfo",ДопДанные); 
	
КонецПроцедуры
//}Отправка


//{Получение

//Если бы не было ПриОтправкеДанных нужно было описывать ее.
&После("ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO")
Процедура Расш1_ПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		
		
		ДопДанные = ДанныеXDTO.AdditionalInfo;	
		
		
		Если ДопДанные.Свойство("ВТР_ДатаРасхода") Тогда
			
			ПолученныеДанные.ДополнительныеСвойства.Вставить("КрайняяДата",ДопДанные.ВТР_ДатаРасхода);
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ЖелательнаяДатаПлатежа",ДопДанные.ВТР_ДатаРасхода);
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты",ДопДанные.ВТР_ДатаРасхода);
			
		КонецЕсли;
		
		
		Если ДопДанные.Свойство("ВТР_НазначениеПлатежа") Тогда
			
			ПолученныеДанные.ДополнительныеСвойства.Вставить("НазначениеПлатежа",ДопДанные.ВТР_НазначениеПлатежа);
			
		КонецЕсли;
		
		
		Если ДопДанные.Свойство("КодВидДоходаИсполнительногоПроизводства") Тогда
			
			ПолученныеДанные.ДополнительныеСвойства.Вставить("КодВидаДохода",ДопДанные.КодВидДоходаИсполнительногоПроизводства);
			
		КонецЕсли;
		
		Если ДопДанные.Свойство("ВТР_РасчетныйСчетОтправителя") Тогда
			
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВТР_РасчетныйСчетОтправителя",ДопДанные.ВТР_РасчетныйСчетОтправителя);
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

&После("ДобавитьПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение")
Процедура Расш1_ДобавитьПКО_Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение(ПравилаКонвертации)
	// Вставить содержимое метода. 
	ПКО = ПравилаКонвертации.Найти("Документ_ЗаявкаНаРасходДСВыплатаЗарплаты_Получение", "ИмяПКО");
	ПКО.ПослеЗагрузкиВсехДанных           = "ОтложеннаяОбработка_ДокументыЗаявкаНаРасходДСВыплатаЗарплаты";
	
	ДобавитьПКС(ПКО.Свойства, "КрайняяДата", "ВТР_ДатаРасхода",1); 
	ДобавитьПКС(ПКО.Свойства, "ЖелательнаяДатаПлатежа", "ВТР_ДатаРасхода",1);
	ДобавитьПКС(ПКО.Свойства, "ДатаВедомостиНаВыплатуЗарплаты", "ВТР_ДатаРасхода",1);
	ДобавитьПКС(ПКО.Свойства, "НазначениеПлатежа", "ВТР_НазначениеПлатежа",1);
	ДобавитьПКС(ПКО.Свойства, "КодВидаДохода", "КодВидДоходаИсполнительногоПроизводства",1);
	
	ДобавитьПКС(ПКО.Свойства, "", "ВТР_РасчетныйСчетОтправителя",1);
	
	
	//Дата ведомости учавствует в полях поиска, возможно стоит заметь поле поиска на "Дата"	
	НайденноеПолеПоиска = ПКО.ПоляПоиска.Найти("ДатаВедомостиНаВыплатуЗарплаты,НомерВедомостиНаВыплатуЗарплаты,Организация,ХозяйственнаяОперация,ХозяйственнаяОперацияПоЗарплате");
	ПКО.ПоляПоиска.Удалить(НайденноеПолеПоиска); 
	ПКО.ПоляПоиска.Добавить("Дата,НомерВедомостиНаВыплатуЗарплаты,Организация,ХозяйственнаяОперация,ХозяйственнаяОперацияПоЗарплате");
    //Дата ведомости учавствует в полях поиска, возможно стоит заметь поле поиска на "Дата"
	
КонецПроцедуры


Функция ОтложеннаяОбработка_ДокументыЗаявкаНаРасходДСВыплатаЗарплаты(Объект,КомпонентыОбмена)
	
	
	Если Объект.ДополнительныеСвойства.Свойство("ВТР_РасчетныйСчетОтправителя") Тогда
		
		НайденнаяЗаявка = ПлатежныеПозиции.ПлатежнаяПозицияЗаявки(Объект.Ссылка);
		
		Если НайденнаяЗаявка.Количество() = 0 Тогда
			
			ПП = ПлатежныеПозиции.НоваяПлатежнаяПозицияПоДаннымДокумента(Объект);
			
			Запрос = Новый Запрос;
			
			//Установка значений параметров
			Запрос.УстановитьПараметр("НомерСчета", Объект.ДополнительныеСвойства.ВТР_РасчетныйСчетОтправителя);
			
			Запрос.Текст = "ВЫБРАТЬ
			|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
			|ГДЕ
			|	БанковскиеСчетаОрганизаций.НомерСчета = &НомерСчета";
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ПП[0].БанковскийСчетКасса = Выборка.Ссылка;
				ДопПараметры = Новый Структура("ПлатежнаяПозицияЗаполнена,НеОбновлятьДенежныеСредстваКВыплате", Истина);
				ПлатежныеПозиции.ЗаписатьПлатежнуюПозициюЗаявки(Объект.Ссылка, ПП, ДопПараметры);
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецФункции // ОтложеннаяОбработка_ДокументыЗаявкаНаРасходДСВыплатаЗарплаты()


&После("ВыполнитьПроцедуруМодуляМенеджера")
Процедура Расш1_ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры)
	
	Если ИмяПроцедуры = "ОтложеннаяОбработка_ДокументыЗаявкаНаРасходДСВыплатаЗарплаты" Тогда 
		ОтложеннаяОбработка_ДокументыЗаявкаНаРасходДСВыплатаЗарплаты(
		Параметры.Объект, Параметры.КомпонентыОбмена);
	КонецЕсли;
	
КонецПроцедуры

//}Получение




Пример 1}



                                                                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                         ПакетXDTO (EnterpriseData)
                                                                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////

Пример расширения XDTO https://disk.yandex.ru/d/CQhPqYLUQ8Gw6A


///////////////////////////////////////////////////////////
                  СхемаРаботы
///////////////////////////////////////////////////////////

(Правильно описано как сделать пакет XDTO) https://its.1c.ru/db/metod8dev/content/6013/hdoc
(Не правильная работа с XDTO и доработка в ОбменДаннымиXDTOСервер.КонвертироватьТаблицуОбъекта - Если делать как описано выше в ссылке, то это не понадобиться) https://www.youtube.com/watch?v=FJ_DcVLN1vg

1) Добавляется новый пакет в расширение Например: ВТР_РасширениеПакетаEnterpriseData
2) Выясняется какой пакет XDTO используется при конвертации (Узнать используемую версию EDT можно в Приемнике ОбменДаннымиXDTOСервер.ПрочитатьСообщениеОбмена. Там будет файл XML и тип пакета XDTO для него) 
ИЛИ Регистр Сведений Настройки Обмена Данными XDTO
3) Берется используемый пакет XDTO и переносятся нужные объекты https://its.1c.ru/db/metod8dev/content/6013/hdoc
4) Дорабатывается МенеджерОбменаЧерезУниверсальныйФормат, ОбменДаннымиПереопределяемый.ПриПолученииДоступныхРасширенийФормата и возможно СинхронизацияДанныхЧерезУниверсальныйФормат
5) Все тоже самое должно быть в Приемнике и в Источнике. 1С рекомендует объединять расширения, но можно и руками
!!! Добавляй ключевые свойства. Какаие и как неопределено

///////////////////////////////////////////////////////////
                  Приметы
///////////////////////////////////////////////////////////

1) Чувствиетелен к типам. Не заполнялась ТЧ пока не изменил тип у свойства Сумма с "FLOAT" на "ТипСумма"


///////////////////////////////////////////////////////////
                  Примеры
///////////////////////////////////////////////////////////

//Переопределение на другой ПКО. Изначально ПКО реквизита в ПКО основного Объекта был "Справочник_ФизическиеЛица"
Строка.Сотрудник = Новый Структура("Значение, ИмяПКО", Строка.ВТР_КонтрагентДляВыплаты, "ВТР_Справочник_КонтрагентыКакФизическиеЛица");

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 Конвертация Данных
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Последовательность Работы:
1)Выгрузаем структуру данных из Источника и Приемника
2)Загружаем в Конефертацию данных
3) Создаем ПКО
4) Созадем ПКС или ПКЗ
5) Обработчики
6) Сохраняем правила и загружаем в Приемник

//Справочная Информация:


1) Есть Параметры(как для запроса)
2) Есть Параметр(в ПКС из Источника или Приемника в Параметр как буфер)
3) Есть возможность писать запросы в обработчике и в ПКО
4) Есть Алгоритмы/Запросы(как БСП)
5) Документы необходимо проводить
6) Из Справочника в Перечисления https://www.youtube.com/watch?v=Lpztx-xOIg0&list=PLh28ogpgRJUOD77FxycNycUl6gUHoPtVn&index=35
7) Отладка https://www.youtube.com/watch?v=8uhKPaTEk90

Произвольный запрос:
1) Создается ПКО (без источника, но с приемником) 
2) В ПВД указывается что выгрузка даннных будет производиться произвольным алгоритмом и указывается ПКО и созается запрос
