////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          ПроверкаПередВЫгрузкойВБитАдаптре - Универсально для объектов
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Проверка структуру ->


#Область ПроверкаПередЗаписью

// Функция - Разрешена запись полученного объекта ВБД
// Если требуется проверка на корректность заполненности данными только определенной части свойств, необходимо создавать отдельную структуру только с этими определенными свойстави и передавать ее в параметры 
// Проверка заполнененности обязательных свойств. Например Дата
// Проверка заполнененности обязательных вариативных свойств. Например Документ должен обязательно иметь или ТЧ ЛицевыеСчета, или РасшифровкаПлатежа
//
// Параметры:
//  СтруктураСконвертированныхДанных - Структура	 	- Если Структура то обязательно должно быть КраткоеНаименованиеТипаОбъекта
//  СтрокаОшибокПолученная			 - Строка  			- 
// 
// Возвращаемое значение:
//  Разрешена - Истина или Ложь
//
Функция РазрешенаЗаписьПолученногоОбъектаВБД(СтруктураСконвертированныхДанных, СтрокаОшибокПолученная = "") Экспорт
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	СтрокаОшибок = "";
	
	// {Проверка заполнененности обязательных свойств
	МассивОбязательныхСвойств = ОбязательныеДляЗаписиСвойстваПолученныхОбъектов(СтруктураСконвертированныхДанных.ТипОбъекта);
	Для каждого ОбязательноеСвойство Из МассивОбязательныхСвойств Цикл
		
		Если ТипЗнч(ОбязательноеСвойство) = Тип("Массив") Тогда
			
			// {Проверка заполнененности обязательных вариативных свойств. Например Документ должен обязательно иметь или ТЧ ЛицевыеСчета, или РасшифровкаПлатежа
			ЕстьХотяБыОдноСвойство = Ложь;
			
			Для каждого Свойство Из ОбязательноеСвойство Цикл
				
				ОбязательноеСвойствоПрисутствует = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураСконвертированныхДанных, Свойство);
				Если ОбязательноеСвойствоПрисутствует = Истина Тогда 
					ЕстьХотяБыОдноСвойство = Истина;
				КонецЕсли;
				
			КонецЦикла;	
			
			Если НЕ ЕстьХотяБыОдноСвойство Тогда
				СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Должно присутствовать хотя бы одно свойство из: " + СтрСоединить(ОбязательноеСвойство, ", ");
			КонецЕсли;
			// }Проверка заполнененности обязательных вариативных свойств
			
		Иначе
			
			ОбязательноеСвойствоПрисутствует = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураСконвертированныхДанных, ОбязательноеСвойство);
			Если ОбязательноеСвойствоПрисутствует = Ложь Тогда
				
				//Свойство отсутствует
				СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Свойство " + ОбязательноеСвойство + " отсутствует";
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	// }Проверка заполнененности обязательных свойств
	
	// {Проверка корректности переданных данных в не обязательные свойства. Например: нормальная ссылка, а не битая
	ДанныеКоллекцииКорректны(СтруктураСконвертированныхДанных, СтрокаОшибок);
	// }Проверка корректности переданных данных в не обязательные свойства
	
	Если НЕ СтрокаОшибок = ""
		ИЛИ НЕ СтрокаОшибокПолученная = "" Тогда
		
		Если СтрокаОшибокПолученная = "" Тогда
			
			ДлинаСтроки = СтрДлина(СтрокаОшибок) - 1;
			СтрокаОшибок = Прав(СтрокаОшибок, ДлинаСтроки);// Удаление первого символа, это всегда - Символы.ПС			
			СтрокаОшибокПолученная = СтрокаОшибокПолученная + СтрокаОшибок;
			
		Иначе                                     
			// Если была передана не пустая строка значит оставляем Символы.ПС
			СтрокаОшибокПолученная = СтрокаОшибокПолученная + СтрокаОшибок;
		КонецЕсли;
		
		Возврат Ложь; 
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	// Нетиповое} ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	
КонецФункции 

// Функция - Данные коллекции корректны
// Проверка на: Передана пустая или битая ссылка; Значение пусто 
//
// Параметры:
//  Коллекция	 - Структура, Массив, ТаблицаЗначений только внутри Массива или Структуры 	 - Коллекция с данными
//  СтрокаОшибок - 	Строка -
//  УчитыватьЧислоНольКакЗаполненноеЗнач - 	Булево - Если Истина, то значение 0 в свойстве не будет ошибкой. Например Количество = 0 не ошибка
// 
// Возвращаемое значение:
// ДанныеКоллекцииКорректны  - Истина или Ложь
//
Функция ДанныеКоллекцииКорректны(Коллекция, СтрокаОшибок = "", УчитыватьЧислоНольКакЗаполненноеЗнач = Истина) Экспорт
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	ЭтоСтруктура = ТипЗнч(Коллекция) = Тип("Структура");
	
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		
		Если ЭтоСтруктура Тогда
			ЗначениеЭлементаКоллекции 	= ЭлементКоллекции.Значение;
			КлючЭлементаКоллекции 		= ЭлементКоллекции.Ключ;
		Иначе
			ЗначениеЭлементаКоллекции 	= ЭлементКоллекции;
			КлючЭлементаКоллекции 		= ЭлементКоллекции;	
		КонецЕсли;
		
		Если (ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеЭлементаКоллекции)
			И НЕ ОбщегоНазначения.СсылкаСуществует(ЗначениеЭлементаКоллекции))
			ИЛИ ТипЗнч(ЗначениеЭлементаКоллекции) = Тип("УникальныйИдентификатор") Тогда
			
			// Передана пустая или битая ссылка 
			СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Передана пустая или битая ссылка в свойство " + КлючЭлементаКоллекции;
			
		ИначеЕсли (НЕ ЗначениеЭлементаКоллекции = 0 И НЕ ЗначениеЗаполнено(ЗначениеЭлементаКоллекции))
			ИЛИ (УчитыватьЧислоНольКакЗаполненноеЗнач = Ложь И ЗначениеЭлементаКоллекции = 0) Тогда
			
			// Значение пусто
			СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Значение свойства " + КлючЭлементаКоллекции + " пусто";
			
		ИначеЕсли ТипЗнч(ЗначениеЭлементаКоллекции) = Тип("ТаблицаЗначений") Тогда
			
			МассивСтруктур = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЗначениеЭлементаКоллекции);	
			
			Для каждого Структура Из МассивСтруктур Цикл
				ДанныеКоллекцииКорректны(Структура, СтрокаОшибок);			
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЗначениеЭлементаКоллекции) = Тип("Массив") Тогда
			
			ДанныеКоллекцииКорректны(ЗначениеЭлементаКоллекции, СтрокаОшибок);
			
		ИначеЕсли ТипЗнч(ЗначениеЭлементаКоллекции) = Тип("Структура") Тогда
			
			ДанныеКоллекцииКорректны(ЗначениеЭлементаКоллекции, СтрокаОшибок);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если НЕ СтрокаОшибок = "" Тогда
		Возврат Ложь;		
	Иначе
		Возврат Истина;
	КонецЕсли;
    // Нетиповое} ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	
КонецФункции
 
// Функция - Обязательные для записи свойства полученных объектов
// Массив обязательных свойств. Например Дата
//
// Параметры:
//  ТипОбъекта	 - 	 - 
// 
// Возвращаемое значение:
// МассивОбязательныхСвойств - Массив
//
Функция ОбязательныеДляЗаписиСвойстваПолученныхОбъектов(ТипОбъекта)
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	МассивОбязательныхСвойств = Новый Массив;
	
	Если ТипОбъекта = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		МассивОбязательныхСвойств = МассивОбязательныхСвойствЗаявкиНаРасходованиеДенежныхСредств();	
	КонецЕсли;
	
	Возврат МассивОбязательныхСвойств;
    // Нетиповое} ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	
КонецФункции 

#Область МассивОбязательныхСвойствОбъектов

// Функция - Массив обязательных свойств заявки на расходование денежных средств
// МассивОбязательныхСвойств для документа ЗаявкаНаРасходованиеДенежныхСредств 
//
// Возвращаемое значение:
//  МассивОбязательныхСвойств - Массив
//
Функция МассивОбязательныхСвойствЗаявкиНаРасходованиеДенежныхСредств()
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	МассивОбязательныхСвойств = Новый Массив;
	
	МассивОбязательныхСвойств.Добавить("Дата");
	МассивОбязательныхСвойств.Добавить("Организация");
	МассивОбязательныхСвойств.Добавить("СуммаДокумента");
	МассивОбязательныхСвойств.Добавить("Валюта");
	МассивОбязательныхСвойств.Добавить("ХозяйственнаяОперация");
	
	// Должно быть заполнено ЛицевыеСчетаСотрудников или РасшифровкаПлатежа или ВТР_ВентраГПХ
	Массив1 = Новый Массив;
	Массив1.Добавить("ЛицевыеСчетаСотрудников");
	Массив1.Добавить("РасшифровкаПлатежа");
	Массив1.Добавить("ВТР_ВентраГПХ");
	
	МассивОбязательныхСвойств.Добавить(Массив1);

	Возврат МассивОбязательныхСвойств;	
    // Нетиповое} ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	
КонецФункции

#КонецОбласти

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          ПроверкаПередЗаписьюОбъекта - шпаргалка  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Функция - Разрешена выгрузка документов в бит адаптер
// Проверка документов на требования бизнес логики
// 
// МассивСсылокДокументов может состоять из: 
// 1) ВТР_ЗаявкаНаОплатуПоИсполнительномуЛисту
// 2) ПлатежноеПоручение + ВедомостьНаВыплатуЗарплатыПеречислением
//
// Параметры:
//  МассивСсылокДокументов	 - Массив	 - ПлатежноеПоручение + ВедомостьНаВыплатуЗарплатыПеречислением или ВТР_ЗаявкаНаОплатуПоИсполнительномуЛисту 
//  СтрокаОшибокПолученная	 - Строка	 - Заполняется ошибками. Если передана не пустая строка произойдет сращивание, разделитель Символы.ПС
// 
// Возвращаемое значение:
// Разрешена - Исина/Ложь 
//
Функция РазрешенаВыгрузкаПлатежныхДокументовВБитАдаптер(МассивСсылокДокументов, СтрокаОшибокПолученная = "") Экспорт
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 01.04.2024 VTRD-824
	СтрокаОшибок							= "";
	
	// {Удаление из МассивСсылокДокументов документов не участвующих в обмене "Ведомость в банк"	
	Для каждого Ссылка Из МассивСсылокДокументов Цикл
	
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивСсылокДокументов, Ссылка);
		КонецЕсли;
	
	КонецЦикла;
	
	Если МассивСсылокДокументов.Количество() = 0 Тогда
		СтрокаОшибокПолученная =  СтрокаОшибокПолученная + "Выберите документы подходящего типа";
		Возврат	Ложь;
	КонецЕсли;
	// }Удаление из МассивСсылокДокументов документов не участвующих в обмене "Ведомость в банк"
	
	МассивыОшибок = МассивыОшибокПлатежныхДокументовПередВыгрузкойВБитАдаптер(МассивСсылокДокументов);
	НепроведенныеДокументы 					= МассивыОшибок.НепроведенныеДокументы;
	ЗапрещенныеКВыгрузкеТипыДокументов 		= МассивыОшибок.ЗапрещенныеКВыгрузкеТипыДокументов;
	ДокументыРанееВыгруженные 				= МассивыОшибок.ДокументыРанееВыгруженные; 
	ДокументыРанееВыгруженныеБитАдаптер 	= МассивыОшибок.ДокументыРанееВыгруженныеБитАдаптер;
	ДокументыРасхождениеДатаРасходаИДаты 	= МассивыОшибок.ДокументыРасхождениеДатаРасходаИДаты;
	НепроведенныеВедомости 					= ВТР_ПлатежныеПоручения.НепроведенныеВедомостиПлатежногоПорученияПредставление(МассивСсылокДокументов);// Ведомости из ТЧ ПлатежногоПоручения
	ДатаРасходаИДатаВедомостиНеИдентичны	= ВТР_ПлатежныеПоручения.МассивПлатежныхПоручнийСРазличнойДатойРасходаИДатойВедомости(МассивСсылокДокументов);
	ДокументыОшибкаКоличестваСтрокТЧРаспределение  = МассивыОшибок.ДокументыОшибкаКоличестваСтрокТЧРаспределение; 
	
	// {Формирование текстов ошибок
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Необходимо провести документ: " + СтрСоединить(НепроведенныеДокументы, ", ");		
	КонецЕсли;
	
	Если ДокументыОшибкаКоличестваСтрокТЧРаспределение.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка. Количество строк в табличной части Распределение не равно 1: " + СтрСоединить(ДокументыОшибкаКоличестваСтрокТЧРаспределение, ", ");
	КонецЕсли;
	
	Если ЗапрещенныеКВыгрузкеТипыДокументов.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка. Есть запрещенные к выгрузке типы документов: " + СтрСоединить(ЗапрещенныеКВыгрузкеТипыДокументов, ", ");
	КонецЕсли;
	
	Если ДатаРасходаИДатаВедомостиНеИдентичны.Количество() > 0 Тогда
		
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Нельзя выгрузить документ по причине: 
	 	|Дата расхода в Платежном поручении отличается от Даты Ведомости в банк. 
	 	|Дата расхода должна совпадать с датой Ведомости в банк. 
		|Список документов: " + СтрСоединить(ДатаРасходаИДатаВедомостиНеИдентичны, ", ");
		
	КонецЕсли; 
	
	Если НепроведенныеВедомости.Количество() > 0 Тогда
	
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Нельзя выгрузить документ по причине: 
		|В Платежное поручение включена не проведенная Ведомость в банк.
		|Проверьте следующие Ведомости в банк: " + 
		СтрСоединить(НепроведенныеВедомости, ", ");
	
	КонецЕсли;
	
	Если ДокументыРанееВыгруженные.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка.Есть ранее выгруженные документы: " + СтрСоединить(ДокументыРанееВыгруженные, ", ");
	КонецЕсли;
	
	Если ДокументыРанееВыгруженныеБитАдаптер.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка.Есть ранее выгруженные в БитАдаптер документы: " + СтрСоединить(ДокументыРанееВыгруженныеБитАдаптер, ", ");
	КонецЕсли;
	
	Если ДокументыРасхождениеДатаРасходаИДаты.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок  + Символы.ПС + "Нельзя выгрузить документ по причине: 
			|Дата расхода отличается от Даты документа.
			|Дата расхода должна совпадать с датой документа. " + СтрСоединить(ДокументыРасхождениеДатаРасходаИДаты, ", ");
	КонецЕсли;
	// } Формирование текстов ошибок
	
	Если НЕ СтрокаОшибок = "" Тогда
		
        Если СтрокаОшибокПолученная = "" Тогда

			ДлинаСтроки = СтрДлина(СтрокаОшибок) - 1;
			СтрокаОшибок = Прав(СтрокаОшибок, ДлинаСтроки);// Удаление первого символа, это всегда - Символы.ПС			
			СтрокаОшибокПолученная = СтрокаОшибокПолученная + СтрокаОшибок;
			
		Иначе                                     
			// Если была передана не пустая строка значит оставляем Символы.ПС
			СтрокаОшибокПолученная = СтрокаОшибок;
		КонецЕсли;

		Возврат Ложь; 
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	// Нетиповое} ПервыйБИТ Полпудин И.С. 01.04.2024 VTRD-824

КонецФункции 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          		Ошибки  Исключения
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


&НаКлиенте
Процедура ВТР_СоздатьЗаказПоставщику(Команда)
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 10.06.2024 VTRD-957
	Попытка
		ВТР_СоздатьЗаказПоставщикуНаОснованииЗаказаНаВнутреннееПотребление();
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке() + Символы.ПС + 
		НСтр("ru = 'Ошибка создания документа Заказ поставщику на основании Заказа на внутреннее потребление с использованием Команды ""ВТР_СоздатьЗаказПоставщику"" '"));
		ПоказатьПредупреждение(НСтр("ru = 'Операция не может быть выполнена по причине:'") + Символы.ПС + ТекстСообщения);
		
	КонецПопытки;

	// Оповестить пользователя об успешном выполнении операции 
	// Нетиповое} ПервыйБИТ Полпудин И.С. 10.06.2024 VTRD-957

КонецПроцедуры

Процедура ВТР_СоздатьЗаказПоставщикуНаОснованииЗаказаНаВнутреннееПотребление()
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 10.06.2024 VTRD-957
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьПользователю("Необходимо записать документ Заказ на внутреннее потребление");
		Возврат;		
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Основание", ЭтотОбъект.Ссылка);
	
	РеквизитыОбъекта = ЭтотОбъект.Метаданные().Реквизиты;
	Для Каждого РеквизитОбъекта Из РеквизитыОбъекта Цикл
		СтруктураЗаполнения.Вставить(РеквизитОбъекта.Имя, ЭтотОбъект[РеквизитОбъекта.Имя]);	
	КонецЦикла;
	
	Попытка
		
		ДокументЗаказПоставщику = Документы.ДокументЗаказПоставщику.СоздатьДокумент();
		ДокументЗаказПоставщику.Заполнить(СтруктураЗаполнения);
		ДокументЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
		ОбщегоНазначения.СообщитьПользователю("Создан Заказ поставщику №" + ДокументЗаказПоставщику.Номер);	
		
	Исключение  
		
		// Запись события в журнал регистрации для системного администратора.
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке( ) + Символы.ПС +
		НСтр("ru = 'Ошибка создания документа Заказ поставщику на основании Заказа на внутреннее потребление с использованием Команды ""ВТР_СоздатьЗаказПоставщику"" '")));
		ВызватьИсключение; 
		//НСтр("ru = 'Ошибка создания документа Заказ поставщику на основании Заказа на внутреннее потребление с использованием Команды ""ВТР_СоздатьЗаказПоставщику"" '");

	КонецПопытки;

	// При необходимости оповестить динамические списки о создании нового элемента 
   	// Нетиповое} ПервыйБИТ Полпудин И.С. 10.06.2024 VTRD-957
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          		Формирование строк ошибок
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Строки ошибок записываются в массив,
после соединяются разделителем между собой и СтрокаОшибокПриемник

// Процедура - Дополнить строку ошибок
//
// Параметры:
//  СтрокаОшибокПриемник	 - Строка	 -  	 
//  МассивСтрокОшибокИсточник	 - Массив	 - 
//  Разделитель					 - Символ	 - по умолчанию Символы.ПС
//								 - Строка	 -
//
Процедура ДополнитьСтрокуОшибок(СтрокаОшибокПриемник, МассивСтрокОшибокИсточник, Разделитель = Неопределено)
	
	//++ БИТ Полпудин И.С. 16.09.2024 #VLKVERP-90 08.10.24
	Разделитель = ?(Разделитель = Неопределено, Символы.ПС, Разделитель);
	СтрокаОшибокИсточник = СтрСоединить(МассивСтрокОшибокИсточник, Разделитель);
	
	Если ЗначениеЗаполнено(СтрокаОшибокИсточник) Тогда
		СтрокаОшибокПриемник = СтрокаОшибокПриемник + Разделитель + ?(Разделитель = Символы.ПС, "", " ")+  СтрокаОшибокИсточник;
	КонецЕсли;
	//-- БИТ Полпудин И.С. 16.09.2024 #VLKVERP-90 08.10.24

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          		Журнал регистрации
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
При Вызвать исключение текст в исключении вроде автаматиески записывается в журнал регистрации 

ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание новой версии договора контрагентов'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, Документы.ВерсияСоглашенияКоммерческийДоговор,,
				СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = 'Изменен заблокированный реквизит ""[Представление]"", значение очищено'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
				ПараметрыДляСтроки));
