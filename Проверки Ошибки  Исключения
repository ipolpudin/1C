///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

															Проверки

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                         Проверка видимости, доступности, просмора у элемента и его родителей
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЭлементФормыЗаблокирован(Элемент, СтруктураОграничений = Неопределено)
	
	Если СтруктураОграничений = Неопределено Тогда
		
		СтруктураОграничений = Новый Структура;
		СтруктураОграничений.Вставить("Доступность", Истина);
		СтруктураОграничений.Вставить("Видимость", Истина);
		СтруктураОграничений.Вставить("ТолькоПросмотр", Ложь);
		
	КонецЕсли;

	ЭлементФормыЗаблокирован = Ложь;
	
	РодительЭлемента = Элемент.Родитель;
	Пока Не РодительЭлемента = Неопределено Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РодительЭлемента, "Доступность")
			И РодительЭлемента.Доступность = Ложь Тогда
			
			ЭлементФормыЗаблокирован = Истина;
			СтруктураОграничений.Доступность = Ложь; 
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РодительЭлемента, "Видимость")
			И РодительЭлемента.Видимость = Ложь Тогда
			
			ЭлементФормыЗаблокирован = Истина;
			СтруктураОграничений.Видимость = Ложь;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РодительЭлемента, "ТолькоПросмотр")
			И РодительЭлемента.ТолькоПросмотр = Истина Тогда
			
			ЭлементФормыЗаблокирован = Истина;
			СтруктураОграничений.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РодительЭлемента, "Родитель") Тогда
			РодительЭлемента = РодительЭлемента.Родитель;
		Иначе	
			РодительЭлемента = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭлементФормыЗаблокирован;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          Запрет Редактирования по условиям параметров формы
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TAKEDAMOS, ERP, расширение - РасширениеТакеда
					  
					  
#Область ПрограммныйИнтерфейс

// Процедура - Заполнить ограничения к элементам формы документа
//  Описание условий блокировки реквизитов. 
//  Логика ограничений для полных прав также описывается в условиях для каждого блокируемого элемента.
//
// Параметры:
//  Объект				 - СправочникОбъект, ДокументОбъект	 - проверяемый объект
//  ТаблицаОрганичений	 - ТаблицаЗначений					 - см. НоваяТаблицаОрганичений()
//
Процедура ЗаполнитьОграниченияКЭлементамФормыДокумента(Объект, ТаблицаОрганичений = Неопределено) Экспорт
	
	//ВидЗаменыЗаблокированногоРеквизитаПриИзменении = ВидЗаменыЗаблокированногоРеквизитаПриИзменении();
	
	// Параметры определяющие ограничения
	ВидДоговораУХСПокупателем 	= ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДоговоровКонтрагентовУХ.СПокупателем");                        
	
	ЭтоАктуальнаяВерсияДокумента = Ложь;
	Если Не Объект.ДоговорКонтрагента.Пустая() Тогда
		
		АктуальнаяВерсияДокумента = РегистрыСведений.ВерсииГрафиковРасчетов.ПолучитьАктуальнуюВерсиюФинансовогоИнструмента(Объект.ДоговорКонтрагента);
		ЭтоАктуальнаяВерсияДокумента = АктуальнаяВерсияДокумента.Пустая() ИЛИ Объект.Ссылка.Пустая() ИЛИ (Объект.Ссылка = АктуальнаяВерсияДокумента);
		
	КонецЕсли;
	
	// Условия ограничений
	Если Не Пользователи.РолиДоступны("ТМ_ПравоИзменениеАктуальнойВерсииДоговоровКонтрагентов") Тогда
		
		Если ЭтоАктуальнаяВерсияДокумента Тогда
			
			СтруктураОграничений = НовыеПараметрыОграниченияКЭлементамФормы();
			СтруктураОграничений.ИмяЭлементаФормы 		= "РедактироватьВерсию";
			СтруктураОграничений.ВидОграничения 		= "Доступность";
			СтруктураОграничений.ЗначениеОграничения 	= Ложь;
			СтруктураОграничений.ПараметрыГруппыДопОграниченийДоступа.Вставить("Вид", ВидГруппыФормы.ГруппаКнопок);
			
			ЗаполнитьЗначенияСвойств(ТаблицаОрганичений.Добавить(), СтруктураОграничений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Пользователи.РолиДоступны("ТМ_ПравоДобавлениеИзменениеВерсийСуммыКредитногоЛимитаПоДоговору") Тогда
		
		Если Объект.ВидДоговораУХ = ВидДоговораУХСПокупателем Тогда
			
			Если ЭтоАктуальнаяВерсияДокумента Тогда
				
				СтруктураОграничений = НовыеПараметрыОграниченияКЭлементамФормы();
				СтруктураОграничений.ИмяЭлементаФормы 				= "ДопустимаяСуммаЗадолженности"; 
				СтруктураОграничений.ИмяРеквизитаДереваМетоданных 	= "ДопустимаяСуммаЗадолженности";
				СтруктураОграничений.ВидОграничения 				= "ТолькоПросмотр";
				СтруктураОграничений.ЗначениеОграничения 			= Истина;
				СтруктураОграничений.ПараметрыГруппыДопОграниченийДоступа.Вставить("Вид", ВидГруппыФормы.ОбычнаяГруппа);
				//СтруктураОграничений.ВидЗаменыЗаблокированногоРеквизитаПриИзменении	= ВидЗаменыЗаблокированногоРеквизитаПриИзменении.Получить("ВернутьЗначенияИзБД");
				
				ЗаполнитьЗначенияСвойств(ТаблицаОрганичений.Добавить(), СтруктураОграничений);	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция - Заблокированные реквизиты изменены
//  Проверка на изменение реквизитов объекта по правилам:
//  заблокированные реквизиты нового элемента должны быть пустые;
//  заблокированные реквизиты существующего элемента не должны быть изменены
//
// Параметры:
//  Объект						 - СправочникОбъект, ДокументОбъект	 - проверяемый объект
//  Ошибки						 - Неопределено, Структура			 - см. ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю()
//  МассивИзмененныхРеквизитов	 - 									 - 
//  ВернутьЗначенияИзБД			 - Булево							 - если Ложь, значения заблокированных реквизитов не будут изменены;
//  ПроверятьПолныеПрава		 - Булево							 - если Ложь, то для пользователя с полными правами будут действовать ограничения;
//  							если Истина, то для пользователя с полными правами не будут действовать ограничения
// 
// Возвращаемое значение:
//  Булево - заблокированные реквизиты изменены
//
Функция ЗаблокированныеРеквизитыИзменены(Объект, Ошибки = Неопределено, МассивИзмененныхРеквизитов = Неопределено) Экспорт
	
	ЗаблокированныеРеквизитыИзменены = Ложь;   
	
	Если МассивИзмененныхРеквизитов = Неопределено Тогда
		МассивИзмененныхРеквизитов = Новый Массив;	
	КонецЕсли;
	
	ТаблицаОрганичений = НоваяТаблицаОрганичений();
	ЗаполнитьОграниченияКЭлементамФормыДокумента(Объект, ТаблицаОрганичений);
	Если ТаблицаОрганичений.Количество() = 0 Тогда
		Возврат ЗаблокированныеРеквизитыИзменены;	
	КонецЕсли;
	
	ИменаРеквизитовДереваМетоданных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаОрганичений.ВыгрузитьКолонку("ИмяРеквизитаДереваМетоданных"));
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ИменаРеквизитовДереваМетоданных, "");
	ТекущийКодЯзыка = ТекущийЯзык().КодЯзыка;
	
	ШаблонОшибкиНовогоДокумента = ?(ТекущийКодЯзыка = "ru", НСтр("ru = 'Изменен заблокированный реквизит ""[Представление]"", значение очищено'"), 
		НСтр("en = 'The locked props ""[Представление]"" have been changed, the value has been cleared'"));
	ШаблонОшибкиСуществующегоДокумента = ?(ТекущийКодЯзыка = "ru", НСтр("ru = 'Изменен заблокированный реквизит ""[Представление]"", значение возвращено'"), 
	НСтр("en = 'The locked account details ""[Представление]"" have been changed, the value has been returned'"));
	
	ПараметрыДляСтроки = Новый Структура;
	ПараметрыДляСтроки.Вставить("Представление","");
	
	РеквизитыМетаданныхДокумента = Метаданные.Документы.ВерсияСоглашенияКоммерческийДоговор.Реквизиты;
	
	// Заблокированные реквизиты нового элемента должны быть пустые
	Если Объект.Ссылка.Пустая() Тогда
		
		Для каждого ИмяРеквизитаДереваМетоданных Из ИменаРеквизитовДереваМетоданных Цикл
		
			Если ЗначениеЗаполнено(Объект[ИмяРеквизитаДереваМетоданных]) Тогда
				
				Объект[ИмяРеквизитаДереваМетоданных] = ТМ_ОбщегоНазначенияКлиентСервер.ПустоеЗначениеПоТипу(ТипЗнч(Объект[ИмяРеквизитаДереваМетоданных]));
				
				ПараметрыДляСтроки.Представление = РеквизитыМетаданныхДокумента[ИмяРеквизитаДереваМетоданных].Представление();
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонОшибкиНовогоДокумента, ПараметрыДляСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект." + ИмяРеквизитаДереваМетоданных, ТекстОшибки);
				
				МассивИзмененныхРеквизитов.Добавить(ИмяРеквизитаДереваМетоданных);

				ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание новой версии договора контрагентов'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, Документы.ВерсияСоглашенияКоммерческийДоговор,,
				СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = 'Изменен заблокированный реквизит ""[Представление]"", значение очищено'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
				ПараметрыДляСтроки));
				
			КонецЕсли;	
			
		КонецЦикла;
		
	Иначе // Заблокированные реквизиты существующего элемента не должны быть изменены
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, ИменаРеквизитовДереваМетоданных, Истина);
		
		Для каждого КлючЗначениеРеквизита Из ЗначенияРеквизитов Цикл
			
			ИмяРеквизитаДереваМетоданных = КлючЗначениеРеквизита.Ключ;
			Если Не Объект[КлючЗначениеРеквизита.Ключ] = КлючЗначениеРеквизита.Значение Тогда
				
				Объект[ИмяРеквизитаДереваМетоданных] = КлючЗначениеРеквизита.Значение;		                                                                                                    
				
				ПараметрыДляСтроки.Представление = РеквизитыМетаданныхДокумента[ИмяРеквизитаДереваМетоданных].Представление();
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонОшибкиСуществующегоДокумента, ПараметрыДляСтроки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект." + ИмяРеквизитаДереваМетоданных, ТекстОшибки);
				
				МассивИзмененныхРеквизитов.Добавить(ИмяРеквизитаДереваМетоданных);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Изменение версии договора контрагентов'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, Документы.ВерсияСоглашенияКоммерческийДоговор,,
				СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = 'Изменен заблокированный реквизит ""[Представление]"", значение возвращено'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
				ПараметрыДляСтроки));
				
			КонецЕсли;	
		
		КонецЦикла;
	
	КонецЕсли;  
	
	Если МассивИзмененныхРеквизитов.Количество() > 0 Тогда
		ЗаблокированныеРеквизитыИзменены = Истина;
	КонецЕсли;
	
	Возврат ЗаблокированныеРеквизитыИзменены;
	
КонецФункции 

// Процедура - Управление доступом к элементам формы
//  Ограничивает доступ к элементу формы по правилам доступа см. ЗаполнитьОграниченияКЭлементамФормыДокумента().
//  Если к элементу дополнительно определяется ограничения в других механизмах,
//  то создаваемые ограничения действует по принципу дополнения к существующим ограничениям
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - 
//  ПроверятьПолныеПрава - Булево						 - если Ложь, то для пользователя с полными правами будут действовать ограничения;
//  						если Истина, то для пользователя с полными правами не будут действовать ограничения
//
Процедура УправлениеДоступомКЭлементамФормы(Форма) Экспорт
	
	СписокИменГруппОграниченийДоступа = СписокИменГруппОграниченийДоступа(Форма); 
	
	ТаблицаОрганичений = НоваяТаблицаОрганичений();
	ЗаполнитьОграниченияКЭлементамФормыДокумента(Форма.Объект, ТаблицаОрганичений);
	
	УстановитьОграничения(Форма, ТаблицаОрганичений, СписокИменГруппОграниченийДоступа);
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыеПараметрыОграниченияКЭлементамФормы()
	
	СтруктураОграничений = Новый Структура;
	СтруктураОграничений.Вставить("ИмяЭлементаФормы", "");
	СтруктураОграничений.Вставить("ИмяРеквизитаДереваМетоданных", "");
	СтруктураОграничений.Вставить("ВидОграничения", "");
	СтруктураОграничений.Вставить("ЗначениеОграничения", Ложь);
	//СтруктураОграничений.Вставить("ДействияПриИзмененииБлокируемыхРеквизитов", "");// Функционал на доработке
	СтруктураОграничений.Вставить("ПараметрыГруппыДопОграниченийДоступа", Новый Структура);
	//СтруктураОграничений.Вставить("ВидЗаменыЗаблокированногоРеквизитаПриИзменении", Неопределено);// см. ВидЗаменыЗаблокированногоРеквизитаПриИзменении()
	
	Возврат СтруктураОграничений;
	
КонецФункции 

Функция НоваяТаблицаОрганичений()
	
	ТаблицаОрганичений = Новый ТаблицаЗначений;
	ТаблицаОрганичений.Колонки.Добавить("ИмяЭлементаФормы", 				Новый ОписаниеТипов("Строка"));
	ТаблицаОрганичений.Колонки.Добавить("ИмяРеквизитаДереваМетоданных", 	Новый ОписаниеТипов("Строка"));
	ТаблицаОрганичений.Колонки.Добавить("ВидОграничения", 					Новый ОписаниеТипов("Строка"));
	ТаблицаОрганичений.Колонки.Добавить("ЗначениеОграничения", 				Новый ОписаниеТипов("Булево"));
	ТаблицаОрганичений.Колонки.Добавить("ПараметрыГруппыДопОграниченийДоступа", 	Новый ОписаниеТипов("Структура"));
	
	Возврат ТаблицаОрганичений;
	
КонецФункции

Функция СписокИменГруппОграниченийДоступа(Форма)
	
	ИмяСпискаГруппОграниченийДоступа = "ТМ_ИменаГруппДопОграниченийДоступаКЭлементам";
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяСпискаГруппОграниченийДоступа) Тогда
		
		ПараметрыРеквизита 				= Новый Структура;
		ПараметрыРеквизита.Вставить(ИмяСпискаГруппОграниченийДоступа, Новый ОписаниеТипов("СписокЗначений"));
		
		ТМ_МодификацияФормСервер.ДобавитьРеквизиты(Форма, ПараметрыРеквизита);
		
	КонецЕсли;
	
	Возврат Форма[ИмяСпискаГруппОграниченийДоступа];	
	
КонецФункции 

Процедура УстановитьОграничения(Форма, ТаблицаОрганичений, СписокИменГруппОграниченийДоступа)

	// Снимаютя ограничения
	Для каждого ИмяЭлементаФормы Из СписокИменГруппОграниченийДоступа Цикл
		
		ЭлементФормы = Форма.Элементы[ИмяЭлементаФормы.Значение];
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "Доступность") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ЭлементФормы.Имя, "Доступность", Истина);	
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "Видимость") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ЭлементФормы.Имя, "Видимость", Истина);	
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "ТолькоПросмотр") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ЭлементФормы.Имя, "ТолькоПросмотр", Ложь);	
		КонецЕсли;
		
	КонецЦикла;  
	
	// Устанавливаются ограничения
	Для каждого Ограничение Из ТаблицаОрганичений Цикл                                                                    
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, Ограничение.ИмяЭлементаФормы) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппыДопОграниченийДоступа = "ТМ_ГруппаДопОграниченийДоступаК" + Ограничение.ИмяЭлементаФормы;
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, ИмяГруппыДопОграниченийДоступа) Тогда
			
			ЭлементФормы = Форма.Элементы[Ограничение.ИмяЭлементаФормы];
			РодительГруппы = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы, Ограничение.ИмяЭлементаФормы, "Родитель");
			
			ПараметрыЭлемента = Новый Структура;
			ПараметрыЭлемента.Вставить("ТипЭлемента", "ГруппаФормы");
			ПараметрыЭлемента.Вставить("Родитель", РодительГруппы);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЭлемента, Ограничение.ПараметрыГруппыДопОграниченийДоступа, Истина);
			ПараметрыЭлемента.Вставить("Имя", ИмяГруппыДопОграниченийДоступа);
			ПараметрыЭлемента.Вставить("ОтображатьЗаголовок", Ложь);
			
			ГруппаДопОграниченийДоступа = ТМ_МодификацияФормСервер.НовыйЭлементФормы(Форма.Элементы, ПараметрыЭлемента);
			
			Форма.Элементы.Переместить(ГруппаДопОграниченийДоступа, РодительГруппы, ЭлементФормы);// Переместить группу
			Форма.Элементы.Переместить(ЭлементФормы, ГруппаДопОграниченийДоступа);// Переместить элемент
			
		КонецЕсли;
		
		СписокИменГруппОграниченийДоступа.Добавить(ИмяГруппыДопОграниченийДоступа);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяГруппыДопОграниченийДоступа, Ограничение.ВидОграничения, Ограничение.ЗначениеОграничения);

	КонецЦикла;	

КонецПроцедуры

Функция ВидЗаменыЗаблокированногоРеквизитаПриИзменении()

	ВидЗаменыЗаблокированногоРеквизитаПриИзменении = Новый Соответствие;
	ВидЗаменыЗаблокированногоРеквизитаПриИзменении.Вставить("ВернутьЗначенияИзБД", "ВернутьЗначенияИзБД");// Если новый объект, то заполнит пустым значеним
	ВидЗаменыЗаблокированногоРеквизитаПриИзменении.Вставить("Очистить", "Очистить");
	
	Возврат ВидЗаменыЗаблокированногоРеквизитаПриИзменении;

КонецФункции 
 
#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          Запрет Редактирования БСП
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

https://its.1c.ru/db/bsp3110doc#content:4:hdoc:issogl1_запрет_редактирования_реквизитов_объектов
Когда необходимо заброкировать всю форму, а перечислять каждое поле не целесообразно можно воспользоваться данным способом 

2 варинат реализации:
Для Каждого Элемент из Форма.Элементы Цикл

Если НЕ Элемент = Группа Тогда
МассивЭлементов.Добавить(Элемент); // Передается массив элементов для полного запрета редактирования 
КонецЦикла

3 варинат реализации:
В модуле менеджера обратиться к объекту методанных и в цикле добавить к заблокированным объектам все объекты методанного 

{ПриСозданииНаСервере

// Группа маячек, по ее доступности определяется ТолькоПросмотр у верхнеуровневых групп документов
бит_МодификацияФормСервер.ДобавитьЭлементНаФормуГруппа(Форма, Форма, "ЭтаФормаДокумента", "ЭтаФормаДокумента", ВидГруппыФормы.ОбычнаяГруппа,,,Ложь);
	
Если Форма.Объект.бит_ГотовКОтправке Тогда
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(Форма);	
КонецЕсли;
	
ЭтаФормаДокументаДоступность = НЕ Форма.Элементы["ЭтаФормаДокумента"].Доступность;
	
Форма.Элементы.СтрокаИсправление.ТолькоПросмотр 		= ЭтаФормаДокументаДоступность;
Форма.Элементы.ГруппаСтраницы.ТолькоПросмотр 			= ЭтаФормаДокументаДоступность;
Форма.Элементы.ГруппаНазначениеПлатежа.ТолькоПросмотр 		= ЭтаФормаДокументаДоступность;
Форма.Элементы.ГруппаПодвал.ТолькоПросмотр 			= ЭтаФормаДокументаДоступность;

ПриСозданииНаСервере}

{ПослеЗаписиНаСервере

Если ТекущийОбъект.бит_ГотовКОтправке Тогда
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);	
КонецЕсли;
	
ЭтаФормаДокументаДоступность = НЕ Элементы["ЭтаФормаДокумента"].Доступность;
	
Элементы.СтрокаИсправление.ТолькоПросмотр 			= ЭтаФормаДокументаДоступность; 
Элементы.ГруппаСтраницы.ТолькоПросмотр 				= ЭтаФормаДокументаДоступность;
Элементы.ГруппаНазначениеПлатежа.ТолькоПросмотр 		= ЭтаФормаДокументаДоступность;
Элементы.ГруппаПодвал.ТолькоПросмотр 				= ЭтаФормаДокументаДоступность;

ПослеЗаписиНаСервере}

{МодульФормы

// [ISPolpudin@1bit.com ZOOM-19 27.08.24
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект, Новый ОписаниеОповещения("ПослеВыбораРеквизитовДляРазблокирования", ЭтотОбъект), Ложь);
КонецПроцедуры // ISPolpudin@1bit.com ZOOM-19 27.08.24] 

// [ISPolpudin@1bit.com ZOOM-19 27.08.24
&НаКлиенте
Процедура ПослеВыбораРеквизитовДляРазблокирования(РазблокируемыеРеквизиты, Контекст) Экспорт
	
	ЭтаФормаДокументаДоступность = НЕ Элементы["ЭтаФормаДокумента"].Доступность;
	
	Элементы.СтрокаИсправление.ТолькоПросмотр 			= ЭтаФормаДокументаДоступность; 
	Элементы.ГруппаСтраницы.ТолькоПросмотр 				= ЭтаФормаДокументаДоступность;
	Элементы.ГруппаНазначениеПлатежа.ТолькоПросмотр 		= ЭтаФормаДокументаДоступность;
	Элементы.ГруппаПодвал.ТолькоПросмотр 				= ЭтаФормаДокументаДоступность;
    
КонецПроцедуры // ISPolpudin@1bit.com ZOOM-19 27.08.24]

МодульФормы}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          ПроверкаПередВЫгрузкойВБитАдаптре - Универсально для объектов
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Проверка структуру ->


#Область ПроверкаПередЗаписью

// Функция - Разрешена запись полученного объекта ВБД
// Если требуется проверка на корректность заполненности данными только определенной части свойств, необходимо создавать отдельную структуру только с этими определенными свойстави и передавать ее в параметры 
// Проверка заполнененности обязательных свойств. Например Дата
// Проверка заполнененности обязательных вариативных свойств. Например Документ должен обязательно иметь или ТЧ ЛицевыеСчета, или РасшифровкаПлатежа
//
// Параметры:
//  СтруктураСконвертированныхДанных - Структура	 	- Если Структура то обязательно должно быть КраткоеНаименованиеТипаОбъекта
//  СтрокаОшибокПолученная			 - Строка  			- 
// 
// Возвращаемое значение:
//  Разрешена - Истина или Ложь
//
Функция РазрешенаЗаписьПолученногоОбъектаВБД(СтруктураСконвертированныхДанных, СтрокаОшибокПолученная = "") Экспорт
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	СтрокаОшибок = "";
	
	// {Проверка заполнененности обязательных свойств
	МассивОбязательныхСвойств = ОбязательныеДляЗаписиСвойстваПолученныхОбъектов(СтруктураСконвертированныхДанных.ТипОбъекта);
	Для каждого ОбязательноеСвойство Из МассивОбязательныхСвойств Цикл
		
		Если ТипЗнч(ОбязательноеСвойство) = Тип("Массив") Тогда
			
			// {Проверка заполнененности обязательных вариативных свойств. Например Документ должен обязательно иметь или ТЧ ЛицевыеСчета, или РасшифровкаПлатежа
			ЕстьХотяБыОдноСвойство = Ложь;
			
			Для каждого Свойство Из ОбязательноеСвойство Цикл
				
				ОбязательноеСвойствоПрисутствует = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураСконвертированныхДанных, Свойство);
				Если ОбязательноеСвойствоПрисутствует = Истина Тогда 
					ЕстьХотяБыОдноСвойство = Истина;
				КонецЕсли;
				
			КонецЦикла;	
			
			Если НЕ ЕстьХотяБыОдноСвойство Тогда
				СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Должно присутствовать хотя бы одно свойство из: " + СтрСоединить(ОбязательноеСвойство, ", ");
			КонецЕсли;
			// }Проверка заполнененности обязательных вариативных свойств
			
		Иначе
			
			ОбязательноеСвойствоПрисутствует = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураСконвертированныхДанных, ОбязательноеСвойство);
			Если ОбязательноеСвойствоПрисутствует = Ложь Тогда
				
				//Свойство отсутствует
				СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Свойство " + ОбязательноеСвойство + " отсутствует";
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	// }Проверка заполнененности обязательных свойств
	
	// {Проверка корректности переданных данных в не обязательные свойства. Например: нормальная ссылка, а не битая
	ДанныеКоллекцииКорректны(СтруктураСконвертированныхДанных, СтрокаОшибок);
	// }Проверка корректности переданных данных в не обязательные свойства
	
	Если НЕ СтрокаОшибок = ""
		ИЛИ НЕ СтрокаОшибокПолученная = "" Тогда
		
		Если СтрокаОшибокПолученная = "" Тогда
			
			ДлинаСтроки = СтрДлина(СтрокаОшибок) - 1;
			СтрокаОшибок = Прав(СтрокаОшибок, ДлинаСтроки);// Удаление первого символа, это всегда - Символы.ПС			
			СтрокаОшибокПолученная = СтрокаОшибокПолученная + СтрокаОшибок;
			
		Иначе                                     
			// Если была передана не пустая строка значит оставляем Символы.ПС
			СтрокаОшибокПолученная = СтрокаОшибокПолученная + СтрокаОшибок;
		КонецЕсли;
		
		Возврат Ложь; 
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	// Нетиповое} ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	
КонецФункции 

// Функция - Данные коллекции корректны
// Проверка на: Передана пустая или битая ссылка; Значение пусто 
//
// Параметры:
//  Коллекция	 - Структура, Массив, ТаблицаЗначений только внутри Массива или Структуры 	 - Коллекция с данными
//  СтрокаОшибок - 	Строка -
//  УчитыватьЧислоНольКакЗаполненноеЗнач - 	Булево - Если Истина, то значение 0 в свойстве не будет ошибкой. Например Количество = 0 не ошибка
// 
// Возвращаемое значение:
// ДанныеКоллекцииКорректны  - Истина или Ложь
//
Функция ДанныеКоллекцииКорректны(Коллекция, СтрокаОшибок = "", УчитыватьЧислоНольКакЗаполненноеЗнач = Истина) Экспорт
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	ЭтоСтруктура = ТипЗнч(Коллекция) = Тип("Структура");
	
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		
		Если ЭтоСтруктура Тогда
			ЗначениеЭлементаКоллекции 	= ЭлементКоллекции.Значение;
			КлючЭлементаКоллекции 		= ЭлементКоллекции.Ключ;
		Иначе
			ЗначениеЭлементаКоллекции 	= ЭлементКоллекции;
			КлючЭлементаКоллекции 		= ЭлементКоллекции;	
		КонецЕсли;
		
		Если (ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеЭлементаКоллекции)
			И НЕ ОбщегоНазначения.СсылкаСуществует(ЗначениеЭлементаКоллекции))
			ИЛИ ТипЗнч(ЗначениеЭлементаКоллекции) = Тип("УникальныйИдентификатор") Тогда
			
			// Передана пустая или битая ссылка 
			СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Передана пустая или битая ссылка в свойство " + КлючЭлементаКоллекции;
			
		ИначеЕсли (НЕ ЗначениеЭлементаКоллекции = 0 И НЕ ЗначениеЗаполнено(ЗначениеЭлементаКоллекции))
			ИЛИ (УчитыватьЧислоНольКакЗаполненноеЗнач = Ложь И ЗначениеЭлементаКоллекции = 0) Тогда
			
			// Значение пусто
			СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Значение свойства " + КлючЭлементаКоллекции + " пусто";
			
		ИначеЕсли ТипЗнч(ЗначениеЭлементаКоллекции) = Тип("ТаблицаЗначений") Тогда
			
			МассивСтруктур = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЗначениеЭлементаКоллекции);	
			
			Для каждого Структура Из МассивСтруктур Цикл
				ДанныеКоллекцииКорректны(Структура, СтрокаОшибок);			
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЗначениеЭлементаКоллекции) = Тип("Массив") Тогда
			
			ДанныеКоллекцииКорректны(ЗначениеЭлементаКоллекции, СтрокаОшибок);
			
		ИначеЕсли ТипЗнч(ЗначениеЭлементаКоллекции) = Тип("Структура") Тогда
			
			ДанныеКоллекцииКорректны(ЗначениеЭлементаКоллекции, СтрокаОшибок);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если НЕ СтрокаОшибок = "" Тогда
		Возврат Ложь;		
	Иначе
		Возврат Истина;
	КонецЕсли;
    // Нетиповое} ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	
КонецФункции
 
// Функция - Обязательные для записи свойства полученных объектов
// Массив обязательных свойств. Например Дата
//
// Параметры:
//  ТипОбъекта	 - 	 - 
// 
// Возвращаемое значение:
// МассивОбязательныхСвойств - Массив
//
Функция ОбязательныеДляЗаписиСвойстваПолученныхОбъектов(ТипОбъекта)
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	МассивОбязательныхСвойств = Новый Массив;
	
	Если ТипОбъекта = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		МассивОбязательныхСвойств = МассивОбязательныхСвойствЗаявкиНаРасходованиеДенежныхСредств();	
	КонецЕсли;
	
	Возврат МассивОбязательныхСвойств;
    // Нетиповое} ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	
КонецФункции 

#Область МассивОбязательныхСвойствОбъектов

// Функция - Массив обязательных свойств заявки на расходование денежных средств
// МассивОбязательныхСвойств для документа ЗаявкаНаРасходованиеДенежныхСредств 
//
// Возвращаемое значение:
//  МассивОбязательныхСвойств - Массив
//
Функция МассивОбязательныхСвойствЗаявкиНаРасходованиеДенежныхСредств()
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	МассивОбязательныхСвойств = Новый Массив;
	
	МассивОбязательныхСвойств.Добавить("Дата");
	МассивОбязательныхСвойств.Добавить("Организация");
	МассивОбязательныхСвойств.Добавить("СуммаДокумента");
	МассивОбязательныхСвойств.Добавить("Валюта");
	МассивОбязательныхСвойств.Добавить("ХозяйственнаяОперация");
	
	// Должно быть заполнено ЛицевыеСчетаСотрудников или РасшифровкаПлатежа или ВТР_ВентраГПХ
	Массив1 = Новый Массив;
	Массив1.Добавить("ЛицевыеСчетаСотрудников");
	Массив1.Добавить("РасшифровкаПлатежа");
	Массив1.Добавить("ВТР_ВентраГПХ");
	
	МассивОбязательныхСвойств.Добавить(Массив1);

	Возврат МассивОбязательныхСвойств;	
    // Нетиповое} ПервыйБИТ Полпудин И.С. 02.05.2024 VTRD-
	
КонецФункции

#КонецОбласти

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          ПроверкаПередЗаписьюОбъекта - шпаргалка  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Функция - Разрешена выгрузка документов в бит адаптер
// Проверка документов на требования бизнес логики
// 
// МассивСсылокДокументов может состоять из: 
// 1) ВТР_ЗаявкаНаОплатуПоИсполнительномуЛисту
// 2) ПлатежноеПоручение + ВедомостьНаВыплатуЗарплатыПеречислением
//
// Параметры:
//  МассивСсылокДокументов	 - Массив	 - ПлатежноеПоручение + ВедомостьНаВыплатуЗарплатыПеречислением или ВТР_ЗаявкаНаОплатуПоИсполнительномуЛисту 
//  СтрокаОшибокПолученная	 - Строка	 - Заполняется ошибками. Если передана не пустая строка произойдет сращивание, разделитель Символы.ПС
// 
// Возвращаемое значение:
// Разрешена - Исина/Ложь 
//
Функция РазрешенаВыгрузкаПлатежныхДокументовВБитАдаптер(МассивСсылокДокументов, СтрокаОшибокПолученная = "") Экспорт
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 01.04.2024 VTRD-824
	СтрокаОшибок							= "";
	
	// {Удаление из МассивСсылокДокументов документов не участвующих в обмене "Ведомость в банк"	
	Для каждого Ссылка Из МассивСсылокДокументов Цикл
	
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивСсылокДокументов, Ссылка);
		КонецЕсли;
	
	КонецЦикла;
	
	Если МассивСсылокДокументов.Количество() = 0 Тогда
		СтрокаОшибокПолученная =  СтрокаОшибокПолученная + "Выберите документы подходящего типа";
		Возврат	Ложь;
	КонецЕсли;
	// }Удаление из МассивСсылокДокументов документов не участвующих в обмене "Ведомость в банк"
	
	МассивыОшибок = МассивыОшибокПлатежныхДокументовПередВыгрузкойВБитАдаптер(МассивСсылокДокументов);
	НепроведенныеДокументы 					= МассивыОшибок.НепроведенныеДокументы;
	ЗапрещенныеКВыгрузкеТипыДокументов 		= МассивыОшибок.ЗапрещенныеКВыгрузкеТипыДокументов;
	ДокументыРанееВыгруженные 				= МассивыОшибок.ДокументыРанееВыгруженные; 
	ДокументыРанееВыгруженныеБитАдаптер 	= МассивыОшибок.ДокументыРанееВыгруженныеБитАдаптер;
	ДокументыРасхождениеДатаРасходаИДаты 	= МассивыОшибок.ДокументыРасхождениеДатаРасходаИДаты;
	НепроведенныеВедомости 					= ВТР_ПлатежныеПоручения.НепроведенныеВедомостиПлатежногоПорученияПредставление(МассивСсылокДокументов);// Ведомости из ТЧ ПлатежногоПоручения
	ДатаРасходаИДатаВедомостиНеИдентичны	= ВТР_ПлатежныеПоручения.МассивПлатежныхПоручнийСРазличнойДатойРасходаИДатойВедомости(МассивСсылокДокументов);
	ДокументыОшибкаКоличестваСтрокТЧРаспределение  = МассивыОшибок.ДокументыОшибкаКоличестваСтрокТЧРаспределение; 
	
	// {Формирование текстов ошибок
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Необходимо провести документ: " + СтрСоединить(НепроведенныеДокументы, ", ");		
	КонецЕсли;
	
	Если ДокументыОшибкаКоличестваСтрокТЧРаспределение.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка. Количество строк в табличной части Распределение не равно 1: " + СтрСоединить(ДокументыОшибкаКоличестваСтрокТЧРаспределение, ", ");
	КонецЕсли;
	
	Если ЗапрещенныеКВыгрузкеТипыДокументов.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка. Есть запрещенные к выгрузке типы документов: " + СтрСоединить(ЗапрещенныеКВыгрузкеТипыДокументов, ", ");
	КонецЕсли;
	
	Если ДатаРасходаИДатаВедомостиНеИдентичны.Количество() > 0 Тогда
		
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Нельзя выгрузить документ по причине: 
	 	|Дата расхода в Платежном поручении отличается от Даты Ведомости в банк. 
	 	|Дата расхода должна совпадать с датой Ведомости в банк. 
		|Список документов: " + СтрСоединить(ДатаРасходаИДатаВедомостиНеИдентичны, ", ");
		
	КонецЕсли; 
	
	Если НепроведенныеВедомости.Количество() > 0 Тогда
	
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Нельзя выгрузить документ по причине: 
		|В Платежное поручение включена не проведенная Ведомость в банк.
		|Проверьте следующие Ведомости в банк: " + 
		СтрСоединить(НепроведенныеВедомости, ", ");
	
	КонецЕсли;
	
	Если ДокументыРанееВыгруженные.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка.Есть ранее выгруженные документы: " + СтрСоединить(ДокументыРанееВыгруженные, ", ");
	КонецЕсли;
	
	Если ДокументыРанееВыгруженныеБитАдаптер.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Ошибка.Есть ранее выгруженные в БитАдаптер документы: " + СтрСоединить(ДокументыРанееВыгруженныеБитАдаптер, ", ");
	КонецЕсли;
	
	Если ДокументыРасхождениеДатаРасходаИДаты.Количество() > 0 Тогда
		СтрокаОшибок = СтрокаОшибок  + Символы.ПС + "Нельзя выгрузить документ по причине: 
			|Дата расхода отличается от Даты документа.
			|Дата расхода должна совпадать с датой документа. " + СтрСоединить(ДокументыРасхождениеДатаРасходаИДаты, ", ");
	КонецЕсли;
	// } Формирование текстов ошибок
	
	Если НЕ СтрокаОшибок = "" Тогда
		
        Если СтрокаОшибокПолученная = "" Тогда

			ДлинаСтроки = СтрДлина(СтрокаОшибок) - 1;
			СтрокаОшибок = Прав(СтрокаОшибок, ДлинаСтроки);// Удаление первого символа, это всегда - Символы.ПС			
			СтрокаОшибокПолученная = СтрокаОшибокПолученная + СтрокаОшибок;
			
		Иначе                                     
			// Если была передана не пустая строка значит оставляем Символы.ПС
			СтрокаОшибокПолученная = СтрокаОшибок;
		КонецЕсли;

		Возврат Ложь; 
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	// Нетиповое} ПервыйБИТ Полпудин И.С. 01.04.2024 VTRD-824

КонецФункции 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          		Ошибки  Исключения
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


&НаКлиенте
Процедура ВТР_СоздатьЗаказПоставщику(Команда)
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 10.06.2024 VTRD-957
	Попытка
		ВТР_СоздатьЗаказПоставщикуНаОснованииЗаказаНаВнутреннееПотребление();
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке() + Символы.ПС + 
		НСтр("ru = 'Ошибка создания документа Заказ поставщику на основании Заказа на внутреннее потребление с использованием Команды ""ВТР_СоздатьЗаказПоставщику"" '"));
		ПоказатьПредупреждение(НСтр("ru = 'Операция не может быть выполнена по причине:'") + Символы.ПС + ТекстСообщения);
		
	КонецПопытки;

	// Оповестить пользователя об успешном выполнении операции 
	// Нетиповое} ПервыйБИТ Полпудин И.С. 10.06.2024 VTRD-957

КонецПроцедуры

Процедура ВТР_СоздатьЗаказПоставщикуНаОснованииЗаказаНаВнутреннееПотребление()
	
	// Нетиповое{ ПервыйБИТ Полпудин И.С. 10.06.2024 VTRD-957
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		ОбщегоНазначения.СообщитьПользователю("Необходимо записать документ Заказ на внутреннее потребление");
		Возврат;		
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Основание", ЭтотОбъект.Ссылка);
	
	РеквизитыОбъекта = ЭтотОбъект.Метаданные().Реквизиты;
	Для Каждого РеквизитОбъекта Из РеквизитыОбъекта Цикл
		СтруктураЗаполнения.Вставить(РеквизитОбъекта.Имя, ЭтотОбъект[РеквизитОбъекта.Имя]);	
	КонецЦикла;
	
	Попытка
		
		ДокументЗаказПоставщику = Документы.ДокументЗаказПоставщику.СоздатьДокумент();
		ДокументЗаказПоставщику.Заполнить(СтруктураЗаполнения);
		ДокументЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
		ОбщегоНазначения.СообщитьПользователю("Создан Заказ поставщику №" + ДокументЗаказПоставщику.Номер);	
		
	Исключение  
		
		// Запись события в журнал регистрации для системного администратора.
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке( ) + Символы.ПС +
		НСтр("ru = 'Ошибка создания документа Заказ поставщику на основании Заказа на внутреннее потребление с использованием Команды ""ВТР_СоздатьЗаказПоставщику"" '")));
		ВызватьИсключение; 
		//НСтр("ru = 'Ошибка создания документа Заказ поставщику на основании Заказа на внутреннее потребление с использованием Команды ""ВТР_СоздатьЗаказПоставщику"" '");

	КонецПопытки;

	// При необходимости оповестить динамические списки о создании нового элемента 
   	// Нетиповое} ПервыйБИТ Полпудин И.С. 10.06.2024 VTRD-957
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          		Формирование строк ошибок
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Строки ошибок записываются в массив,
после соединяются разделителем между собой и СтрокаОшибокПриемник

// Процедура - Дополнить строку ошибок
//
// Параметры:
//  СтрокаОшибокПриемник	 - Строка	 -  	 
//  МассивСтрокОшибокИсточник	 - Массив	 - 
//  Разделитель					 - Символ	 - по умолчанию Символы.ПС
//								 - Строка	 -
//
Процедура ДополнитьСтрокуОшибок(СтрокаОшибокПриемник, МассивСтрокОшибокИсточник, Разделитель = Неопределено)
	
	//++ БИТ Полпудин И.С. 16.09.2024 #VLKVERP-90 08.10.24
	Разделитель = ?(Разделитель = Неопределено, Символы.ПС, Разделитель);
	СтрокаОшибокИсточник = СтрСоединить(МассивСтрокОшибокИсточник, Разделитель);
	
	Если ЗначениеЗаполнено(СтрокаОшибокИсточник) Тогда
		СтрокаОшибокПриемник = СтрокаОшибокПриемник + Разделитель + ?(Разделитель = Символы.ПС, "", " ")+  СтрокаОшибокИсточник;
	КонецЕсли;
	//-- БИТ Полпудин И.С. 16.09.2024 #VLKVERP-90 08.10.24

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          		Журнал регистрации
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
При Вызвать исключение текст в исключении вроде автаматиески записывается в журнал регистрации 

ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание новой версии договора контрагентов'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, Документы.ВерсияСоглашенияКоммерческийДоговор,,
				СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = 'Изменен заблокированный реквизит ""[Представление]"", значение очищено'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
				ПараметрыДляСтроки));
