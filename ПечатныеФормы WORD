
//////////////////////////////////////////////////////////////////////////////////////////////////// { WORD БСП Клиент-Сервер 
//Работает только если подключать в дополнительный отчет!!!!!!!!!!!
//https://disk.yandex.ru/d/cDxaYGvbsJZrdQ

//Доп. литература
//https://fastcode.im/Templates/7180/primer-formirovaniya-vneshnej-pechatnoj-formy-iz-maketa-word-bsp
//https://drive.google.com/file/d/1HPes477SNKEY8MCsHGWHsg_6FjmiIyBr/view


//!!!ВАЖНО!!! Работает только при подключении в систему через Доп.ПечатныеФормы
//Используется только .DOCX
//Конструкция {v8 Область.Общая} ...{v8 ИмяРеквизит}.... {/v8 Область.Общая}

#Область ФункцииДляПодключения

Функция СведенияОВнешнейОбработке() Экспорт
	
	// Стандартное описание сведений о внешней печатной форме

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
	
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Наименование = "УведомлениеРаботников";
	
	ПараметрыРегистрации.Назначение.Добавить("Справочник.Сотрудники");
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Уведомление работников";   //Синоним
	НоваяКоманда.Идентификатор = "УведомлениеРаботников";   //ПолноеИмя
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
		
	Возврат ПараметрыРегистрации;
	
КонецФункции  

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры
#КонецОбласти

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УведомлениеРаботников") Тогда
		ПечатьДокумента(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати);
	КонецЕсли;
	
КонецПроцедуры // Печать()  

// Процедура - Печать документа
//  
//
// Параметры:
//  КоллекцияПечатныхФорм	 - 	 - 
//  МассивОбъектов			 - 	 МассивСотрудников 
//  ОбъектыПечати			 - 	 - 
//
Процедура ПечатьДокумента(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати) Экспорт
	
	Данные = ПараметрыТрудовогоДоговора();//Пустая Структура для заполнения данными
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивОбъектов, "ДатаДоговораКонтракта, ДатаНачала, Организация",, Неопределено);
	Для Каждого Сотрудник из КадровыеДанные Цикл
		
		//Для каждого сотрудника находится директор по дате приема на работу
		ОтветственныеЛица = СведенияОбОтветственныхЛицах.СведенияОбОтветственныхЛицах(Сотрудник.Организация, "Руководитель, ДолжностьРуководителяСтрокой", Сотрудник.ДатаДоговораКонтракта);
		
		
		АдресОрганизации = КонтактнаяИнформацияБЗК.КонтактнаяИнформацияОбъектов(Сотрудник.Организация,Перечисления.ТипыКонтактнойИнформации.Адрес,Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Сотрудник.ДатаДоговораКонтракта);
		
		Данные.Организация 					= Сотрудник.Организация;
		Данные.ФИОДиректора 				= ОтветственныеЛица.Руководитель;
		Данные.ДолжностьДиректора 			= ОтветственныеЛица.ДолжностьРуководителяСтрокой;
		Данные.АдресОрганизации 			= АдресОрганизации[0].Представление;

		ВывестиНаПечать(КоллекцияПечатныхФорм, ОбъектыПечати, Данные);      
		Данные.Очистить();//Отчистка структуры данных
	КонецЦикла;
	
КонецПроцедуры  

// Процедура - Вывести на печать
//
// Параметры:
//  КоллекцияПечатныхФорм	 - 	 - 
//  ОбъектыПечати			 - 	 - 
//  Данные					 - 	 Структура с данными 
//
Процедура ВывестиНаПечать(КоллекцияПечатныхФорм, ОбъектыПечати, Данные)
	
	
	
	ДвоичныеДанныеМакета = ПолучитьМакет("Макет");
	
	Если ДвоичныеДанныеМакета <> Неопределено Тогда
		
		// Инициализируем печатную форму	
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "УведомлениеРаботников");
		
		// Наличие пустого табличного документа в коллекции обязательно
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакета,Неопределено);
		ПечатнаяФормаДокумента = УправлениеПечатью.ИнициализироватьПечатнуюФорму(Неопределено, Макет.НастройкиСтраницыМакета, Макет);		
		
				
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////Новая
		
		ОписаниеОбластей = Новый Структура;
		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Общая", "Общая");
		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул", "ВерхнийКолонтитул");
		
		Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей["ВерхнийКолонтитул"]);
		УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФормаДокумента, Область, Данные, Ложь);

		
		Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей["Общая"]);
		УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФормаДокумента, Область, Данные, Ложь);

		
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьЗаголовок);
		//УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения, Ложь); 
		//
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьВерхнийКолонтитул);  
		//УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения);
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьНижнийКолонтитул);
		//УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения); 
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьШапкаТаблицы);
		//УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФормаДокумента, Область, Ложь);
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьСтрокаТаблицы);
		//УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения.ТаблицаДанных); 
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьНумерованныйСписка);
		//УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения.ТаблицаДанных);
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьМаркированногоСписка);
		//УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения.ТаблицаДанных);
		
		// Поместим получившийся документ в коллекцию печатных форм, в раздел ОфисныеДокументы
		// так БСП поймет что нужно открывать Word при формировании печатной формы
		
		АдресХранилищаОфисныйДокумент = УправлениеПечатью.СформироватьДокумент(ПечатнаяФормаДокумента);
		
		
		ОфисныеДокументы = Новый Соответствие;
		
		ОфисныеДокументы.Вставить(АдресХранилищаОфисныйДокумент, НСтр("ru = 'Название документа'"));
		
		ПечатнаяФорма.СинонимМакета    = НСтр("ru = 'Название документа (документ Microsoft Word)'");
		ПечатнаяФорма.ОфисныеДокументы = ОфисныеДокументы;
		
		УправлениеПечатью.ОчиститьСсылки(ПечатнаяФормаДокумента, Ложь);
		УправлениеПечатью.ОчиститьСсылки(Макет);
	КонецЕсли;
	
КонецПроцедуры

// Функция - Параметры трудового договора
//   
//
// Возвращаемое значение:
//   Пустая Структура для заполнения данными 
//
Функция ПараметрыТрудовогоДоговора()
	
	ПараметрыДанные = Новый Структура;
	
	ПараметрыДанные.Вставить("Организация", Справочники.Организации);
	ПараметрыДанные.Вставить("ФИОДиректора", Справочники.Сотрудники);
	ПараметрыДанные.Вставить("ДолжностьДиректора", "");
	ПараметрыДанные.Вставить("АдресОрганизации", "");
	
	Возврат ПараметрыДанные;
КонецФункции 


//////////////////////////////////////////////////////////////////////////////////////////////////// { WORD БСП Клиент-Сервер 
  
