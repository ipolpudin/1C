
//////////////////////////////////////////////////////////////////////////////////////////////////// { WORD БСП Клиент-Сервер 
//Работает только если подключать в дополнительный отчет!!!!!!!!!!!
//https://disk.yandex.ru/d/cDxaYGvbsJZrdQ

//Доп. литература
//https://fastcode.im/Templates/7180/primer-formirovaniya-vneshnej-pechatnoj-formy-iz-maketa-word-bsp
//https://drive.google.com/file/d/1HPes477SNKEY8MCsHGWHsg_6FjmiIyBr/view


Функция СведенияОВнешнейОбработке() Экспорт
	
	// Стандартное описание сведений о внешней печатной форме

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
	
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Наименование = "Военкомат";
	
	ПараметрыРегистрации.Назначение.Добавить("Документ.ПриемНаРаботу");
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Военкомат";   //Синоним
	НоваяКоманда.Идентификатор = "Военкомат";   //ПолноеИмя
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
		
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры


// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Военкомат") Тогда
		ПечатьДокумента(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати);
	КонецЕсли;
	
КонецПроцедуры // Печать()  

Процедура ПечатьДокумента(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати) Экспорт
	
	Если ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		Для Каждого Сотрудник Из МассивОбъектов Цикл 
			СсылкиНаДокПриемНаРаботу = Новый Массив;
			
			СсылкаНаДокПриемНаРаботу = НахождениеПриемНаРаботуПоСотруднику(Сотрудник);
			СсылкаНаДокПриемНаРаботу.Следующий();
			
			СсылкиНаДокПриемНаРаботу.Добавить(СсылкаНаДокПриемНаРаботу.Ссылка);
			Если  Не ЗначениеЗаполнено(СсылкаНаДокПриемНаРаботу.Ссылка) Тогда
				Прервать;
			КонецЕсли;
			
			СтруктураДанныхЗаполнения = ДанныеДляПечатиТрудовогоДоговора(СсылкиНаДокПриемНаРаботу,"Военкомат");
			ВывестиДанныеДокументаВТабличныйДокумент(КоллекцияПечатныхФорм, СтруктураДанныхЗаполнения, ОбъектыПечати);
			
		КонецЦикла;
	Иначе
		Для Каждого Ссылка Из МассивОбъектов Цикл 
			Ссылки = Новый Массив;
			Ссылки.Добавить(Ссылка); 
			
			СтруктураДанныхЗаполнения = ДанныеДляПечатиТрудовогоДоговора(Ссылки,"Военкомат");
			ВывестиДанныеДокументаВТабличныйДокумент(КоллекцияПечатныхФорм, СтруктураДанныхЗаполнения, ОбъектыПечати);
			
			Ссылки.Очистить();
		КонецЦикла;	
	КонецЕсли;          
	
КонецПроцедуры  

Процедура ВывестиДанныеДокументаВТабличныйДокумент(КоллекцияПечатныхФорм, СтруктураДанныхЗаполнения, ОбъектыПечати)
	
	ДвоичныеДанныеМакета = ПолучитьМакет("Военкомат");
	
	Если ДвоичныеДанныеМакета <> Неопределено Тогда
		
		// Инициализируем печатную форму	
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Военкомат");
		
		// Наличие пустого табличного документа в коллекции обязательно
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакета,Неопределено);
		ПечатнаяФормаДокумента = УправлениеПечатью.ИнициализироватьПечатнуюФорму(Неопределено, Макет.НастройкиСтраницыМакета, Макет);		
		
				
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////Новая
		
		ОписаниеОбластей = Новый Структура;
		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Общая", "Общая");
		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул", "ВерхнийКолонтитул");
		
		Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей["ВерхнийКолонтитул"]);
		УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФормаДокумента, Область, СтруктураДанныхЗаполнения, Ложь);

		
		Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей["Общая"]);
		УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФормаДокумента, Область, СтруктураДанныхЗаполнения, Ложь);

		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////Новая
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьЗаголовок);
		//УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения, Ложь); 
		//
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьВерхнийКолонтитул);  
		//УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения);
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьНижнийКолонтитул);
		//УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения); 
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьШапкаТаблицы);
		//УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФормаДокумента, Область, Ложь);
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьСтрокаТаблицы);
		//УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения.ТаблицаДанных); 
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьНумерованныйСписка);
		//УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения.ТаблицаДанных);
		//
		//Область = УправлениеПечатью.ОбластьМакета(Макет, ОбластьМаркированногоСписка);
		//УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФормаДокумента, Область, МассивДанныхЗаполнения.ТаблицаДанных);
		
		// Поместим получившийся документ в коллекцию печатных форм, в раздел ОфисныеДокументы
		// так БСП поймет что нужно открывать Word при формировании печатной формы
		
		АдресХранилищаОфисныйДокумент = УправлениеПечатью.СформироватьДокумент(ПечатнаяФормаДокумента);
		
		
		ОфисныеДокументы = Новый Соответствие;
		
		ОфисныеДокументы.Вставить(АдресХранилищаОфисныйДокумент, НСтр("ru = 'Название документа'"));
		
		ПечатнаяФорма.СинонимМакета    = НСтр("ru = 'Название документа (документ Microsoft Word)'");
		ПечатнаяФорма.ОфисныеДокументы = ОфисныеДокументы;
		
		УправлениеПечатью.ОчиститьСсылки(ПечатнаяФормаДокумента, Ложь);
		УправлениеПечатью.ОчиститьСсылки(Макет);
	КонецЕсли;
	
КонецПроцедуры

Функция ВоинскийУчетДанные (ФизическоеЛицо)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВоинскийУчетСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВоинскийУчетСрезПоследних.ВУС КАК ВУС,
	|	ВоинскийУчетСрезПоследних.Звание КАК Звание,
	|	ВоинскийУчетСрезПоследних.Военкомат КАК Военкомат
	|ИЗ
	|	РегистрСведений.ВоинскийУчет.СрезПоследних(&Период, ) КАК ВоинскийУчетСрезПоследних
	|ГДЕ
	|	ВоинскийУчетСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции 

Функция ПаспортныеДанные (ФизическоеЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК Физлицо,
		|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Период, ) КАК ДокументыФизическихЛицСрезПоследних
		|ГДЕ
		|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Физлицо";
	
	Запрос.УстановитьПараметр("Физлицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
КонецФункции

Функция ДанныеДляПечатиТрудовогоДоговора(МассивОбъектов, ИмяМакета)
	
	МассивПараметров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Номер КАК ПриказОПриемеНомер,
		|	ПриемНаРаботу.Дата КАК ПриказОПриемеДата,
		|	ПриемНаРаботу.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ПриемНаРаботу.Организация.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.Должность,
		|	ПриемНаРаботу.Подразделение,
		|	ПриемНаРаботу.ВидЗанятости,
		|	ПриемНаРаботу.ТрудовойДоговорНомер,
		|	ПриемНаРаботу.ТрудовойДоговорДата,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.ДатаПриема,
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Организация,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботу.РазрешениеНаРаботу,
		|	ПриемНаРаботу.РазрешениеНаПроживание,
		|	ПриемНаРаботу.УсловияОказанияМедпомощи,
		|	ПриемНаРаботу.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботу.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботу.ИныеУсловияДоговора,
		|	ПриемНаРаботу.ГрафикРаботы,
		|	ПриемНаРаботу.РазрядКатегория
		|ПОМЕСТИТЬ ВТДанныеПриказаОПриеме
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Номер,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Дата,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Организация.НаименованиеПолное,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Организация.НаименованиеСокращенное,
		|	ПриемНаРаботуСпискомСотрудники.Сотрудник,
		|	ПриемНаРаботуСпискомСотрудники.Должность,
		|	ПриемНаРаботуСпискомСотрудники.Подразделение,
		|	ПриемНаРаботуСпискомСотрудники.ВидЗанятости,
		|	ПриемНаРаботуСпискомСотрудники.ТрудовойДоговорНомер,
		|	ПриемНаРаботуСпискомСотрудники.ТрудовойДоговорДата,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Руководитель,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.ДолжностьРуководителя,
		|	ПриемНаРаботуСпискомСотрудники.ДатаПриема,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Организация,
		|	ПриемНаРаботуСпискомСотрудники.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботуСпискомСотрудники.РазрешениеНаРаботу,
		|	ПриемНаРаботуСпискомСотрудники.РазрешениеНаПроживание,
		|	ПриемНаРаботуСпискомСотрудники.УсловияОказанияМедпомощи,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботуСпискомСотрудники.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботуСпискомСотрудники.ИныеУсловияДоговора,
		|	ПриемНаРаботуСпискомСотрудники.ГрафикРаботы,
		|	ПриемНаРаботуСпискомСотрудники.РазрядКатегория
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
		|ГДЕ
		|	ПриемНаРаботуСпискомСотрудники.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДанныеПриказаОПриеме.Сотрудник,
		|	ДанныеПриказаОПриеме.ДатаПриема КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПриказаОПриеме.Руководитель КАК ФизическоеЛицо,
		|	ДанныеПриказаОПриеме.ДатаПриема КАК Период
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме";
	
	Запрос.Выполнить();
	
	// Получение кадровых данных сотрудника.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	КадровыеДанные = "ФИОПолные,ФамилияИО,АдресПоПропискеПредставление,ДокументПредставление,Пол,Страна,КоличествоДнейОтпускаОбщее,КлассУсловийТруда";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	// Получение ФИО руководителей.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		"ВТФизическиеЛицаПериоды");
	КадровыеДанные = "ФИОПолные,ФамилияИО,Пол";
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	ТаблицаНачислений = КадровыйУчет.ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", , , , Ложь, Истина);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПриказаОПриеме.Организация,
		|	ДанныеПриказаОПриеме.ПриказОПриемеДата КАК Период
		|ИЗ
		|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме";
	
	СведенияОбОрганизациях = Новый ТаблицаЗначений;
	СведенияОбОрганизациях.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СведенияОбОрганизациях.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СведенияОбОрганизациях.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("НаименованиеСокращенное", Новый ОписаниеТипов("Строка"));    
	СведенияОбОрганизациях.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ТелефонОрганизации", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ФаксОрганизации", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресЮридический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресФактический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияГородФактическогоАдреса", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОГРН", Новый ОписаниеТипов("Строка"));//сэ Полудин И.С
	
	РезультатЗапросаПоШапке = Запрос.Выполнить();
	
	АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(РезультатЗапросаПоШапке.Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Выборка = РезультатЗапросаПоШапке.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаСведенияОбОрганизациях = СведенияОбОрганизациях.Добавить();
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "ФаксОрганизации");
		Сведения.Добавить("", "НаимЮЛСокр");
		Сведения.Добавить("", "ОГРН");//сэ Полпудин И.С

		УстановитьПривилегированныйРежим(Истина);
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
		УстановитьПривилегированныйРежим(Ложь);
		
		НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
		НоваяСтрокаСведенияОбОрганизациях.Период = Выборка.Период;
		НоваяСтрокаСведенияОбОрганизациях.НаименованиеПолное = ОргСведения.НаимЮЛПол;
		НоваяСтрокаСведенияОбОрганизациях.ИНН = ОргСведения.ИННЮЛ;
		НоваяСтрокаСведенияОбОрганизациях.КПП = ОргСведения.КППЮЛ;
		НоваяСтрокаСведенияОбОрганизациях.ТелефонОрганизации = ОргСведения.ТелОрганизации;
		НоваяСтрокаСведенияОбОрганизациях.ФаксОрганизации = ОргСведения.ФаксОрганизации;
		НоваяСтрокаСведенияОбОрганизациях.НаименованиеСокращенное = ОргСведения.НаимЮЛСокр;
		НоваяСтрокаСведенияОбОрганизациях.ОГРН = ОргСведения.ОГРН;//сэ Полпудин И.С

		ОписаниеЮридическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			Выборка.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресЮридический = ОписаниеЮридическогоАдреса.Представление;
		
		ОписаниеФактическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			Выборка.Организация,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресФактический = ОписаниеФактическогоАдреса.Представление;
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса = ОписаниеФактическогоАдреса.Город;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СведенияОбОрганизациях", СведенияОбОрганизациях);
	//СведенияОбОрганизациях.ОГРН КАК ОГРН //сэ Полпудин И.С
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбОрганизациях.Период КАК Период,
		|	СведенияОбОрганизациях.Организация КАК Организация,
		|	СведенияОбОрганизациях.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	СведенияОбОрганизациях.ТелефонОрганизации КАК ТелефонОрганизации,
		|	СведенияОбОрганизациях.ФаксОрганизации КАК ФаксОрганизации,
		|	СведенияОбОрганизациях.ИНН КАК ИНН,
		|	СведенияОбОрганизациях.КПП КАК КПП,
		|	СведенияОбОрганизациях.АдресЮридический КАК ОрганизацияАдресЮридический,
		|	СведенияОбОрганизациях.АдресФактический КАК ОрганизацияАдресФактический,
		|	СведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса,
		|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное
		|ПОМЕСТИТЬ ВТДанныеОрганизаций
		|ИЗ
		|	&СведенияОбОрганизациях КАК СведенияОбОрганизациях
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПриказаОПриеме.Ссылка КАК Ссылка,
		|	ДанныеПриказаОПриеме.ПриказОПриемеНомер КАК ПриказОПриемеНомер,
		|	ДанныеПриказаОПриеме.ПриказОПриемеДата КАК ПриказОПриемеДата,
		|	ДанныеПриказаОПриеме.Подразделение КАК Подразделение,
		|	ДанныеПриказаОПриеме.Должность КАК Должность,
		|	ДанныеПриказаОПриеме.Сотрудник КАК Сотрудник,
		|	ДанныеПриказаОПриеме.ВидЗанятости КАК ВидЗанятости,
		|	ДанныеПриказаОПриеме.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,
		|	ДанныеПриказаОПриеме.ТрудовойДоговорДата КАК ТрудовойДоговорДата,
		|	ДанныеПриказаОПриеме.ДолжностьРуководителя КАК РуководительДолжность,
		|	ДанныеПриказаОПриеме.ДатаПриема КАК ДатаПриема,
		|	ДанныеПриказаОПриеме.ДатаЗавершенияТрудовогоДоговора КАК ДатаЗавершенияТрудовогоДоговора,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА """"
		|		ИНАЧЕ ДанныеПриказаОПриеме.РазрешениеНаРаботу
		|	КОНЕЦ КАК РазрешениеНаРаботу,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА """"
		|		ИНАЧЕ ДанныеПриказаОПриеме.РазрешениеНаПроживание
		|	КОНЕЦ КАК РазрешениеНаПроживание,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА """"
		|		ИНАЧЕ ДанныеПриказаОПриеме.УсловияОказанияМедпомощи
		|	КОНЕЦ КАК УсловияОказанияМедпомощи,
		|	ДанныеПриказаОПриеме.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
		|	ДанныеПриказаОПриеме.ОборудованиеРабочегоМеста КАК ОборудованиеРабочегоМеста,
		|	ДанныеПриказаОПриеме.ИныеУсловияДоговора КАК ИныеУсловияДоговора,
		|	ДанныеОрганизаций.Организация КАК Организация,
		|	ДанныеОрганизаций.ОрганизацияНаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ДанныеОрганизаций.ТелефонОрганизации КАК ТелефонОрганизации,
		|	ДанныеОрганизаций.ФаксОрганизации КАК ФаксОрганизации,
		|	ДанныеОрганизаций.ОрганизацияАдресЮридический КАК ОрганизацияАдресЮридический,
		|	ДанныеОрганизаций.ОрганизацияАдресФактический КАК ОрганизацияАдресФактический,
		|	ДанныеОрганизаций.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса,
		|	КадровыеДанныеСотрудников.Страна КАК Страна,
		|	КадровыеДанныеФизическихЛиц.ФИОПолные КАК РуководительФИОПолные,
		|	КадровыеДанныеФизическихЛиц.ФамилияИО КАК РуководительФамилияИО,
		|	КадровыеДанныеФизическихЛиц.Пол КАК РуководительПол,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
		|	КадровыеДанныеСотрудников.ФамилияИО КАК ФамилияИО,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	КадровыеДанныеСотрудников.АдресПоПропискеПредставление КАК АдресПоПропискеПредставление,
		|	КадровыеДанныеСотрудников.ДокументПредставление КАК ДокументПредставление,
		|	КадровыеДанныеСотрудников.КоличествоДнейОтпускаОбщее КАК КоличествоДнейОтпускаОбщее,
		|	КадровыеДанныеСотрудников.КлассУсловийТруда КАК КлассУсловийТруда,
		|	ДанныеПриказаОПриеме.ГрафикРаботы КАК ГрафикРаботы,
		|	ДанныеПриказаОПриеме.РазрядКатегория КАК РазрядКатегория,
		|	ДанныеОрганизаций.НаименованиеСокращенное КАК НаименованиеСокращенное
		|ИЗ
		|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОрганизаций КАК ДанныеОрганизаций
		|		ПО ДанныеПриказаОПриеме.Организация = ДанныеОрганизаций.Организация
		|			И ДанныеПриказаОПриеме.ПриказОПриемеДата = ДанныеОрганизаций.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
		|		ПО ДанныеПриказаОПриеме.Руководитель = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
		|			И ДанныеПриказаОПриеме.ДатаПриема = КадровыеДанныеФизическихЛиц.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПриказаОПриеме.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеПриказаОПриеме.ДатаПриема = КадровыеДанныеСотрудников.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПаспортныеДанные = ПаспортныеДанные(Выборка.Сотрудник.ФизическоеЛицо);              ВыборкаПаспортныеДанные.Следующий();
		ВыборкаВоинскийУчетДанные = ВоинскийУчетДанные(Выборка.Сотрудник.ФизическоеЛицо);          ВыборкаВоинскийУчетДанные.Следующий();
		
		ПараметрыТрудовогоДоговора = ПараметрыТрудовогоДоговора();
		ЗаполнитьЗначенияСвойств(ПараметрыТрудовогоДоговора, Выборка);
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ПараметрыТрудовогоДоговора.РуководительФИОПолные), 2, РезультатСклонения, ПараметрыТрудовогоДоговора.РуководительПол) Тогда
			ПараметрыТрудовогоДоговора.РуководительФИОПолные = РезультатСклонения
		КонецЕсли;		
		ПараметрыТрудовогоДоговора.РуководительДолжностьВПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ПараметрыТрудовогоДоговора.РуководительДолжность), 2);
		
		ПараметрыТрудовогоДоговора.ТрудовойДоговорДата = Формат(Выборка.ТрудовойДоговорДата, "ДЛФ=DD; ДП='""___"" ____________ 20___ г.'");
		//ПараметрыТрудовогоДоговора.ПриказОПриемеДата = Формат(Выборка.ПриказОПриемеДата, "ДЛФ=D; ДЛФ=DD");
		ПараметрыТрудовогоДоговора.ПриказОПриемеДата = Выборка.ПриказОПриемеДата;//сэ Полпудин И.С
		//{ SFX (Марендыч А.А., 02.08.2017) 
		//	Примечание: Заполняем параметры шапки
		ПараметрыТрудовогоДоговора.ДатаПриемаСПО 	= Формат(Выборка.ДатаПриема, "ДЛФ=DD") + ?(ЗначениеЗаполнено(Выборка.ДатаЗавершенияТрудовогоДоговора)," по " + Формат(Выборка.ДатаЗавершенияТрудовогоДоговора, "ДЛФ=DD"),"");
		ПараметрыТрудовогоДоговора.ДатаПриема 		= Формат(Выборка.ДатаПриема, "ДЛФ=DD"); 
		ДатаПриемаЗМесяца 					  		= ДобавитьМесяц(Выборка.ДатаПриема,3);
		ПараметрыТрудовогоДоговора.ДатаПриемаЗМесяца 		 = Формат(ДатаПриемаЗМесяца, "ДЛФ=DD"); 
		ПараметрыТрудовогоДоговора.ПодразделениеНаименование = Выборка.Подразделение.Наименование; 
		ПараметрыТрудовогоДоговора.ДатаРожд 			 = Формат(Выборка.Сотрудник.ФизическоеЛицо.ДатаРождения, "ДЛФ=D"); 
		//ПараметрыТрудовогоДоговора.ДатаРождения 			 = Выборка.Сотрудник.ФизическоеЛицо.ДатаРождения;//сэ Полпудин И.С
		ПараметрыТрудовогоДоговора.ФизическоеЛицоИНН 		 = Выборка.Сотрудник.ФизическоеЛицо.ИНН;
		ПараметрыТрудовогоДоговора.ФизическоеЛицоСтраховойНомерПФР 	= Выборка.Сотрудник.ФизическоеЛицо.СтраховойНомерПФР;
		ПараметрыТрудовогоДоговора.РазрядКатегория 					= Выборка.РазрядКатегория;  
		ОплатаТрудаНадбавка 										= "";
		ПараметрыТрудовогоДоговора.ОрганизацияГородФактическогоАдреса = "";
		//} SFX 
		
		//{сэ Полпудин И.С 
		ПараметрыТрудовогоДоговора.ОрганизацияТелефон = Выборка.ТелефонОрганизации;
		ПараметрыТрудовогоДоговора.ОрганизацияФакс = Выборка.ФаксОрганизации;
		ПараметрыТрудовогоДоговора.ОГРН = Выборка.Организация.ОГРН;
		ПараметрыТрудовогоДоговора.ОКПО = Выборка.Организация.КодПоОКПО;
		ПараметрыТрудовогоДоговора.ИНН = Выборка.Организация.ИНН;
		ПараметрыТрудовогоДоговора.КПП = Выборка.Организация.КПП;
		
		////// Паспортные данные
		ПараметрыТрудовогоДоговора.СерияПаспорта = ВыборкаПаспортныеДанные.Серия;
		ПараметрыТрудовогоДоговора.НомерПаспорта = ВыборкаПаспортныеДанные.Номер;
		ПараметрыТрудовогоДоговора.КемВыдан = ВыборкаПаспортныеДанные.КемВыдан;
		ПараметрыТрудовогоДоговора.ДатаВыдачи = ВыборкаПаспортныеДанные.ДатаВыдачи;
		////// Паспортные данные
		
		////// Военкомат
		ПараметрыТрудовогоДоговора.Звание = ВыборкаВоинскийУчетДанные.Звание;
		ПараметрыТрудовогоДоговора.ВУС = ВыборкаВоинскийУчетДанные.ВУС;
		ПараметрыТрудовогоДоговора.Военкомат = ВыборкаВоинскийУчетДанные.Военкомат;
		////// Военкомат  
		
		//////////Приказ
		ПараметрыТрудовогоДоговора.ПриказДень = Строка(День(Выборка.ПриказОПриемеДата));
		ПараметрыТрудовогоДоговора.ПриказМесяц = Строка(Формат(Выборка.ПриказОПриемеДата, "ДФ=MMMM"));
		ПараметрыТрудовогоДоговора.ПриказГод = Прав(Строка(Год(Выборка.ПриказОПриемеДата)),2);
		//////////Приказ
		//}сэ Полпудин И.С
		
		ОплатаТруда = "";
		СтрокиНачислений = ТаблицаНачислений.НайтиСтроки(Новый Структура("Сотрудник,Период", Выборка.Сотрудник, Выборка.ДатаПриема));
		Если СтрокиНачислений.Количество() > 0 Тогда
			
			Если Не ПустаяСтрока(СтрокиНачислений[0].ОписаниеОклада) Тогда
				ОплатаТруда = СтрокиНачислений[0].ОписаниеОклада;
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СтрокиНачислений[0].Надбавка) Тогда
				//{ SFX (Марендыч А.А., 02.08.2017) 
				//	Примечание: Вместо
				//ОплатаТруда = ?(ПустаяСтрока(ОплатаТруда), "", ОплатаТруда + "; ") + СтрокиНачислений[0].Надбавка;
				ОплатаТрудаНадбавка = СтрокиНачислений[0].Надбавка; 				
				//} SFX
			КонецЕсли;
			
		КонецЕсли;
	
		Если СтрНайти(ОплатаТруда,"Оклад: ") <> 0 Тогда 
			ОплатаТрудаП = " должностной оклад "; 
		Иначе
			ОплатаТрудаП = " часовая тарифная ставка ";
		КонецЕсли;
			
		ОплатаТруда = СтрЗаменить(ОплатаТруда,"Оклад: ","");
		ОплатаТруда = СтрЗаменить(ОплатаТруда,"Тарифная ставка (часовая): ","");
		ОплатаТруда = СтрЗаменить(ОплатаТруда," rub.","");//сэ Иван И.С
		ОплатаТруда = СтрЗаменить(ОплатаТруда," руб.","");//сэ Иван И.С


		ПараметрыТрудовогоДоговора.ОплатаТруда = ОплатаТрудаП;
		ПараметрыТрудовогоДоговора.РазмерОплатыТруда = ОплатаТруда;
		//ПараметрыТрудовогоДоговора.РазмерОплатыТруда = СтрокиНачислений[0].ОписаниеОклада;//сэ Иван И.С

		//Если ОплатаТрудаНадбавка <> "" Тогда
		//	ПараметрыТрудовогоДоговора.УсловияОплатыТруда = ПараметрыТрудовогоДоговора.УсловияОплатыТруда + " и надбавка в размере " + ОплатаТрудаНадбавка;
		//Конецесли;
		// график работы                
		//Если Выборка.ГрафикРаботы.СпособЗаполнения = перечисления.СпособыЗаполненияГрафиковРаботыСотрудников.ПоНеделям Тогда
		//	//Если Выборка.ГрафикРаботы.ДлительностьРабочейНедели = 40 Тогда 
		//	ПараметрыТрудовогоДоговора.ГрафикРаботы = "пятидневка"; 
		//Иначе
			ПараметрыТрудовогоДоговора.ГрафикРаботы = Выборка.ГрафикРаботы;
		//КонецЕсли;
		Если ПараметрыТрудовогоДоговора.ОрганизацияАдресФактический = "" Тогда 
			 ПараметрыТрудовогоДоговора.ОрганизацияАдресФактический = ПараметрыТрудовогоДоговора.ОрганизацияАдресЮридический;
		КонецЕсли;
		//} SFX
		 		 
		 
		 Если ЗначениеЗаполнено(Выборка.КлассУсловийТруда) Тогда
			
			Если Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Оптимальный Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru='оптимальными'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru='1 класс'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Допустимый Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru='допустимыми'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru='2 класс'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1 Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru='вредными'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru='3 класс, подкласс 3.1 (вредные условия труда 1 степени)'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2 Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru='вредными'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru='3 класс, подкласс 3.2 (вредные условия труда 2 степени)'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3 Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru='вредными'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru='3 класс, подкласс 3.3 (вредные условия труда 3 степени)'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4 Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru='вредными'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru='3 класс, подкласс 3.4 (вредные условия труда 4 степени)'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru='опасными'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru='4 класс'");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыТрудовогоДоговора.УсловияТруда) Тогда
			
			ПараметрыТрудовогоДоговора.УсловияТруда = "_____________";
			ПараметрыТрудовогоДоговора.КлассУсловий = "_____________";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ОснованиеПредставителяНанимателя) Тогда
			ПараметрыТрудовогоДоговора.ОснованиеРуководителя = Выборка.ОснованиеПредставителяНанимателя;
		Иначе
			//{ SFX (Марендыч А.А., 02.08.2017) 
			//	Примечание: вместо
			ПараметрыТрудовогоДоговора.ОснованиеРуководителя = ""; 			
			//} SFX
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ОборудованиеРабочегоМеста) Тогда
			ПараметрыТрудовогоДоговора.ОборудованиеРабочегоМеста = " (" + Выборка.ОборудованиеРабочегоМеста + ")"
		Иначе
			ПараметрыТрудовогоДоговора.ОборудованиеРабочегоМеста = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИныеУсловияДоговора) Тогда
			
			Если ИмяМакета = "ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе" Тогда
				ПараметрыТрудовогоДоговора.ИныеУсловияДоговора = "8.5.";
			Иначе
				ПараметрыТрудовогоДоговора.ИныеУсловияДоговора = "7.3.";
			КонецЕсли;
			
			ПараметрыТрудовогоДоговора.ИныеУсловияДоговора = ПараметрыТрудовогоДоговора.ИныеУсловияДоговора + " " + Выборка.ИныеУсловияДоговора + ".";
			
		Иначе
			ПараметрыТрудовогоДоговора.ИныеУсловияДоговора = "";
		КонецЕсли;
		
		Если Выборка.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
			ПараметрыТрудовогоДоговора.ВидЗанятостиПоДоговору = НСтр("ru='основным местом работы'");
		Иначе
			ПараметрыТрудовогоДоговора.ВидЗанятостиПоДоговору = НСтр("ru='местом работы по совместительству'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаЗавершенияТрудовогоДоговора) Тогда
			
			ПараметрыТрудовогоДоговора.СрокДействияПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='на срок до %1'"),
				Формат(Выборка.ДатаЗавершенияТрудовогоДоговора, "ДЛФ=DD"));
				
			Если Прав(ПараметрыТрудовогоДоговора.СрокДействияПредставление, 1) = "." Тогда
				ПараметрыТрудовогоДоговора.СрокДействияПредставление =
					Лев(ПараметрыТрудовогоДоговора.СрокДействияПредставление, СтрДлина(ПараметрыТрудовогоДоговора.СрокДействияПредставление) - 1);
			КонецЕсли;
				
		Иначе
			ПараметрыТрудовогоДоговора.СрокДействияПредставление = НСтр("ru='на неопределенный срок'");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыТрудовогоДоговора.КоличествоДнейОтпускаОбщее) Тогда
			ПараметрыТрудовогоДоговора.КоличествоДнейОтпускаОбщее = "____";
		КонецЕсли;
		
		Если ПараметрыТрудовогоДоговора.Страна <> Справочники.СтраныМира.Россия Тогда
			
			Если Не ЗначениеЗаполнено(ПараметрыТрудовогоДоговора.РазрешениеНаРаботу) Тогда
				ПараметрыТрудовогоДоговора.РазрешениеНаРаботу = Символы.ПС
					+ "______________________________________________________________________________________";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПараметрыТрудовогоДоговора.РазрешениеНаПроживание) Тогда
				ПараметрыТрудовогоДоговора.РазрешениеНаПроживание = Символы.ПС
					+ "______________________________________________________________________________________";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПараметрыТрудовогоДоговора.УсловияОказанияМедпомощи) Тогда
				ПараметрыТрудовогоДоговора.УсловияОказанияМедпомощи = Символы.ПС
					+ "______________________________________________________________________________________";
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.РуководительДолжность) Тогда
			ПараметрыТрудовогоДоговора.РуководительДолжность = "";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.РуководительФамилияИО) Тогда
			ПараметрыТрудовогоДоговора.РуководительФамилияИО = "";
		КонецЕсли;
		
			
	КонецЦикла;
	
	Возврат ПараметрыТрудовогоДоговора;
	
КонецФункции

Функция ПараметрыТрудовогоДоговора()
	
	
	
	
	ПараметрыДанные = Новый Структура;
	
	ПараметрыДанные.Вставить("Ссылка", Неопределено);
	ПараметрыДанные.Вставить("ПриказОПриемеНомер", "");
	ПараметрыДанные.Вставить("ПриказОПриемеДата", '00010101');
	ПараметрыДанные.Вставить("ОрганизацияНаименованиеПолное", "");
	//Параметры.Вставить("ИННКПП", "");
	//Параметры.Вставить("ОрганизацияТелефон", "");
	ПараметрыДанные.Вставить("ОрганизацияАдресЮридический", "");
	ПараметрыДанные.Вставить("ОрганизацияАдресФактический", "");
	ПараметрыДанные.Вставить("ОрганизацияГородФактическогоАдреса", "");
	ПараметрыДанные.Вставить("Сотрудник", Справочники.Сотрудники.ПустаяСсылка());
	ПараметрыДанные.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ПараметрыДанные.Вставить("Должность", Справочники.Должности.ПустаяСсылка());
	ПараметрыДанные.Вставить("ВидЗанятостиПоДоговору", "");
	ПараметрыДанные.Вставить("ТрудовойДоговорНомер", "");
	ПараметрыДанные.Вставить("ТрудовойДоговорДата", '00010101');
	ПараметрыДанные.Вставить("СрокДействияПредставление", "");
	ПараметрыДанные.Вставить("РуководительФамилияИО", "");
	ПараметрыДанные.Вставить("РуководительФИОПолные", "");
	ПараметрыДанные.Вставить("РуководительПол");
	ПараметрыДанные.Вставить("РуководительДолжность", Справочники.Должности.ПустаяСсылка());
	ПараметрыДанные.Вставить("ДатаПриема", '00010101');
	ПараметрыДанные.Вставить("ФИОПолные", "");
	ПараметрыДанные.Вставить("ФамилияИО", "");
	ПараметрыДанные.Вставить("Пол");
	ПараметрыДанные.Вставить("КлассУсловийТруда");
	ПараметрыДанные.Вставить("УсловияТруда", "");
	
	ПараметрыДанные.Вставить("КлассУсловий", "");
	ПараметрыДанные.Вставить("АдресПоПропискеПредставление", "");
	//Параметры.Вставить("ДокументПредставление", "");
	ПараметрыДанные.Вставить("Страна", Справочники.СтраныМира.Россия);
	ПараметрыДанные.Вставить("РазрешениеНаРаботу", "");
	ПараметрыДанные.Вставить("РазрешениеНаПроживание", "");
	ПараметрыДанные.Вставить("УсловияОказанияМедпомощи", "");
	ПараметрыДанные.Вставить("КоличествоДнейОтпускаОбщее", "");
	ПараметрыДанные.Вставить("ОснованиеРуководителя", "");
	ПараметрыДанные.Вставить("ОборудованиеРабочегоМеста", "");
	ПараметрыДанные.Вставить("ИныеУсловияДоговора", "");
	ПараметрыДанные.Вставить("РуководительДолжностьВПадеже", "");
	ПараметрыДанные.Вставить("УсловияОплатыТруда");
	//{ SFX (Марендыч А.А., 02.08.2017) 
	//	Примечание: Добавляем свои параметры  
	ПараметрыДанные.Вставить("ДатаПриемаСПО", "");
	ПараметрыДанные.Вставить("ДатаПриемаЗМесяца", "");
	ПараметрыДанные.Вставить("ПодразделениеНаименование", "");
	ПараметрыДанные.Вставить("ДатаРожд", '00010101');
	ПараметрыДанные.Вставить("ФизическоеЛицоИНН", "");
	ПараметрыДанные.Вставить("ФизическоеЛицоСтраховойНомерПФР", ""); 	
	ПараметрыДанные.Вставить("РазрядКатегория", ""); 
	ПараметрыДанные.Вставить("ГрафикРаботы", "");
	ПараметрыДанные.Вставить("НаименованиеСокращенное", "");
	ПараметрыДанные.Вставить("ОплатаТруда", "");
	ПараметрыДанные.Вставить("РазмерОплатыТруда", "");
	//} SFX	
	
	//{сэ (Полпудин И.С 26.01.2023)
	ПараметрыДанные.Вставить("ОГРН", "");
	ПараметрыДанные.Вставить("ОКПО", "");
	ПараметрыДанные.Вставить("ИНН", "");
	ПараметрыДанные.Вставить("КПП", "");
	ПараметрыДанные.Вставить("ОрганизацияТелефон", "");
	ПараметрыДанные.Вставить("ОрганизацияФакс", "");
	
	////// Паспорт
	ПараметрыДанные.Вставить("СерияПаспорта", ""); 
	ПараметрыДанные.Вставить("НомерПаспорта", "");
	ПараметрыДанные.Вставить("КемВыдан", "");
	ПараметрыДанные.Вставить("ДатаВыдачи", "");
	//////  Паспорт
	
	////// Военкомат
	ПараметрыДанные.Вставить("Звание", "");
	ПараметрыДанные.Вставить("ВУС", "");
	ПараметрыДанные.Вставить("Военкомат", "");
	////// Военкомат    
	
	//////////Приказ     
	ПараметрыДанные.Вставить("ПриказДень", "");
	ПараметрыДанные.Вставить("ПриказГод", "");
	ПараметрыДанные.Вставить("ПриказМесяц", "");
	//////////Приказ
	
	//} сэ Полпудин И.С
	Возврат ПараметрыДанные;
КонецФункции 
        
Функция НахождениеПриемНаРаботуПоСотруднику(Сотрудник)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка КАК Ссылка,
		|	ПриемНаРаботу.Сотрудник.Ссылка КАК СотрудникСсылка
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Сотрудник.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////// { WORD БСП Клиент-Сервер 
  
