//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                            XDTO
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Минимальный 1 - обязательно должно быть значение
Минимальный 0 - может не быть значения
Максимальный -1 - неограниченное число значений(например строк в ТЧ)
Неоходим для Сериализации/Десериализации XML-Документа. При Сериализации/Десериализации XML-Документа XDTO может создаваться явно в пакете или неявно. 

ПакетXDTO -> ФабрикаXDTO -> создание пустого Объекта

///////////////////////////////////////////////////////////
//Запись

Номенклатура = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.xdto-example.org/data", "Справочник.Номенклатура"));//Создается пустой объект по данным пакета XDTO
ЗаполнитьЗначенияСвойств(Номенклатура, Данные, "Наименование,Артикул");// Заполяется объект 
Номенклатура.Ссылка = Строка(Данные.Ссылка.УникальныйИдентификатор());// Заполяется объект 

ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Номенклатура);//Записали в XML(для передачи)


///////////////////////////////////////////////////////////
//Чтение

            ТипОбъектаXDTO = ФабрикаXDTO.Тип(ЧтениеXML.URIПространстваИмен, ЧтениеXML.ЛокальноеИмя);
            ОбъектXDTO     = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO); 
            
            Если ТипОбъектаXDTO.Имя = "Справочник.Номенклатура" Тогда
                Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));	
                ОбъектНоменклатуры = Ссылка.ПолучитьОбъект();
                Если ОбъектНоменклатуры = Неопределено Тогда
                    ОбъектНоменклатуры = Справочники.Номенклатура.СоздатьЭлемент();				
                    ОбъектНоменклатуры.УстановитьСсылкуНового(Ссылка);
                КонецЕсли; 
                ОбъектНоменклатуры.Наименование = ОбъектXDTO.Наименование;
                ОбъектНоменклатуры.Шифт = ОбъектXDTO.Артикул;
                
                ОбъектНоменклатуры.ОбменДанными.Загрузка = Истина;
                ОбъектНоменклатуры.Записать();	
            КонецЕсли;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                            JSON
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Прокси - обращение к внешнему сервису (к фабрике XDTO, и методам внешнего сервиса
WSDL - схема с методами и пакетами XDTO, собирается автоматически. Передается пользователям обмена для установления схемы работы

JSON похож на XML только легче
Возможности:
1) Потоковая Запись и Чтение. Например ЗаписьJSON.ЗаписатьНачалоОбъекта
2) Сериализация данных автоматическая для простых типов(Булево, строка, число ...) не потокавая запись. Например ЗаписьJSON(Запись, Данные)
3)



Возможности(домонстрация)
Пункт 2) 
///////////////////////////////////////////////////////////
//Запись

&НаСервереБезКонтекста
Процедура СериализацияПростыхТиповНаСервере()

//{Создать структуру с данными контрагента. И заполняем данные
Данные = Новый Структура;
Данные.Вставить(″Контрагент″, ″ОАО Топаз″);
Данные.Вставить(″ОбъемПродаж″, 5000000);
// Добавить элемент структуры Телефоны типа Массив.
Телефоны = Новый Массив;
Телефоны.Добавить(″+71112223344″);
Телефоны.Добавить(″+79998887766″);
Данные.Вставить(″Телефоны″, Телефоны);
Данные.Вставить(″Поставщик″, Ложь);
//Создать структуру с данными контрагента. И заполняем данные}

// Создать объект записи и открыть файл, в который будет выполняться запись.
Запись = Новый ЗаписьJSON;
ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
Запись.ОткрытьФайл(″c:\temp\Serialisation.json″,,, ПараметрыЗаписиJSON);

// Выполнить запись данных (Данные) с помощью объекта записи (Запись).
ЗаписатьJSON(Запись, Данные);// Непотоковая запись в файл. С автоматической Сериализацией
// Завершить работу с файлом.

Запись.Закрыть();
КонецПроцедуры

///////////////////////////////////////////////////////////
//Чтение

&НаСервереБезКонтекста
Процедура ДесериализацияПростыхТиповНаСервере()
// Создать объект чтения и открыть файл, из которого будет выполняться чтение.
Чтение = Новый ЧтениеJSON;
Чтение.ОткрытьФайл(″c:\temp\Serialisation.json″);
// Выполнить чтение данных в структуру Данные с помощью объекта чтения (Чтение).
Данные = ПрочитатьJSON(Чтение);
// Завершить работу с файлом.
Чтение.Закрыть();
// Вывести результат чтения в сообщение.
Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ″Контрагент: ″ + Данные.Контрагент + ″, Объем продаж: ″ + Данные.ОбъемПродаж +
″, Поставщик?: ″+ Данные.Поставщик + ″, Телефоны: ″;
// Обойти в цикле элемент структуры данных Телефоны типа Массив.
Для Каждого Телефон Из Данные.Телефоны Цикл
Сообщение.Текст = Сообщение.Текст + Телефон + ″, ″;
КонецЦикла;
Сообщение.Сообщить();
КонецПроцедуры




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                            HTTP
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1) Скорость
2) Необходимо документирование
3) Самостоятельно реализовывать API

 Пункты: 
1) создать  HTTP и его методы
2) Прописать спецификацию API в (общих макетах) в формате JSON. Это документация для проверки переданных параметров в запросе
3) Прописываются методы HTTP

/////////////////////////////////////////////////////////////////////
			Отправка запроса(Куда-то отправляем) 
/////////////////////////////////////////////////////////////////////
Чтобы выполнить HTTP-запрос нужного вида, у объекта HTTPСоединение
существуют методы:
Получить() – отправляет GET-запрос на сервер;
ОтправитьДляОбработки() – отправляет POST-запрос на сервер;
Изменить() – отправляет PATCH-запрос на сервер;
Записать() – отправляет PUT-запрос на сервер;
Удалить() – отправляет DELETE-запрос на сервер;

/////////////////////////////////////////////////////////////////////
			REST
///////////////////////////////////////////////////////////////////// 
REST - в сфере 1С по большей части обозначается объекты конфигурации "HTTP-соединения"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                            WEB
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//https://disk.yandex.ru/d/P2_0z_ilAgQ1_w

1) Проверка XDTO пакетов(проверяем то что нам пришло)
2) Документация SOAP

Пункты:
1) Создаем пакет XDTO
2) Создаем Web-сервис и связываем с пакетом XDTO
3) Добавляем операции и указываем типы возвращаемых значений(Элементарные или из своего пакета XDTO)
4) Описание Процедур WEB-сервиса (отправитель)
5) Создание объекта WS-ссылки и Описание Процедур получения (получатель)

Пункты:
Пункт 4)
//отправителю приходит запрос и параметры получения данных для получение данных
Функция Задачи(Код, Выполнено)
  Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Наименование КАК Описание,
		|	Задачи.Код,
		|	ЕСТЬNULL(Задачи.Сотрудник.Код, """") КАК СотрудникКод,
		|	ЕСТЬNULL(Задачи.Сотрудник.Наименование, """") КАК Имя,
		|	Задачи.Выполнено КАК Выполнено
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	(Задачи.Сотрудник.Код = &Код
		|			ИЛИ &Код = НЕОПРЕДЕЛЕНО)
		|	И (Задачи.Выполнено = &Выполнено
		|			ИЛИ &Выполнено = НЕОПРЕДЕЛЕНО)";
	
	
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Выполнено", Выполнено);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

  //{Через глобальную функцию ФабрикаXDTO присваиваем тип
	ТипСотрудник = ФабрикаXDTO.Тип("tasks","Сотрудник");
	ТипЗадача = ФабрикаXDTO.Тип("tasks","Задача");
	ТипОтвет = ФабрикаXDTO.Тип("tasks","Ответ");
  //Через глобальную функцию ФабрикаXDTO присваиваем тип}

	ОбъектОтвет = ФабрикаXDTO.Создать(ТипОтвет);
	ОбъектОтвет.Успешно = Истина;
	СписокЗадач = ОбъектОтвет.ПолучитьСписок("СписокЗадач");

  //Созадем объект и заполняем его
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектСотрудник = ФабрикаXDTO.Создать(ТипСотрудник);
		ОбъектСотрудник.Код = ВыборкаДетальныеЗаписи.СотрудникКод;
		ОбъектСотрудник.Имя = ВыборкаДетальныеЗаписи.Имя;

		ОбъектЗадача = ФабрикаXDTO.Создать(ТипЗадача);
		ЗаполнитьЗначенияСвойств(ОбъектЗадача, ВыборкаДетальныеЗаписи);
		ОбъектЗадача.Сотрудник = ОбъектСотрудник;
		
		СписокЗадач.Добавить(ОбъектЗадача);
	КонецЦикла;

	Возврат ОбъектОтвет;//возвращаются пакеты
КонецФункции



Функция Добавить(Задача)

	Сотрудник = Справочники.Сотрудники.НайтиПоКоду(Задача.Сотрудник.Код); // SOAP - автоматическая проверка
	
	ТипОтвет = ФабрикаXDTO.Тип("tasks","Ответ");

	ОбъектОтвет = ФабрикаXDTO.Создать(ТипОтвет);
	ОбъектОтвет.Успешно = Истина;
	СписокОшибок = ОбъектОтвет.ПолучитьСписок("СписокОшибок");
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		НоваяЗадача = Справочники.Задачи.СоздатьЭлемент();
		НоваяЗадача.Наименование = Задача.Описание;
		НоваяЗадача.Сотрудник = Сотрудник;
		Если НЕ ПустаяСтрока(Задача.Файл) Тогда		
			НоваяЗадача.ХранениеКартинки = Новый ХранилищеЗначения(Base64Значение(Задача.Файл));
		КонецЕсли;
		НоваяЗадача.Записать();
	Иначе
		ОбъектОтвет.Успешно = Ложь;		
		СписокОшибок.Добавить(СтрШаблон("Не найден сотруднки с кодом ""%1""", Задача.Сотрудник.Код));
	КонецЕсли;

	Возврат ОбъектОтвет;	

КонецФункции

Пункт 5) 

	Прокси = WSСсылки.tasks.СоздатьWSПрокси("tasks","tasks","tasksSoap");
	
	ТипСотрудник = Прокси.ФабрикаXDTO.Тип("tasks","Сотрудник");
	ТипЗадача = Прокси.ФабрикаXDTO.Тип("tasks","Задача");

	ОбъектСотрудник = Прокси.ФабрикаXDTO.Создать(ТипСотрудник);
	ОбъектСотрудник.Код = Объект.Сотрудник;

	ОбъектЗадача = Прокси.ФабрикаXDTO.Создать(ТипЗадача);
	ОбъектЗадача.Описание = Объект.Задача;
	ОбъектЗадача.Сотрудник = ОбъектСотрудник;

	Результат = Прокси.Добавить(ОбъектЗадача);// в результате будет ответ от Отправителя с данными



/////////////////////////////////////////////////////////////////////
			Пример загрузки 
/////////////////////////////////////////////////////////////////////
#Область СборкаТоваров

// [ISPolpudin@1bit.com ZOOM-18 21.08.24
Функция НоваяСтруктураДанныхСборкаТоваров()
	 
	НоменклатураСтруктураДанных = Новый Структура;
	НоменклатураСтруктураДанных.Вставить("бит_SAPVIN",	"");
	НоменклатураСтруктураДанных.Вставить("Артикул",		"");
	
	СкладСтруктураДанных = Новый Структура; 
    СкладСтруктураДанных.Вставить("бит_SAPID",	"");
	
	ОрганизацияСтруктураДанных = Новый Структура; 
    ОрганизацияСтруктураДанных.Вставить("бит_SAPID",	"");
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("бит_SAPID",			"");
	СтруктураДанных.Вставить("Дата",				Дата(1,1,1)); 
	
	СтруктураДанных.Вставить("Организация",			Неопределено);
	СтруктураДанных.Вставить("ОрганизацияСтруктураДанных",			ОрганизацияСтруктураДанных);
	
	СтруктураДанных.Вставить("Склад", 				Неопределено);
	СтруктураДанных.Вставить("СкладСтруктураДанных", 				СкладСтруктураДанных);
	
	СтруктураДанных.Вставить("Номенклатура", 		Неопределено);
	СтруктураДанных.Вставить("НоменклатураСтруктураДанных", 		НоменклатураСтруктураДанных);
	
	СтруктураДанных.Вставить("Количество",			0);
	СтруктураДанных.Вставить("КоличествоУпаковок",	0);
	СтруктураДанных.Вставить("Товары", 				Неопределено);
	
	Возврат СтруктураДанных;
	
КонецФункции // ISPolpudin@1bit.com ZOOM-18 21.08.24]

// [ISPolpudin@1bit.com ZOOM-18 21.08.24
Функция НоваяСтруктураДанныхСборкаТоваровТЧТовары()
	
	НоменклатураСтруктураДанных = Новый Структура;
	НоменклатураСтруктураДанных.Вставить("бит_SAPVIN",	"");
	НоменклатураСтруктураДанных.Вставить("Артикул",		"");
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Количество",			0);
	СтруктураДанных.Вставить("КоличествоУпаковок",	0); 
	
	СтруктураДанных.Вставить("Номенклатура", 		Неопределено);
	СтруктураДанных.Вставить("НоменклатураСтруктураДанных", 	НоменклатураСтруктураДанных);

	Возврат СтруктураДанных;
	
КонецФункции // ISPolpudin@1bit.com ZOOM-18 21.08.24]

// [ISPolpudin@1bit.com ZOOM-18 21.08.24
Функция НезаполненныеПоляДляСборкиТоваров(ProductKitting)
	
	НезаполненныеПоля = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ProductKitting.id) Тогда
		НезаполненныеПоля.Добавить("id"); 	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ProductKitting.warehouse) Тогда
		НезаполненныеПоля.Добавить("warehouse"); 	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ProductKitting.date) Тогда
		НезаполненныеПоля.Добавить("date"); 	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProductKitting.item) Тогда
		НезаполненныеПоля.Добавить("item"); 	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProductKitting.quantity) Тогда
		НезаполненныеПоля.Добавить("quantity"); 	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProductKitting.Burks) Тогда
		НезаполненныеПоля.Добавить("Burks"); 	
	КонецЕсли;
	
	Для каждого Строка Из ProductKitting.goods.Line Цикл
		
		НомерСтроки = 0;
		Если НЕ ЗначениеЗаполнено(Строка.item) Тогда 
			НезаполненныеПоля.Добавить("item " + НомерСтроки);
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(Строка.quantity) Тогда
			НезаполненныеПоля.Добавить("quantity " + НомерСтроки);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1; 
			
	КонецЦикла;
	
	Возврат НезаполненныеПоля;
	
КонецФункции // ISPolpudin@1bit.com ZOOM-18 21.08.24]

// [ISPolpudin@1bit.com ZOOM-18 21.08.24
Процедура ЗаполнитьСтруктуруДанныхИзProductKitting(ProductKitting, СтруктураДанных)

	СтруктураДанных.бит_SAPID 								= ProductKitting.id; 
	СтруктураДанных.Дата 									= ОбщегоНазначенияКлиентСервер.СтрокаВДату(ProductKitting.date);
	
	СтруктураДанных.НоменклатураСтруктураДанных.бит_SAPVIN 	= ProductKitting.vin;
	СтруктураДанных.НоменклатураСтруктураДанных.Артикул 	= ProductKitting.item;
	
	СтруктураДанных.СкладСтруктураДанных.бит_SAPID 			= ProductKitting.warehouse; 
	
	СтруктураДанных.ОрганизацияСтруктураДанных.бит_SAPID 	= ProductKitting.Burks;
	
	Количество = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ProductKitting.quantity); 
	СтруктураДанных.Количество 								= Количество;
	СтруктураДанных.КоличествоУпаковок 						= Количество;
	СтруктураДанных.Товары									= Новый Массив;	
	
	Для каждого Строка Из ProductKitting.goods.Line Цикл
		
		Количество = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Строка.quantity);
		СтруктураТЧТовары = НоваяСтруктураДанныхСборкаТоваровТЧТовары();
		СтруктураТЧТовары.Количество 						= Количество;
		СтруктураТЧТовары.КоличествоУпаковок 				= Количество;
		СтруктураТЧТовары.НоменклатураСтруктураДанных.бит_SAPVIN 	= Строка.vin;
		СтруктураТЧТовары.НоменклатураСтруктураДанных.Артикул 	= Строка.item;
		
		СтруктураДанных.Товары.Добавить(СтруктураТЧТовары);	
		
	КонецЦикла;
	
КонецПроцедуры // ISPolpudin@1bit.com ZOOM-18 21.08.24]

// [ISPolpudin@1bit.com ZOOM-18 21.08.24
Процедура СконвертироватьСтруктуруДанныхСборкаТоваров(СтруктураДанных, СтрокаОшибок)
	
	// Организация
	Если ЗначениеЗаполнено(СтруктураДанных.ОрганизацияСтруктураДанных.бит_SAPID) Тогда
		
		СтруктураДанных.Организация = Справочники.Организации.НайтиПоРеквизиту("бит_SAPID", СтруктураДанных.ОрганизацияСтруктураДанных.бит_SAPID); 
		
		Если СтруктураДанных.Организация = Справочники.Организации.ПустаяСсылка() Тогда
			СтрокаОшибок = СтрокаОшибок + Символы.ПС + СтрШаблон("The company was not found by (id %1)", СтруктураДанных.ОрганизацияСтруктураДанных.бит_SAPID);	
		КонецЕсли;
		
	КонецЕсли;
		
	// Номенклатура  
	Если ЗначениеЗаполнено(СтруктураДанных.НоменклатураСтруктураДанных.бит_SAPVIN) Тогда
		СтруктураДанных.Номенклатура = ПолучитьНоменклатуруMachine(СтруктураДанных.НоменклатураСтруктураДанных);
	Иначе
		СтруктураДанных.Номенклатура = НайтиНоменклатураMachineПоАртикулу(СтруктураДанных.НоменклатураСтруктураДанных.Артикул)
	КонецЕсли;
	
	Если СтруктураДанных.Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
		ИЛИ СтруктураДанных.Номенклатура = Неопределено Тогда
		
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + СтрШаблон("The reference to the nomenclature by (vin %1) and/or (item %2) was not found", 
		СтруктураДанных.НоменклатураСтруктураДанных.бит_SAPVIN, СтруктураДанных.НоменклатураСтруктураДанных.Артикул); 
		
	КонецЕсли;
	
	// Номенклатура ТЧ Товары
	Для каждого СтруктураТЧТовары Из СтруктураДанных.Товары Цикл
		
		Если ЗначениеЗаполнено(СтруктураТЧТовары.НоменклатураСтруктураДанных.бит_SAPVIN) Тогда
			СтруктураТЧТовары.Номенклатура = ПолучитьНоменклатуруMachine(СтруктураТЧТовары.НоменклатураСтруктураДанных);
		Иначе
			СтруктураТЧТовары.Номенклатура = НайтиНоменклатураMachineПоАртикулу(СтруктураТЧТовары.НоменклатураСтруктураДанных.Артикул)
		КонецЕсли;
		
		Если СтруктураТЧТовары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
			ИЛИ СтруктураТЧТовары.Номенклатура = Неопределено Тогда
			
			СтрокаОшибок = СтрокаОшибок + Символы.ПС + СтрШаблон("The reference to the nomenclature by (vin %1) and/or (item %2) was not found", 
				СтруктураТЧТовары.НоменклатураСтруктураДанных.бит_SAPVIN, СтруктураТЧТовары.НоменклатураСтруктураДанных.Артикул); 
				
		КонецЕсли; 
		
	КонецЦикла;
	
	// Склад
	СтруктураДанных.Склад = НайтиСклад(СтруктураДанных.СкладСтруктураДанных.бит_SAPID);
	
	Если СтруктураДанных.Склад = Справочники.Склады.ПустаяСсылка()
		ИЛИ СтруктураДанных.Склад = Неопределено Тогда
		
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + СтрШаблон("The warehouse was not found by (id %1)", СтруктураДанных.СкладСтруктураДанных.бит_SAPID); 
		
	КонецЕсли;
	
КонецПроцедуры // ISPolpudin@1bit.com ZOOM-18 21.08.24] 

//Функция СтруктураОбязательныхСвойствСборкаТоваров()
//	
//	СтруктураДанных = Новый Структура;
//	СтруктураДанных.Вставить("Организация",			Неопределено);
//	СтруктураДанных.Вставить("Склад", 				Неопределено);
//	СтруктураДанных.Вставить("Номенклатура", 		Неопределено);
//	СтруктураДанных.Вставить("Товары", 				Неопределено);

//	Возврат СтруктураДанных;	
//	
//КонецФункции

//Функция СтруктураОбязательныхСконвертированныхДанных(СтруктураДанных)
//	
//	СтруктураОбязательныхСвойств = СтруктураОбязательныхСвойствСборкаТоваров();
//	ЗаполнитьЗначенияСвойств(СтруктураОбязательныхСвойств, СтруктураДанных,,"Товары");
//	
//	СтруктураОбязательныхСвойств.Товары = Новый Массив;
//	Для каждого Строка Из СтруктураДанных.Товары Цикл
//		
//		Товары = Новый Структура;
//		Товары.Вставить("Номенклатура",	Строка.Номенклатура);
//	
//		СтруктураОбязательныхСвойств.Товары.Добавить(Товары);	
//	
//	КонецЦикла;
//	
//	Возврат СтруктураОбязательныхСвойств;
//	
//КонецФункции  

// [ISPolpudin@1bit.com ZOOM-18 21.08.24
Функция НайтиСборкаТоваров(бит_SAPID)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("бит_SAPID", бит_SAPID);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СборкаТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаТоваров
	|ГДЕ
	|	СборкаТоваров.бит_SAPID = &бит_SAPID";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		СборкаТоваров = Неопределено;
	ИначеЕсли Выборка.Следующий() Тогда
		СборкаТоваров = Выборка.Ссылка;
	Иначе
		СборкаТоваров = Документы.СборкаТоваров.ПустаяСсылка();
	КонецЕсли; 
	
	Возврат СборкаТоваров;	

КонецФункции // ISPolpudin@1bit.com ZOOM-18 21.08.24]

// [ISPolpudin@1bit.com ZOOM-18 21.08.24
Процедура ЗаполнитьСборкуТоваров(СборкаТоваровОбъект, СтруктураДанных)
	
	СборкаТоваровОбъект.ОбменДанными.Загрузка = Истина; 
	
	Если СборкаТоваровОбъект.Ссылка.Пустая() Тогда
		СборкаТоваровОбъект.УстановитьНовыйНомер();	
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СборкаТоваровОбъект, СтруктураДанных);
	
КонецПроцедуры // ISPolpudin@1bit.com ZOOM-18 21.08.24]

// [ISPolpudin@1bit.com ZOOM-18 21.08.24
Процедура ОбновитьТЧТоварыСборкиТоваров(СборкаТоваровОбъект, МассивСтруктурДанных)

	СборкаТоваровОбъект.Товары.Очистить();
	
	Для каждого Строка Из МассивСтруктурДанных Цикл
		
		СтрокаТЧ = СборкаТоваровОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка); 
	
	КонецЦикла;
	
КонецПроцедуры // ISPolpudin@1bit.com ZOOM-18 21.08.24] 

// [ISPolpudin@1bit.com ZOOM-18 21.08.24
Функция CreateUpdateProductKitting(ProductKitting)

	ДанныеXDTOТекстом = бит_РаботаСXDTO.XDTOВСтроку(ProductKitting, "Zoomlion");	
	Response 	= ФабрикаXDTO.Создать("Zoomlion", "Response");  
	
	НезаполненныеПоля = НезаполненныеПоляДляСборкиТоваров(ProductKitting);
	Если НезаполненныеПоля.Количество() Тогда
		
		ТекстСообщения = СтрШаблон("For type 'GoodsTransfer' these fields should be filled: %1",
		СтрСоединить(НезаполненныеПоля, ", "));
		
		Response.e_return 	= Формат(Ложь, ФорматнаяСтрокаБулево());
		Response.e_msg 		= ТекстСообщения; 
		Response.e_time 	= Формат(ТекущаяДатаСеанса(), ФорматнаяСтрокаДаты());
		
		РегистрыСведений.бит_ЖурналОбменаСSAP.ДобавитьЗапись(,,
		Перечисления.бит_SAP_ЭтапыОбмена.ProductKitting,
		Неопределено,
		ДанныеXDTOТекстом,
		ТекстСообщения,
		Истина);
		
		Возврат Response; 
		
	КонецЕсли;
	
	СборкаТоваровСсылка = НайтиСборкаТоваров(ProductKitting.id);
	Если СборкаТоваровСсылка = Неопределено Тогда
		
		// Проблема при поиске СборкаТоваров по ID, найдено больше одного элемента
		ТекстСообщения = СтрШаблон("Problem when searching for a ProductKitting by ID, more than one item was found (id %1)", 
		ProductKitting.id);
		
		Response.e_return 	= Формат(Ложь, ФорматнаяСтрокаБулево());
		Response.e_msg 		= ТекстСообщения; 
		Response.e_time 	= Формат(ТекущаяДатаСеанса(), ФорматнаяСтрокаДаты());
		
		РегистрыСведений.бит_ЖурналОбменаСSAP.ДобавитьЗапись(,,
		Перечисления.бит_SAP_ЭтапыОбмена.ProductKitting,
		Неопределено,
		ДанныеXDTOТекстом,
		ТекстСообщения,
		Истина);
		
		Возврат Response;
	
	КонецЕсли;
	
	ЭтоНовояСборкаТоваров = СборкаТоваровСсылка.Пустая();
	Ошибка 			= Ложь;
	СтрокаОшибок 	= "";
	
	СтруктураДанных = НоваяСтруктураДанныхСборкаТоваров();
	ЗаполнитьСтруктуруДанныхИзProductKitting(ProductKitting, СтруктураДанных);
	СконвертироватьСтруктуруДанныхСборкаТоваров(СтруктураДанных, СтрокаОшибок);
	//СтруктураОбязательныхДанных = СтруктураОбязательныхСконвертированныхДанных(СтруктураДанных);
	//РазрешенаЗаписьПолученногоОбъектаВБД(СтруктураОбязательныхДанных, СтрокаОшибок);
	
	Если НЕ СтрокаОшибок = "" Тогда
		
		ДлинаСтроки = СтрДлина(СтрокаОшибок) - 1;
		СтрокаОшибок = Прав(СтрокаОшибок, ДлинаСтроки);// Удаление первого символа, это всегда - Символы.ПС			
		
		// Ошибка при конвертации данных в значения реквизитов
		Response.e_return 	= Формат(Ложь, ФорматнаяСтрокаБулево());
		Response.e_msg 		= СтрокаОшибок; 
		Response.e_time 	= Формат(ТекущаяДатаСеанса(), ФорматнаяСтрокаДаты());
		
		РегистрыСведений.бит_ЖурналОбменаСSAP.ДобавитьЗапись(,,
		Перечисления.бит_SAP_ЭтапыОбмена.ProductKitting,
		?(ЭтоНовояСборкаТоваров, Неопределено, СборкаТоваровСсылка),
		ДанныеXDTOТекстом,
		СтрокаОшибок,
		Истина);
		
		Возврат Response;	
	
	КонецЕсли;
	
	Если ЭтоНовояСборкаТоваров Тогда
		СборкаТоваровОбъект = Документы.СборкаТоваров.СоздатьДокумент();
	Иначе
		СборкаТоваровОбъект = СборкаТоваровСсылка.ПолучитьОбъект();	
	КонецЕсли;

	ЗаполнитьСборкуТоваров(СборкаТоваровОбъект, СтруктураДанных);
	ОбновитьТЧТоварыСборкиТоваров(СборкаТоваровОбъект, СтруктураДанных.Товары);
	
	НачатьТранзакцию(); 
	Попытка
		
		СборкаТоваровОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ошибка = Истина;
		
	КонецПопытки;
	
	Если Ошибка Тогда
		
		ТекстСообщения = СтрШаблон("Problem while saving ProductKitting (id %1): %2", 
		ProductKitting.id, ИнформацияОбОшибке);
		
		Response.e_return 	= Формат(Ложь, ФорматнаяСтрокаБулево());
		Response.e_msg 		= ТекстСообщения; 
		Response.e_time 	= Формат(ТекущаяДатаСеанса(), ФорматнаяСтрокаДаты());
		
		РегистрыСведений.бит_ЖурналОбменаСSAP.ДобавитьЗапись(,,
		Перечисления.бит_SAP_ЭтапыОбмена.ProductKitting,
		?(ЭтоНовояСборкаТоваров, Неопределено, СборкаТоваровОбъект.Ссылка), 
		ДанныеXDTOТекстом,
		ТекстСообщения,
		Истина);
		
	Иначе  

		Если НЕ СборкаТоваровОбъект.ПометкаУдаления Тогда
			РегистрыСведений.бит_ОтложенноеПроведениеДокументов.НоваяЗапись(СборкаТоваровОбъект.Ссылка);
		КонецЕсли;
		
		ТекстСообщения = ?(ЭтоНовояСборкаТоваров, 
		СтрШаблон("ProductKitting (id %1) is created", ProductKitting.id), 
		СтрШаблон("ProductKitting (id %1) is updated", ProductKitting.id));
		
		Response.e_return 	= Формат(Истина, ФорматнаяСтрокаБулево());
		Response.e_msg 		= ТекстСообщения;
		Response.e_time 	= Формат(ТекущаяДатаСеанса(), ФорматнаяСтрокаДаты()); 
		
		РегистрыСведений.бит_ЖурналОбменаСSAP.ДобавитьЗапись(,,
		Перечисления.бит_SAP_ЭтапыОбмена.ProductKitting,
		СборкаТоваровОбъект.Ссылка,
		ДанныеXDTOТекстом,
		ТекстСообщения,
		Ложь);
		
	КонецЕсли;
	
	Возврат Response;
	
КонецФункции // ISPolpudin@1bit.com ZOOM-18 21.08.24] 

#КонецОбласти

//{Актуальность
// [ISPolpudin@1bit.com ZOOM-2 06.08.24
Функция ПоляДляПроверкиАктуальностиСклада()

	Возврат "Наименование, бит_ProcudtLine, ТипСклада, ИсточникИнформацииОЦенахДляПечати, бит_Business_type, бит_Организация, бит_Завод";	

КонецФункции // ISPolpudin@1bit.com ZOOM-2 02.08.24]

// [ISPolpudin@1bit.com ZOOM-2 06.08.24
Функция ДанныйСкладаАктуальны(СкладСсылка, СтруктураДанных)
	
	ДанныйАктуальны 		= Истина;
	СтрокаПолейДляПроверкиАктуальности = ПоляДляПроверкиАктуальностиСклада();
	СтруктураЗначенийИзБД 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СкладСсылка, СтрокаПолейДляПроверкиАктуальности);
	
	Для каждого ЭлементКоллекции  Из СтруктураЗначенийИзБД Цикл     
		
		Если НЕ ЭлементКоллекции.Значение = СтруктураДанных[ЭлементКоллекции.Ключ] Тогда
			ДанныйАктуальны = Ложь;
			Прервать;
		КонецЕсли;	
	
	КонецЦикла;
	
    // Проверка актуальности адреса
	Если ЗначениеЗаполнено(СтруктураДанных.Адрес) Тогда
		
		ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации(); 
		ОтборКИ.ВидыКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресСклада;
		ОтборКИ.ТипыКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес;
		
		Источник = Новый Массив;
		Источник.Добавить(СкладСсылка);
		
		КИБазы = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Источник, ОтборКИ);
		
		НайденнаяСтрока = КИБазы.Найти(СтруктураДанных.Адрес, "Представление");
		Если НайденнаяСтрока = Неопределено Тогда 
			ДанныйАктуальны = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныйАктуальны;
	
КонецФункции // ISPolpudin@1bit.com ZOOM-2 06.08.24]
//}Актуальность



