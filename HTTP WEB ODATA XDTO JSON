//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                            XDTO
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Минимальный 1 - обязательно должно быть значение
Минимальный 0 - может не быть значения
Максимальный -1 - неограниченное число значений(например строк в ТЧ)
Неоходим для Сериализации/Десериализации XML-Документа. При Сериализации/Десериализации XML-Документа XDTO может создаваться явно в пакете или неявно. 

ПакетXDTO -> ФабрикаXDTO -> создание пустого Объекта

///////////////////////////////////////////////////////////
//Запись

Номенклатура = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.xdto-example.org/data", "Справочник.Номенклатура"));//Создается пустой объект по данным пакета XDTO
ЗаполнитьЗначенияСвойств(Номенклатура, Данные, "Наименование,Артикул");// Заполяется объект 
Номенклатура.Ссылка = Строка(Данные.Ссылка.УникальныйИдентификатор());// Заполяется объект 

ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Номенклатура);//Записали в XML(для передачи)


///////////////////////////////////////////////////////////
//Чтение

            ТипОбъектаXDTO = ФабрикаXDTO.Тип(ЧтениеXML.URIПространстваИмен, ЧтениеXML.ЛокальноеИмя);
            ОбъектXDTO     = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO); 
            
            Если ТипОбъектаXDTO.Имя = "Справочник.Номенклатура" Тогда
                Ссылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));	
                ОбъектНоменклатуры = Ссылка.ПолучитьОбъект();
                Если ОбъектНоменклатуры = Неопределено Тогда
                    ОбъектНоменклатуры = Справочники.Номенклатура.СоздатьЭлемент();				
                    ОбъектНоменклатуры.УстановитьСсылкуНового(Ссылка);
                КонецЕсли; 
                ОбъектНоменклатуры.Наименование = ОбъектXDTO.Наименование;
                ОбъектНоменклатуры.Шифт = ОбъектXDTO.Артикул;
                
                ОбъектНоменклатуры.ОбменДанными.Загрузка = Истина;
                ОбъектНоменклатуры.Записать();	
            КонецЕсли;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                            JSON
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

JSON похож на XML только легче
Возможности:
1) Потоковая Запись и Чтение. Например ЗаписьJSON.ЗаписатьНачалоОбъекта
2) Сериализация данных автоматическая для простых типов(Булево, строка, число ...) не потокавая запись. Например ЗаписьJSON(Запись, Данные)
3)



Возможности(домонстрация)
Пункт 2) 
///////////////////////////////////////////////////////////
//Запись

&НаСервереБезКонтекста
Процедура СериализацияПростыхТиповНаСервере()

//{Создать структуру с данными контрагента. И заполняем данные
Данные = Новый Структура;
Данные.Вставить(″Контрагент″, ″ОАО Топаз″);
Данные.Вставить(″ОбъемПродаж″, 5000000);
// Добавить элемент структуры Телефоны типа Массив.
Телефоны = Новый Массив;
Телефоны.Добавить(″+71112223344″);
Телефоны.Добавить(″+79998887766″);
Данные.Вставить(″Телефоны″, Телефоны);
Данные.Вставить(″Поставщик″, Ложь);
//Создать структуру с данными контрагента. И заполняем данные}

// Создать объект записи и открыть файл, в который будет выполняться запись.
Запись = Новый ЗаписьJSON;
ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
Запись.ОткрытьФайл(″c:\temp\Serialisation.json″,,, ПараметрыЗаписиJSON);

// Выполнить запись данных (Данные) с помощью объекта записи (Запись).
ЗаписатьJSON(Запись, Данные);// Непотоковая запись в файл. С автоматической Сериализацией
// Завершить работу с файлом.

Запись.Закрыть();
КонецПроцедуры

///////////////////////////////////////////////////////////
//Чтение

&НаСервереБезКонтекста
Процедура ДесериализацияПростыхТиповНаСервере()
// Создать объект чтения и открыть файл, из которого будет выполняться чтение.
Чтение = Новый ЧтениеJSON;
Чтение.ОткрытьФайл(″c:\temp\Serialisation.json″);
// Выполнить чтение данных в структуру Данные с помощью объекта чтения (Чтение).
Данные = ПрочитатьJSON(Чтение);
// Завершить работу с файлом.
Чтение.Закрыть();
// Вывести результат чтения в сообщение.
Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ″Контрагент: ″ + Данные.Контрагент + ″, Объем продаж: ″ + Данные.ОбъемПродаж +
″, Поставщик?: ″+ Данные.Поставщик + ″, Телефоны: ″;
// Обойти в цикле элемент структуры данных Телефоны типа Массив.
Для Каждого Телефон Из Данные.Телефоны Цикл
Сообщение.Текст = Сообщение.Текст + Телефон + ″, ″;
КонецЦикла;
Сообщение.Сообщить();
КонецПроцедуры




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                            HTTP
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1) Скорость
2) Необходимо документирование
3) Самостоятельно реализовывать API

 Пункты: 
1) создать  HTTP и его методы
2) Прописать спецификацию API в (общих макетах) в формате JSON. Это документация для проверки переданных параметров в запросе
3) Прописываются методы HTTP 


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                            WEB
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//https://disk.yandex.ru/d/P2_0z_ilAgQ1_w

1) Проверка XDTO пакетов(проверяем то что нам пришло)
2) Документация SOAP

Пункты:
1) Создаем пакет XDTO
2) Создаем Web-сервис и связываем с пакетом XDTO
3) Добавляем операции и указываем типы возвращаемых значений(Элементарные или из своего пакета XDTO)
4) Описание Процедур WEB-сервиса (отправитель)
5) Создание объекта WS-ссылки и Описание Процедур получения (получатель)

Пункты:
Пункт 4)
//отправителю приходит запрос и параметры получения данных для получение данных
Функция Задачи(Код, Выполнено)
  Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Наименование КАК Описание,
		|	Задачи.Код,
		|	ЕСТЬNULL(Задачи.Сотрудник.Код, """") КАК СотрудникКод,
		|	ЕСТЬNULL(Задачи.Сотрудник.Наименование, """") КАК Имя,
		|	Задачи.Выполнено КАК Выполнено
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	(Задачи.Сотрудник.Код = &Код
		|			ИЛИ &Код = НЕОПРЕДЕЛЕНО)
		|	И (Задачи.Выполнено = &Выполнено
		|			ИЛИ &Выполнено = НЕОПРЕДЕЛЕНО)";
	
	
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Выполнено", Выполнено);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

  //{Через глобальную функцию ФабрикаXDTO присваиваем тип
	ТипСотрудник = ФабрикаXDTO.Тип("tasks","Сотрудник");
	ТипЗадача = ФабрикаXDTO.Тип("tasks","Задача");
	ТипОтвет = ФабрикаXDTO.Тип("tasks","Ответ");
  //Через глобальную функцию ФабрикаXDTO присваиваем тип}

	ОбъектОтвет = ФабрикаXDTO.Создать(ТипОтвет);
	ОбъектОтвет.Успешно = Истина;
	СписокЗадач = ОбъектОтвет.ПолучитьСписок("СписокЗадач");

  //Созадем объект и заполняем его
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектСотрудник = ФабрикаXDTO.Создать(ТипСотрудник);
		ОбъектСотрудник.Код = ВыборкаДетальныеЗаписи.СотрудникКод;
		ОбъектСотрудник.Имя = ВыборкаДетальныеЗаписи.Имя;

		ОбъектЗадача = ФабрикаXDTO.Создать(ТипЗадача);
		ЗаполнитьЗначенияСвойств(ОбъектЗадача, ВыборкаДетальныеЗаписи);
		ОбъектЗадача.Сотрудник = ОбъектСотрудник;
		
		СписокЗадач.Добавить(ОбъектЗадача);
	КонецЦикла;

	Возврат ОбъектОтвет;//возвращаются пакеты
КонецФункции



Функция Добавить(Задача)

	Сотрудник = Справочники.Сотрудники.НайтиПоКоду(Задача.Сотрудник.Код); // SOAP - автоматическая проверка
	
	ТипОтвет = ФабрикаXDTO.Тип("tasks","Ответ");

	ОбъектОтвет = ФабрикаXDTO.Создать(ТипОтвет);
	ОбъектОтвет.Успешно = Истина;
	СписокОшибок = ОбъектОтвет.ПолучитьСписок("СписокОшибок");
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		НоваяЗадача = Справочники.Задачи.СоздатьЭлемент();
		НоваяЗадача.Наименование = Задача.Описание;
		НоваяЗадача.Сотрудник = Сотрудник;
		Если НЕ ПустаяСтрока(Задача.Файл) Тогда		
			НоваяЗадача.ХранениеКартинки = Новый ХранилищеЗначения(Base64Значение(Задача.Файл));
		КонецЕсли;
		НоваяЗадача.Записать();
	Иначе
		ОбъектОтвет.Успешно = Ложь;		
		СписокОшибок.Добавить(СтрШаблон("Не найден сотруднки с кодом ""%1""", Задача.Сотрудник.Код));
	КонецЕсли;

	Возврат ОбъектОтвет;	

КонецФункции

Пункт 5) 

	Прокси = WSСсылки.tasks.СоздатьWSПрокси("tasks","tasks","tasksSoap");
	
	ТипСотрудник = Прокси.ФабрикаXDTO.Тип("tasks","Сотрудник");
	ТипЗадача = Прокси.ФабрикаXDTO.Тип("tasks","Задача");

	ОбъектСотрудник = Прокси.ФабрикаXDTO.Создать(ТипСотрудник);
	ОбъектСотрудник.Код = Объект.Сотрудник;

	ОбъектЗадача = Прокси.ФабрикаXDTO.Создать(ТипЗадача);
	ОбъектЗадача.Описание = Объект.Задача;
	ОбъектЗадача.Сотрудник = ОбъектСотрудник;

	Результат = Прокси.Добавить(ОбъектЗадача);// в результате будет ответ от Отправителя с данными




