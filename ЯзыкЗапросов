
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                              //Напоминание
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
                                Порядок выполнения
//////////////////////////////////////////////////////////////////////////////////
1) ИЗ
2) ГДЕ
3) СГРУППИРОВАТЬ ПО
4) ИМЕЮЩИЕ
5) ВЫБРАТЬ
6) УПОРЯДОЧИТЬ ПО

//////////////////////////////////////////////////////////////////////////////////
                                	В
//////////////////////////////////////////////////////////////////////////////////
1) ГДЕ Сотрудники В(&МассивСотрудников)

2) (Сотрудник, Организация) В
						(ВЫБРАТЬ
							ВтСотрудники.Ссылка,
							ВтСотрудники.Организация
						ИЗ
							ВтСотрудники)

//////////////////////////////////////////////////////////////////////////////////
                                Отрицание В
//////////////////////////////////////////////////////////////////////////////////
//Условие НЕ В в конструкции ГДЕ увеличивает время исполнения запроса, так как это своего рода НЕ (ИЛИ1 ИЛИ2 ... ИЛИn), 
//поэтому для больших таблиц старайтесь использовать ЛЕВОЕ СОЕДИНЕНИЕ с условием

 ВЫБРАТЬ
_ДемоКонтрагенты.Ссылка
ИЗ
Справочник._ДемоКонтрагенты КАК _ДемоКонтрагенты
ЛЕВОЕ СОЕДИНЕНИЕ Документ._ДемоЗаказПокупателя КАК _ДемоЗаказПокупателя
ПО _ДемоКонтрагенты.Ссылка = _ДемоЗаказПокупателя.Контрагент
ГДЕ
_ДемоЗаказПокупателя.Контрагент ЕСТЬ NULL

//Выдаст всех контрагентов не участвующих в документах _ДемоЗаказПокупателя

//////////////////////////////////////////////////////////////////////////////////
 		Первая строка запроса
//////////////////////////////////////////////////////////////////////////////////
ТЧРаспределение = ПакетРезультатов[2].Выбрать();
ТЧРаспределение.Следующий();

//////////////////////////////////////////////////////////////////////////////////
                                Представление
//////////////////////////////////////////////////////////////////////////////////
Рекомендуется использовать ПРЕДСТАВЛЕНИЕ()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                              ЛЕВОЕСОЕДИНЕНИЕ
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Если используется отбор ГДЕ с условием на поле второстепенной таблице, то этот запрос станет ВНУТРЕННИМ

//////////////////////////////////////
		Первый вариант
Этот запрос выведет "условно" 5 записей:
ВЫБРАТЬ
	Контрагенты.Ссылка КАК Контрагенты,
	РасходТовара.Ссылка КАК ДокументРасход
ИЗ
	Справочник.Контрагенты КАК Контрагенты
 		ЛЕВОЕСОЕДИНЕНИЕ Документ.РасходТовара КАК РасходТовара
		ПО(Контрагенты.Ссылка = РасходТовара.Покупатель)
ГДЕ
	РасходТовара.Организация = &Организация

Постановка задачи: Вывести (Контрагентов и ДокументРасход) у которых обязательно должна быть орагнизация  = &Орагнизация

//////////////////////////////////////
		Второй вариант

А этот выведет "условно" 9 записей:
ВЫБРАТЬ
	Контрагенты.Ссылка КАК Контрагенты,
	РасходТовара.Ссылка КАК ДокументРасход
ИЗ
	Справочник.Контрагенты КАК Контрагенты
 		ЛЕВОЕСОЕДИНЕНИЕ Документ.РасходТовара КАК РасходТовара
		ПО(Контрагенты.Ссылка = РасходТовара.Покупатель
		И РасходТовара.Организация = &Организация)
Постановка задачи: Вывести ВСЕХ Контрагентов и (ДокументРасход у которого обязательно должна быть орагнизация  = &Орагнизация)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                              ОБЪЕДИНЕНИЕ
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1)При объединении запросов каждый из них получает данные неззависимо:
 У каждого свои секции ВЫБРАТЬ, ИЗ, ГДЕ, СГРУППИРОВАТЬ ПО
2) ИТОГИ и УПОРЯДОЧИТЬ применяются к резульатту объединения
3) Ключевое слово РАЗРЕШЕННЫЕ доступно только первному запросу

ОБЪЕДИНИТЬ ВСЕ - все записи из первого запроса со вмеми записями из второго запроса
ОБЪЕДИНИТЬ - все записи из первого запроса будут дополнены только теми записями из второго запроса, которых нет в первом  
(в конструкторе есть галочка без повторяющихся)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                              //ТЗ
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗагрузки.ФизЛицоЗУП3 КАК ФизическоеЛицоИзБазы,
	               |	ТаблицаЗагрузки.ФизическоеЛицоИзФайла КАК ФизическоеЛицоИзФайла,
	               |	ТаблицаЗагрузки.ВидСтажа КАК ВидСтажа,
	               |	ТаблицаЗагрузки.ДатаНачала КАК ДатаНачала,
	               |	ТаблицаЗагрузки.РазмерМесяцев КАК РазмерМесяцев,
	               |	ТаблицаЗагрузки.РазмерДней КАК РазмерДней
	               |ПОМЕСТИТЬ ВТ_ТЧ
	               |ИЗ
	               |	&ТаблицаЗагрузки КАК ТаблицаЗагрузки";
	
	Запрос.УстановитьПараметр("ТаблицаЗагрузки", НайденныеФизЛица.Выгрузить()); 
	РезультатЗапроса = Запрос.Выполнить();




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                              //Оптимизация
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1) Вообще не использовать "В(&Массив)" в конструкции ПО если в Массив элементов больше 128
Решение: разбивать на ВТ или Субконто В (&МассивПерваяПоловина) или Субконто В (&МассивВтораяПоловина)
2) Не использовать <> в условии ГДЕ. Пример Х <> Y
Решение: НЕ Х = ЗНАЧЕНИЕ(Y) 
3) Не использовать .ПРЕДСТАВЛЕНИЕ
Решение: использовать ПРЕДСТАВЛЕНИЕ()
4) Стараться не использовать НАЧАЛОПЕРИОДА() или КОНЕЦПЕРИОДА()
5) Выражать конкретный тип если Объект в запросе имеет составной тип
Решение: ВЫРАЗИТЬ(УправленческийОстатки.Субконто3 КАК Документ.ПриходнаяНакладная).МоментВремени. Теперь явно задано, не нужно перебирать все составные Типы
7) Не обращаться через ТОЧКУ(ДокументСсылка.Валюта). Это приводит к выбору всех полей входящие в ДокументСсылка(ТЧ, РеквизитыТЧ, Реквизиты)


//////////////////////////////////////////////////////////////////////////////////
                                //СрезПоследних
//////////////////////////////////////////////////////////////////////////////////

Срез последних на каждую дату в запросе 1с
Бывают ситуации, когда срез регистра сведений необходимо получить не на конкретную дату, а на несколько дат. Но в запросе, в виртуальную таблицу можно передать только одну дату. В следующем примере будет показано, как это сделать.

Пример 3. По номенклатуре, необходимо получить все реализации за период и определить какая цена была установлена на данную номенклатуру в момент продажи по типу цен из реализации.

Запрос = Новый Запрос;
Запрос.УстановитьПараметр("Конец",  КонецПериода); 
Запрос.УстановитьПараметр("Начало", НачалоПериода); 
Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

Запрос.Текст = 
"ВЫБРАТЬ
|    РеализацияТоваровУслугТовары.Ссылка,
|    РеализацияТоваровУслугТовары.Ссылка.ТипЦен,
|    РеализацияТоваровУслугТовары.Номенклатура,
|    МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
|ПОМЕСТИТЬ ПервичныеДанныеЦен
|ИЗ
|    Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
|    ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
|        ПО РеализацияТоваровУслугТовары.Номенклатура = ЦеныНоменклатуры.Номенклатура
|	 И РеализацияТоваровУслугТовары.Ссылка.ТипЦен = ЦеныНоменклатуры.ТипЦен
|	 И РеализацияТоваровУслугТовары.Ссылка.Дата >= ЦеныНоменклатуры.Период
|ГДЕ
|    РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура
|    И РеализацияТоваровУслугТовары.Ссылка.Проведен
|    И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &Начало И &Конец
|
|СГРУППИРОВАТЬ ПО
|    РеализацияТоваровУслугТовары.Ссылка,
|    РеализацияТоваровУслугТовары.Номенклатура,
|    РеализацияТоваровУслугТовары.Ссылка.ТипЦен
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|    ПервичныеДанныеЦен.Ссылка,
|    ПервичныеДанныеЦен.ТипЦен,
|    ПервичныеДанныеЦен.Номенклатура,
|    ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена
|ИЗ
|    ПервичныеДанныеЦен КАК ПервичныеДанныеЦен
|    ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
|        ПО ПервичныеДанныеЦен.Номенклатура = ЦеныНоменклатуры.Номенклатура
|	 И ПервичныеДанныеЦен.ТипЦен = ЦеныНоменклатуры.ТипЦен
|	 И ПервичныеДанныеЦен.Период = ЦеныНоменклатуры.Период";
Вкратце принцип действия данного механизма следующий:

Выбираем все нужные нам документы, либо просто необходимые даты;
Присоединяем к ним регистр по нужным измерениям;
Также в связях указываем, что нам нужны данные регистра с периодом меньше либо равным дате документа (или просто необходимой даты);
При помощи группировки находим максимальную из подходящих дат;
Еще раз присоединяем регистр по всем нужным измерениям, но на этот раз по конкретной дате;
Таким образом на каждую изначальную строку с датой мы получим срез последних регистра сведений.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                             Ссылки УИД. Напоминание
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
                              УИД и  СсылкаСуществует 
//////////////////////////////////////////////////////////////////////////////////
МенеджерОбъекта = Документы.ЗаявкаНаКомандировку;
ИдентификаторОбъекта = Новый УникальныйИдентификатор(ДанныеОбъекта.DocumentID);
ЗагружаемаяСсылка = МенеджерОбъекта.ПолучитьСсылку(ИдентификаторОбъекта);
		
Если ОбщегоНазначения.СсылкаСуществует(ЗагружаемаяСсылка) Тогда
КонецЕсли;

//////////////////////////////////////////////////////////////////////////////////
                             Ссылка или ТипЗначения
//////////////////////////////////////////////////////////////////////////////////
Приоритетно использовать ССЫЛКА. Там где нельзя - ТИПЗНАЧЕНИЯ
Нельзя использовать ССЫЛКА: сравнение идет не с ссылочным типом(несовместимые типы) 

Пример: Покупатель ССЫЛКА Справочник.Сотрудники 

//////////////////////////////////////////////////////////////////////////////////
                             	ВЫРАЗИТЬ
//////////////////////////////////////////////////////////////////////////////////
Используется для оптимизации запросов, когда реквизит имеет составной тип из Ссылок
и в запросе необходимо получить реквизиты через точку

ВЫБОР 
	КОГДА ... ССЫЛКА ...
		ТОГДА ВЫРАЗИТЬ(...,...).Реквизит1
	КОГДА ... ССЫЛКА ...
		ТОГДА ВЫРАЗИТЬ(...,...).Реквизит1
КОНЕЦ

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                              Функции и т.д
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
                             	Отборы   
//////////////////////////////////////////////////////////////////////////////////
1) ИМЕЮЩИЕ 
Отличие директивы «ИМЕЮЩИЕ» от условия «ГДЕ» состоит в том, что ее можно использовать для агрегатных функций. 
Обязательным условием при этом является использование группировки по остальным полям.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                              Роли RLS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

РАЗРЕШЕННЫЕ - выводит доступные пользователю элементы.
Особенности, не распостранняется на дочерние элементы. Например на документ
Платежное поручение нет ограничений, но на справочник Организация(реквизит документа) есть ограничение,
тогда будут показаны пустые ссылки в колонке организация 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                              NULL
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Появляется если у строки нет такой колонки, если получаем реквизит из реквизита с типом NULL

Не работает: =, <>. Использовать: ЕСТЬ NULL, ЕСТЬ НЕ NULL 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                              КОЛИЧЕСТВО
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
КОЛИЧЕСТВО(*) - запрос подсчитает количесвто строк в результате запроса
КОЛИЧЕСТВО(ФизЛицо.Регион) - выдает количество значений указанного поля, не равных NULL 
Можно совместно использовать с РАЗЛИЧНЫЕ

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                             НайтиСледующий
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Объект.Ведомости - ТЧ
Для каждого СтрокаТЧ Из Объект.Ведомости Цикл
	
		СтруктураПоиска.Ведомость = СтрокаТЧ.Ведомость;
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда 
			СтрокаТЧ.ВТР_Сумма = Выборка.СуммаПоДокументу;
			Выборка.Сбросить();//Обязательно для сброса. Иначе может быть перелистывание
		КонецЕсли;
	
КонецЦикла;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                             Индексы
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Грубое правило когда нужно использовать Индексы:
1) индексировать поля которые участвуют в соединении

Точное правило когда нужно использовать Индексы:
https://курсы-по-1с.рф/articles/временные-таблицы-3-вопроса/
https://its.1c.ru/db/v8std/content/777/hdoc

//////////////////////////////////////////////////////////////////////////////////
                             	Выводы   
//////////////////////////////////////////////////////////////////////////////////
Индексы - не панацея. Очень много случаев, когда скорость с индексами ухудшается
Большая временная таблица участвует в соединении (не важно, с какой стороны). 
В индекс следует добавлять поля, участвующие в условии ПО.
В индекс следует добавлять поля временной таблицы из списка выбора, соответствующие перечисленным с левой стороны логического оператора В (...).
Маленькие временные таблицы индексировать не нужно (менее 1000 записей).
Если условий выбора или соединений с временной таблицей больше одного, и только одно из них проверяется часто, то индекс следует строить для наиболее часто проверяемого условия.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                             Временные таблицы
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Можно использовать менеджер временных таблиц для храниения результатов запроса и последующего использования в других запросах его результата.
Запрос.Менеджер... = ...;
Запрос.Текст = ...;
Запрос.Выполнить();// Запрос.Менеджер... теперь содержит результаты ВТ

Во временные таблицы можно передавать ТЗ, Результаты запроса и т.д 

//////////////////////////////////////////////////////////////////////////////////
                             	Количество ВТ   
//////////////////////////////////////////////////////////////////////////////////
Если можно написать оптимальный запрос без использования временных таблиц, то лучше обойтись без них. 
Так как TempDB может очень сильно увеличиваться в размерах.
Удаление следует производить только если ВТ не требуется на ранних стадиях работы с менеджером запросов 

//////////////////////////////////////////////////////////////////////////////////
                             	Общие правила   
//////////////////////////////////////////////////////////////////////////////////
Не следует создавать временные таблицы с очень большим объемом данных (сотни тысяч записей), 
если алгоритму требуется работать с большим объемом данных, то он должен выполнять обработку этих данных порциями.
Не следует помещать во временную таблицу больше данных, чем требуется последующим запросам.
