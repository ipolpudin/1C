
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                        Хитрости
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1) Если необходимо заблокировать доступность элемента с большой вариабельностью вкл/выкл доступности от значений формы. Можно программно создать группу и назначить ее родителем формы. 
А затем дописать функционл вкл/выкл доспупности этой группы.

2) Если необходимо заблокировать всю форму через БСП ЗапретРедактированияРеквизитовОбъектов, то можно создать группу маячек и блокировать ее, ЭтаФорма.ТолькоПросмотр = НЕ ГруппаМаячек.Доступность. Подробнее см. Запрет Редактирования
или обратиться к объекту методанных и в цикле добавить к заблокированным объектам все объекты методанного 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                                                                        				Создание частей формы

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                        РЕКВИЗИТ
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Заметки:{ 
В самый последний момент(ПослеЗаписиНаСервере) не резервирует ячейку под реквезит в БД. В функции ПослеЗаписиНаСервере(текущайОбъект) 
текущайОбъект не содержит этого реквезита, а в Объект есть этот реквезит. !!!Возможно из за определяемых типов которые нельзя исользовать в расширении
Заметки}

  	ДобавляемыеРеквизиты = Новый Массив;//Создается массив 
  
	НовыйРеквизит = Новый РеквизитФормы("эккоИдентификаторПериод",Новый ОписаниеТипов("Дата"));
	НовыйРеквизит.Заголовок = "Идентификатор период строкой";
	НовыйРеквизит.СохраняемыеДанные = Ложь;

	
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);//Вносятся изменения в форму
        ИзменитьРеквизиты(ДобавляемыеРеквизиты);  

//Создание ТЗ
        МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВТР_ТаблицаЭлементовКОбмену", ОписаниеТипаВыбора)); //ТЗ
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВТР_МассивЭлементов", Новый ОписаниеТипов(),"ВТР_ТаблицаЭлементовКОбмену"));//Колонка с Произвольным типом

//Создание СписокЗначений
	//Отлично работает с обычными массивами. Например как буфер(Есть выгрузка/загрузка массива)
	ВТР_СписокЭлементовКОбмену = Новый РеквизитФормы("ВТР_СписокЭлементовКОбмену", Новый ОписаниеТипов("СписокЗначений")); 
	ДобавляемыеРеквизиты.Добавить(ВТР_СписокЭлементовКОбмену);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты); 

  //ЭтотОбъект["эккоИдентификаторПериод"]; - обращение к программно созданному реквезиту

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                               ЭЛЕМЕНТ
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  // Сложный элемент Дата с регулятором и картинкой
  	НовыйЭлемент = Этаформа.Элементы.Вставить("эккоИсторияИзмененияSapHR",Тип("ПолеФормы"),Элементы.эккоДанныеSAPHR);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = "Заданный ниже Идентификатор действует с: ";
	НовыйЭлемент.ПутьКДанным = "эккоИдентификаторПериод";
	НовыйЭлемент.КнопкаВыбора = Истина;
	НовыйЭлемент.КнопкаРегулирования = Истина;
	НовыйЭлемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ПолеВводаКалендарь;
	НовыйЭлемент.ФорматРедактирования = "ДФ=dd.MM.yyyy";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "эккоИсторияИзмененияSapHRПриИзмененииПосле");
	НовыйЭлемент.УстановитьДействие("Регулирование", "эккоИсторияИзмененияSapHRРегулированиеПосле"); 
	НовыйЭлемент.Ширина = 14;

// Сложный элемент МЕСЯЦ выплаты (Проект Вентра расширение ЗУП ПлатежноеПоручение.ФормаДокумента)
	ДействияПериодРегистрацииСтрокой = Новый Структура;
	ДействияПериодРегистрацииСтрокой.Вставить("ПриИзменении", "ВТР_ПериодРегистрацииПриИзменении");
	ДействияПериодРегистрацииСтрокой.Вставить("НачалоВыбора", "ВТР_ПериодРегистрацииНачалоВыбора");
	ДействияПериодРегистрацииСтрокой.Вставить("Регулирование", "ВТР_ПериодРегистрацииРегулирование");
	ДействияПериодРегистрацииСтрокой.Вставить("АвтоПодбор", "ВТР_ПериодРегистрацииАвтоПодбор");
	ДействияПериодРегистрацииСтрокой.Вставить("ОкончаниеВводаТекста", "ВТР_ПериодРегистрацииОкончаниеВводаТекста");
	
	ПараметрыЭлемента = ВТР_РаботаСИнтерфейсом.СтруктураПараметровЭлементаФормы(Тип("ПолеФормы"));  		
	ПараметрыЭлемента.ИмяЭлемента = "ВТР_ПериодРегистрацииСтрокой";
	ПараметрыЭлемента.ЭлементРодитель = Элементы.ГруппаШапкаЛевая; 
	ПараметрыЭлемента.ПутьКДанным = "ВТР_ПериодРегистрацииСтрокой";
	ПараметрыЭлемента.ЗаголовокЭлемента = "Месяц выплаты";
	ПараметрыЭлемента.ДополнительныеПараметры.Вставить("КартинкаКнопкиВыбора", БиблиотекаКартинок.ПолеВводаКалендарь);
	ПараметрыЭлемента.ДополнительныеПараметры.Вставить("КнопкаРегулирования", Истина);
	ПараметрыЭлемента.ДополнительныеПараметры.Вставить("КнопкаВыбора", Истина); 
	ПараметрыЭлемента.Действия = ДействияПериодРегистрацииСтрокой;
	НовыйЭлемент = ВТР_РаботаСИнтерфейсом.ДобавитьНаФормуПолеВвода(ЭтаФорма, ПараметрыЭлемента);
  
//Простой элемент 
        НовыйЭлемент = Элементы.Добавить("эккоИдентификаторSAPHRПозицииШРРуководителя", Тип("ПолеФормы"), Элементы.эккоГруппаИсторияИзмененияSapHR);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.эккоИдентификаторSAPHRПозицииШРРуководителя";
	
//ТЧ
	ТаблицаФормыВТР_ВентраГПХ = Элементы.Добавить("ВТР_ВентраГПХ", Тип("ТаблицаФормы"),ЭтотОбъект);
	ТаблицаФормыВТР_ВентраГПХ.ПутьКДанным = "Объект.ВТР_ВентраГПХ";
 
//Элемент ТЧ
        ТаблицаТовары = Элементы.Товары;
        НовыйРеквизит = Элементы.Добавить("Вес", Тип("ПолеФормы"), ТаблицаТовары);
        НовыйРеквизит.Заголовок = "Вес";
        НовыйРеквизит.Вид = ВидПоляФормы.ПолеВвода;
        НовыйРеквизит.ПутьКДанным = "Объект.Товары.Вес";
		
  //Группа
        ГруппаДатаНомер = ЭтаФорма.Элементы.Добавить("эккоГруппаИсторияИзмененияSapHR", Тип("ГруппаФормы"),Элементы.эккоДанныеSAPHR);
	ГруппаДатаНомер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДатаНомер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДатаНомер.ОтображатьЗаголовок = ЛОЖЬ; 
	ГруппаДатаНомер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

//Переместить или указать перед каким элементом расположить объект
	Этаформа.Элементы.Переместить(Элементы.РеквизитыБанкаИВТР_РеквизитыОтправителя, Элементы.ЭлектронныйДокументооборотСБанком, Элементы.БанковскиеКарты);
	
//КОМАНДА
	НоваяКоманда = ЭтаФорма.Команды.Добавить("эккоКомандаИсторияИзмененияSapHR");
	НоваяКоманда.Заголовок = "Общая команда";
	НоваяКоманда.Действие = "эккоКомандаИсторияИзмененияSapHRПосле";


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                                                                        Программное открытие и взаимодействие с формой

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                Войти в обработчик события формы "ПриИзменении" (Нелегальный способ)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Объект.Документ - ДокументСсылка(То что программно открываем и изменяет)
//Объект.Контрагент - То что хотим засунуть в программно открытую форму

&НаКлиенте
Процедура Обработать(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	//Новый Структура("Ключ", Объект.Документ) - Можно и без этого
	Форма = ОткрытьФорму("Документ.РасходнаяНакладная.Форма.ФормаДокумента", Новый Структура("Ключ", Объект.Документ));
	Форма.Объект.Контрагент = Объект.Контрагент;
	//Форма.Открыть(); - Если используется ПолучитьФорму(), то открытие перед иницализации ОБЯЗАТЕЛЬНО
	
	ИнтерактивноЗаписатьВЭлементУправления(Форма.Элементы.Контрагент, Форма.Объект.Контрагент, ЭтаФорма); //ЭтаФорма - форма обработки в модуле которой программируем открытие формы
	
	
КонецПроцедуры

// Интерактивно записывает значение в элемент управления. Интерактивность заключается в срабатывании
// события ПриИзменении у элемента управления.
//
// Параметры:
//  ЭлементУправления – ЭлементУправления – которому присваиваем значение;
//  Значение     – Произвольный – присваиваемое значение;
//  *ФормаИнициатор - Форма, УправляемаяФорма, *Неопределено - которая будет использована в качестве инициатора события;
//               если не указана, то будет создана временная форма-пустышка.
//
&НаКлиенте
Функция ИнтерактивноЗаписатьВЭлементУправления(ЭлементУправления, Знач Значение, Знач ФормаИнициатор = Неопределено)
	
	//Если ФормаИнициатор = Неопределено Тогда
	//	ФормаИнициатор = ПолучитьФорму("ОбщаяФорма.Пустышка", ЭлементУправления); 
	//Иначе
		СтарыйВладелец = ФормаИнициатор.ВладелецФормы;
		СтарыйЗакрыватьПриВыборе = ФормаИнициатор.ЗакрыватьПриВыборе;
		ФормаИнициатор.ВладелецФормы = ЭлементУправления;
		ФормаИнициатор.ЗакрыватьПриВыборе = Ложь;
	//КонецЕсли;
	НовоеЗначение = ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Значение);
	Если НовоеЗначение <> Значение Или ЭлементУправления.ТолькоПросмотр Тогда
		Возврат Ложь;
	КонецЕсли; 
	ФормаИнициатор.ОповеститьОВыборе(Значение); 
	Если СтарыйЗакрыватьПриВыборе <> Неопределено Тогда
		ФормаИнициатор.ВладелецФормы = СтарыйВладелец;
		ФормаИнициатор.ЗакрыватьПриВыборе = СтарыйЗакрыватьПриВыборе;
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			Не проверенный спобоб (должен работать только с экспортными функциями)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Вызов не экспортной функции формы? ПараметрыФормы = Новый Структура("Ключ", ВыбранныйСотрудник)
Форма = ПолучитьФорму("Справочник.Сотрудники.ФормаЭлемента", ПараметрыФормы);
Форма.ЗарегистрироватьУвольнение();


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

															Бестиарий элементы формым

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                										Команда и кнопка
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Кнопка не отображается на форме: 
1) Когда не установлено действие
2) Когда установлена функциональная опция у коменды и ее результат отрицательный. 
Свойство видимость и доступность независимы от функциональной опции 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                										 Ограничение количество списка перечисления в форме выбора
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Описание:
Когда требуется выбирать из перечисления, но чтобы были доступны не все значения для выбора. 
В примере  элемент МетодДоставки имеет тип СписокЗначений с ограничением типа Перечисление, но можно использовать и для единичного выбора. Также есть Метод ВыбратьИзСписка, который работает модально.

&НаКлиенте
Процедура МетодДоставкиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;

СписокЗначений = Новый СписокЗначений;
СписокЗначений.Добавить(ДобавляемоеЗначение1);
СписокЗначений.Добавить(ДобавляемоеЗначение2);

ПоказатьВыборИзСписка(Новый ОписаниеОповещения("МетодДоставкиНачалоВыбораЗавершение", ЭтаФорма), СписокЗначений, Элемент);
КонецПроцедуры
&НаКлиенте
Процедура МетодДоставкиНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
МетодДоставки.Добавить(ВыбранныйЭлемент.Значение);
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

															INFOSTART примеры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// ++ #ПрограммноеИзменениеИнтерфейса ФомичевМВ 2024

#Область ПрограммныйИнтерфейс

#Область ГруппыФормы

// Добавляет на форму вертикальную группу
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция ГруппаВертикальная(Элементы, Имя, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ГруппаФормы"), Родитель, ПередЭлементом);
	НовЭлемент.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	НовЭлемент.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовЭлемент.Заголовок			= Заголовок;

	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		НовЭлемент.ОтображатьЗаголовок	= Ложь;
		НовЭлемент.Отображение			= ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	Возврат НовЭлемент;
КонецФункции // ГруппаВертикальная

// Добавляет на форму горизонтальную (всегда) группу
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция ГруппаГоризонтальнаяВсегда(Элементы, Имя, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ГруппаФормы"), Родитель, ПередЭлементом);
	НовЭлемент.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	НовЭлемент.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НовЭлемент.Заголовок			= Заголовок;
	
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		НовЭлемент.ОтображатьЗаголовок	= Ложь;
		НовЭлемент.Отображение			= ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;

	Возврат НовЭлемент;
КонецФункции // ГруппаГоризонтальнаяВсегда

// Добавляет на форму страницы
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция Страницы(Элементы, Имя, Родитель, ПередЭлементом=Неопределено) Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ГруппаФормы"), Родитель, ПередЭлементом);
	НовЭлемент.Вид					= ВидГруппыФормы.Страницы;

	Возврат НовЭлемент;
КонецФункции // Страницы

// Добавляет на форму страницу (к другим страницам)
//
// Параметры:
//  Элементы				- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя						- Строка							- Уникальное имя добавляемого элемента
//  Родитель				- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом			- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок				- Строка							- Заголовок добавляемого элемента
//  ПутьКДаннымЗаголовка	- Строка							- Путь к реквизиту, который отображается в заголовке
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция Страница(Элементы, Имя, Родитель, ПередЭлементом=Неопределено, Заголовок="", ПутьКДаннымЗаголовка="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ГруппаФормы"), Родитель, ПередЭлементом);
	НовЭлемент.Вид							= ВидГруппыФормы.Страница;
	НовЭлемент.Группировка					= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовЭлемент.Заголовок					= Заголовок;
	Если ЗначениеЗаполнено(ПутьКДаннымЗаголовка) Тогда
		НовЭлемент.ПутьКДаннымЗаголовка		= ПутьКДаннымЗаголовка;
	КонецЕсли;

	Возврат НовЭлемент;
КонецФункции // Страница

// Добавляет на форму подменю
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция Подменю(Элементы, Имя, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ГруппаФормы"), Родитель, ПередЭлементом);
	НовЭлемент.Вид					= ВидГруппыФормы.Подменю;
	НовЭлемент.Заголовок			= Заголовок;

	Возврат НовЭлемент;
КонецФункции // Подменю

// Добавляет на форму группу кнопок
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Компактная		- Булево							- Группа кнопок отображается в компактном виде (без промежутков между кнопками)
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция ГруппаКнопок(Элементы, Имя, Родитель, ПередЭлементом=Неопределено, Компактная=Ложь) Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ГруппаФормы"), Родитель, ПередЭлементом);
	НовЭлемент.Вид					= ВидГруппыФормы.ГруппаКнопок;
	НовЭлемент.Отображение			= ?(Компактная, ОтображениеГруппыКнопок.Компактное, ОтображениеГруппыКнопок.Обычное);

	Возврат НовЭлемент;
КонецФункции // ГруппаКнопок

#КонецОбласти

#Область Поля

// Добавляет на форму поле ввода
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	ПутьКДанным		- Строка							- Содержит путь к реквизиту, с которым связан объект
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция ПолеВвода(Элементы, Имя, ПутьКДанным, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ПолеФормы"), Родитель, ПередЭлементом);
	НовЭлемент.ПутьКДанным				= ПутьКДанным;
	НовЭлемент.Вид						= ВидПоляФормы.ПолеВвода;
	НовЭлемент.Заголовок				= Заголовок;
	НовЭлемент.КнопкаВыбора				= Истина;

	Возврат НовЭлемент;
КонецФункции // ПолеВвода

// Добавляет на форму поле надписи
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	ПутьКДанным		- Строка							- Содержит путь к реквизиту, с которым связан объект
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция ПолеНадписи(Элементы, Имя, ПутьКДанным, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ПолеФормы"), Родитель, ПередЭлементом);
	НовЭлемент.ПутьКДанным				= ПутьКДанным;
	НовЭлемент.Вид						= ВидПоляФормы.ПолеНадписи;
	НовЭлемент.Заголовок				= Заголовок;

	Возврат НовЭлемент;
КонецФункции // ПолеНадписи

// Добавляет на форму поле флажка
//
// Параметры:
//  Элементы			- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя					- Строка							- Уникальное имя добавляемого элемента
//	ПутьКДанным			- Строка							- Содержит путь к реквизиту, с которым связан объект
//  Родитель			- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом		- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок			- Строка							- Заголовок добавляемого элемента
//	ОтображениеФлажка	- ВидФлажка, Неопределено			- Вариант отображения флажка, Неопределено - Авто
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция ПолеФлажка(Элементы, Имя, ПутьКДанным, Родитель, ПередЭлементом=Неопределено, Заголовок="", ОтображениеФлажка=Неопределено) Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ПолеФормы"), Родитель, ПередЭлементом);
	НовЭлемент.ПутьКДанным				= ПутьКДанным;
	НовЭлемент.Вид						= ВидПоляФормы.ПолеФлажка;
	НовЭлемент.ВидФлажка				= ?(ОтображениеФлажка=Неопределено, ВидФлажка.Выключатель, ОтображениеФлажка);
	НовЭлемент.Заголовок				= Заголовок;
	НовЭлемент.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Право;

	Возврат НовЭлемент;
КонецФункции // ПолеПереключателя

// Добавляет на форму переключатель в виде тумблера
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	ПутьКДанным		- Строка							- Содержит путь к реквизиту, с которым связан объект
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция ПолеПереключателя(Элементы, Имя, ПутьКДанным, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ПолеФормы"), Родитель, ПередЭлементом);
	НовЭлемент.ПутьКДанным				= ПутьКДанным;
	НовЭлемент.Вид						= ВидПоляФормы.ПолеПереключателя;
	НовЭлемент.ВидПереключателя			= ВидПереключателя.Тумблер;
	НовЭлемент.Заголовок				= Заголовок;

	Возврат НовЭлемент;
КонецФункции // ПолеПереключателя

// Добавляет на форму поле картинки
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	ПутьКДанным		- Строка							- Содержит путь к реквизиту, с которым связан объект
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//	КартинкаЗначений- Картинка, Неопределено			- Картинка элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция ПолеКартинки(Элементы, Имя, ПутьКДанным, Родитель, ПередЭлементом=Неопределено, Заголовок="", КартинкаЗначений=Неопределено) Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ПолеФормы"), Родитель, ПередЭлементом);
	НовЭлемент.ПутьКДанным				= ПутьКДанным;
	НовЭлемент.Вид						= ВидПоляФормы.ПолеКартинки;
	НовЭлемент.Заголовок				= Заголовок;
	НовЭлемент.КартинкаЗначений			= ?(КартинкаЗначений=Неопределено, ВидКартинки.Пустая, КартинкаЗначений);

	Возврат НовЭлемент;
КонецФункции // ПолеНадписи

// Добавляет на форму кнопку
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	ИмяКоманды		- Строка							- Имя команды формы
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция КнопкаФормы(Элементы, Имя, ИмяКоманды, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("КнопкаФормы"), Родитель, ПередЭлементом);
	НовЭлемент.ИмяКоманды				= ИмяКоманды;
	НовЭлемент.Заголовок				= Заголовок;

	Возврат НовЭлемент;
КонецФункции // КнопкаФормы

// Добавляет на командную панель кнопку
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	ИмяКоманды		- Строка							- Имя команды формы
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция КнопкаКоманднойПанели(Элементы, Имя, ИмяКоманды, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("КнопкаФормы"), Родитель, ПередЭлементом);
	НовЭлемент.ИмяКоманды				= ИмяКоманды;
	НовЭлемент.Вид						= ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовЭлемент.Заголовок				= Заголовок;

	Возврат НовЭлемент;
КонецФункции // КнопкаКоманднойПанели

#КонецОбласти

#Область Декорации

// Добавляет на форму декорацию в виде надписи
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция ДекорацияНадпись(Элементы, Имя, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ДекорацияФормы"), Родитель, ПередЭлементом);
	НовЭлемент.Вид						= ВидДекорацииФормы.Надпись;
	НовЭлемент.Заголовок				= Заголовок;

	Возврат НовЭлемент;
КонецФункции // ПолеНадписи

#КонецОбласти

#Область Таблица

// Добавляет на форму таблицу
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	ПутьКДанным		- Строка							- Содержит путь к реквизиту, с которым связан объект
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция Таблица(Элементы, Имя, ПутьКДанным, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ТаблицаФормы"), Родитель, ПередЭлементом);
	НовЭлемент.ПутьКДанным				= ПутьКДанным;
	НовЭлемент.Заголовок				= Заголовок;

	Возврат НовЭлемент;
КонецФункции // Таблица

// Добавляет в таблицу формы колонку поля ввода
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	ПутьКДанным		- Строка							- Содержит путь к реквизиту, с которым связан объект
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция КолонкаТаблицы(Элементы, Имя, ПутьКДанным, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ПолеФормы"), Родитель, ПередЭлементом);
	НовЭлемент.ПутьКДанным				= ПутьКДанным;
	НовЭлемент.Вид						= ВидПоляФормы.ПолеВвода;
	НовЭлемент.Заголовок				= Заголовок;

	Возврат НовЭлемент;
КонецФункции // КолонкаТаблицы

// Добавляет в таблицу формы колонку флажок
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	ПутьКДанным		- Строка							- Содержит путь к реквизиту, с которым связан объект
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция КолонкаТаблицыФлажок(Элементы, Имя, ПутьКДанным, Родитель, ПередЭлементом=Неопределено, Заголовок="") Экспорт

	НовЭлемент = Элемент(Элементы, Имя, Тип("ПолеФормы"), Родитель, ПередЭлементом);
	НовЭлемент.ПутьКДанным				= ПутьКДанным;
	НовЭлемент.Вид						= ВидПоляФормы.ПолеФлажка;
	НовЭлемент.Заголовок				= Заголовок;

	Возврат НовЭлемент;
КонецФункции // КолонкаТаблицыФлажок

#КонецОбласти

#Область Команды

// Добавляет команду в список команд формы
//
// Параметры:
//  Команды			- КомандыФормы						- Коллекция команд формы
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	Действие		- Строка							- Имя процедуры обработчика команды
//  Заголовок		- Строка							- Заголовок добавляемого элемента
//	Отображение		- ОтображениеКнопки, Неопределено	- Вид отображения связанной кнопки
//	Картинка		- Картинка, Неопределено			- Картинка элемента
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция Команда(Команды, Имя, Действие, Заголовок="", Отображение=Неопределено, Картинка=Неопределено) Экспорт

	НовКоманда = Команды.Добавить(Имя);
	НовКоманда.Действие			= Действие;
	НовКоманда.Заголовок		= Заголовок;
	НовКоманда.Отображение		= ?(Отображение=Неопределено, ОтображениеКнопки.Авто, Отображение);
	НовКоманда.Картинка			= ?(Картинка=Неопределено, Новый Картинка, Картинка);

	Возврат НовКоманда;
КонецФункции // Команда

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет на форму элемент нужного типа
// Если задан параметр "ПередЭлементом" и его родитель не совпадает с параметром "Родитель",
// то параметр "Родитель" игнорируется
//
// Параметры:
//  Элементы		- ВсеЭлементыФормы					- Коллекция всех элементов формы клиентского приложения
//  Имя				- Строка							- Уникальное имя добавляемого элемента
//	Тип				- Тип								- Тип добавляемого элемента
//  Родитель		- ГруппаФормы, ТаблицаФормы и пр.	- Родитель добавляемого элемента
//  ПередЭлементом	- ГруппаФормы, ТаблицаФормы и пр.	- Элемент, перед которым будет вставлен новый элемент
//
// Возвращаемое значение:
//  ЭлементФормы - Добавленный элемент
//
Функция Элемент(Элементы, Имя, Тип, Родитель, ПередЭлементом=Неопределено)

	Если ПередЭлементом = Неопределено Тогда
		НовЭлемент = Элементы.Добавить(Имя, Тип, Родитель);
	Иначе
		Если ПередЭлементом.Родитель = Родитель Тогда
			НовРодитель	= Родитель;
		Иначе
			НовРодитель	= ПередЭлементом.Родитель;
		КонецЕсли;
		НовЭлемент = Элементы.Вставить(Имя, Тип, НовРодитель, ПередЭлементом);
	КонецЕсли;

	Возврат НовЭлемент;
КонецФункции // Элемент

#КонецОбласти
