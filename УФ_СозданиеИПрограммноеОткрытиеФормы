////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                                                                        Создание частей формы

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                        РЕКВИЗИТ
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Заметки:{ 
В самый последний момент(ПослеЗаписиНаСервере) не резервирует ячейку под реквезит в БД. В функции ПослеЗаписиНаСервере(текущайОбъект) 
текущайОбъект не содержит этого реквезита, а в Объект есть этот реквезит. !!!Возможно из за определяемых типов которые нельзя исользовать в расширении
Заметки}

  	ДобавляемыеРеквизиты = Новый Массив;//Создается массив 
  
	НовыйРеквизит = Новый РеквизитФормы("эккоИдентификаторПериод",Новый ОписаниеТипов("Дата"));
	НовыйРеквизит.Заголовок = "Идентификатор период строкой";
	НовыйРеквизит.СохраняемыеДанные = Ложь;

	
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);//Вносятся изменения в форму
        ИзменитьРеквизиты(ДобавляемыеРеквизиты);  

//Создание ТЗ
        МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВТР_ТаблицаЭлементовКОбмену", ОписаниеТипаВыбора)); //ТЗ
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВТР_МассивЭлементов", Новый ОписаниеТипов(),"ВТР_ТаблицаЭлементовКОбмену"));//Колонка с Произвольным типом

//Создание СписокЗначений
	//Отлично работает с обычными массивами. Например как буфер(Есть выгрузка/загрузка массива)
	ВТР_СписокЭлементовКОбмену = Новый РеквизитФормы("ВТР_СписокЭлементовКОбмену", Новый ОписаниеТипов("СписокЗначений")); 
	ДобавляемыеРеквизиты.Добавить(ВТР_СписокЭлементовКОбмену);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты); 

  //ЭтотОбъект["эккоИдентификаторПериод"]; - обращение к программно созданному реквезиту

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                               ЭЛЕМЕНТ
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  //Сложный элемент Дата с регулятором и картинкой
  	НовыйЭлемент = Этаформа.Элементы.Вставить("эккоИсторияИзмененияSapHR",Тип("ПолеФормы"),Элементы.эккоДанныеSAPHR);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = "Заданный ниже Идентификатор действует с: ";
	НовыйЭлемент.ПутьКДанным = "эккоИдентификаторПериод";
	НовыйЭлемент.КнопкаВыбора = Истина;
	НовыйЭлемент.КнопкаРегулирования = Истина;
	НовыйЭлемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ПолеВводаКалендарь;
	НовыйЭлемент.ФорматРедактирования = "ДФ=dd.MM.yyyy";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "эккоИсторияИзмененияSapHRПриИзмененииПосле");
	НовыйЭлемент.УстановитьДействие("Регулирование", "эккоИсторияИзмененияSapHRРегулированиеПосле"); 
	НовыйЭлемент.Ширина = 14;
  
//Простой элемент 
        НовыйЭлемент = Элементы.Добавить("эккоИдентификаторSAPHRПозицииШРРуководителя", Тип("ПолеФормы"), Элементы.эккоГруппаИсторияИзмененияSapHR);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "Объект.эккоИдентификаторSAPHRПозицииШРРуководителя";
	
//ТЧ
	ТаблицаФормыВТР_ВентраГПХ = Элементы.Добавить("ВТР_ВентраГПХ", Тип("ТаблицаФормы"),ЭтотОбъект);
	ТаблицаФормыВТР_ВентраГПХ.ПутьКДанным = "Объект.ВТР_ВентраГПХ";
 
//Элемент ТЧ
        ТаблицаТовары = Элементы.Товары;
        НовыйРеквизит = Элементы.Добавить("Вес", Тип("ПолеФормы"), ТаблицаТовары);
        НовыйРеквизит.Заголовок = "Вес";
        НовыйРеквизит.Вид = ВидПоляФормы.ПолеВвода;
        НовыйРеквизит.ПутьКДанным = "Объект.Товары.Вес";
		
  //Группа
        ГруппаДатаНомер = ЭтаФорма.Элементы.Добавить("эккоГруппаИсторияИзмененияSapHR", Тип("ГруппаФормы"),Элементы.эккоДанныеSAPHR);
	ГруппаДатаНомер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДатаНомер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДатаНомер.ОтображатьЗаголовок = ЛОЖЬ; 
	ГруппаДатаНомер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

//Переместить или указать перед каким элементом расположить объект
	Этаформа.Элементы.Переместить(Элементы.РеквизитыБанкаИВТР_РеквизитыОтправителя, Элементы.ЭлектронныйДокументооборотСБанком, Элементы.БанковскиеКарты);
	
//КОМАНДА
	НоваяКоманда = ЭтаФорма.Команды.Добавить("эккоКомандаИсторияИзмененияSapHR");
	НоваяКоманда.Заголовок = "Общая команда";
	НоваяКоманда.Действие = "эккоКомандаИсторияИзмененияSapHRПосле";





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                                                                        Программное открытие и взаимодействие с формой

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                Войти в обработчик события формы "ПриИзменении" (Нелегальный способ)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Объект.Документ - ДокументСсылка(То что программно открываем и изменяет)
//Объект.Контрагент - То что хотим засунуть в программно открытую форму

&НаКлиенте
Процедура Обработать(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	//Новый Структура("Ключ", Объект.Документ) - Можно и без этого
	Форма = ОткрытьФорму("Документ.РасходнаяНакладная.Форма.ФормаДокумента", Новый Структура("Ключ", Объект.Документ));
	Форма.Объект.Контрагент = Объект.Контрагент;
	//Форма.Открыть(); - Если используется ПолучитьФорму(), то открытие перед иницализации ОБЯЗАТЕЛЬНО
	
	ИнтерактивноЗаписатьВЭлементУправления(Форма.Элементы.Контрагент, Форма.Объект.Контрагент, ЭтаФорма); //ЭтаФорма - форма обработки в модуле которой программируем открытие формы
	
	
КонецПроцедуры

// Интерактивно записывает значение в элемент управления. Интерактивность заключается в срабатывании
// события ПриИзменении у элемента управления.
//
// Параметры:
//  ЭлементУправления – ЭлементУправления – которому присваиваем значение;
//  Значение     – Произвольный – присваиваемое значение;
//  *ФормаИнициатор - Форма, УправляемаяФорма, *Неопределено - которая будет использована в качестве инициатора события;
//               если не указана, то будет создана временная форма-пустышка.
//
&НаКлиенте
Функция ИнтерактивноЗаписатьВЭлементУправления(ЭлементУправления, Знач Значение, Знач ФормаИнициатор = Неопределено)
	
	//Если ФормаИнициатор = Неопределено Тогда
	//	ФормаИнициатор = ПолучитьФорму("ОбщаяФорма.Пустышка", ЭлементУправления); 
	//Иначе
		СтарыйВладелец = ФормаИнициатор.ВладелецФормы;
		СтарыйЗакрыватьПриВыборе = ФормаИнициатор.ЗакрыватьПриВыборе;
		ФормаИнициатор.ВладелецФормы = ЭлементУправления;
		ФормаИнициатор.ЗакрыватьПриВыборе = Ложь;
	//КонецЕсли;
	НовоеЗначение = ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Значение);
	Если НовоеЗначение <> Значение Или ЭлементУправления.ТолькоПросмотр Тогда
		Возврат Ложь;
	КонецЕсли; 
	ФормаИнициатор.ОповеститьОВыборе(Значение); 
	Если СтарыйЗакрыватьПриВыборе <> Неопределено Тогда
		ФормаИнициатор.ВладелецФормы = СтарыйВладелец;
		ФормаИнициатор.ЗакрыватьПриВыборе = СтарыйЗакрыватьПриВыборе;
	КонецЕсли;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
Не проверенный спобоб (должен работать только с экспортными функциями)
/////////////////////////////////////////////////////////////////////////

Вызов не экспортной функции формы? ПараметрыФормы = Новый Структура("Ключ", ВыбранныйСотрудник)
Форма = ПолучитьФорму("Справочник.Сотрудники.ФормаЭлемента", ПараметрыФормы);
Форма.ЗарегистрироватьУвольнение();
